/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/css/application.scss":
/*!**********************************!*\
  !*** ./src/css/application.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/css/bootstrap.scss":
/*!********************************!*\
  !*** ./src/css/bootstrap.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/js/account.ts":
/*!***************************!*\
  !*** ./src/js/account.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReputationMeter": () => (/* binding */ ReputationMeter),
/* harmony export */   "bondReserveMultiplier": () => (/* binding */ bondReserveMultiplier),
/* harmony export */   "epochWeight": () => (/* binding */ epochWeight),
/* harmony export */   "likelyTaker": () => (/* binding */ likelyTaker),
/* harmony export */   "parcelLimitScoreMultiplier": () => (/* binding */ parcelLimitScoreMultiplier),
/* harmony export */   "perTierBaseParcelLimit": () => (/* binding */ perTierBaseParcelLimit),
/* harmony export */   "strongTier": () => (/* binding */ strongTier),
/* harmony export */   "tradingLimits": () => (/* binding */ tradingLimits)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");



const bondReserveMultiplier = 2; // Reserves for next bond
const perTierBaseParcelLimit = 2;
const parcelLimitScoreMultiplier = 3;
class ReputationMeter {
    constructor(div) {
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(this.page.penaltyMarkerTmpl);
    }
    setHost(host) {
        this.host = host;
    }
    update() {
        const { page, host } = this;
        const { auth, maxScore, penaltyThreshold } = (0,_registry__WEBPACK_IMPORTED_MODULE_2__.app)().exchanges[host];
        const { rep: { score } } = auth;
        const displayTier = strongTier(auth);
        const minScore = displayTier ? displayTier * penaltyThreshold * -1 : penaltyThreshold * -1; // Just for looks
        const warnPct = 25;
        const scorePct = 100 - warnPct;
        page.scoreWarn.style.width = `${warnPct}%`;
        const pos = score >= 0 ? warnPct + (score / maxScore) * scorePct : warnPct - (Math.min(warnPct, score / minScore * warnPct));
        page.scorePointer.style.left = `${pos}%`;
        page.scoreMin.textContent = String(minScore);
        page.scoreMax.textContent = String(maxScore);
        const bonus = limitBonus(score, maxScore);
        page.limitBonus.textContent = bonus.toFixed(1);
        for (const m of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.scoreTray, '.penalty-marker'))
            m.remove();
        if (displayTier > 1) {
            const markerPct = warnPct / displayTier;
            for (let i = 1; i < displayTier; i++) {
                const div = page.penaltyMarkerTmpl.cloneNode(true);
                page.scoreTray.appendChild(div);
                div.style.left = `${markerPct * i}%`;
            }
        }
        page.score.textContent = String(score);
        page.scoreData.classList.remove('negative', 'positive');
        if (score > 0)
            page.scoreData.classList.add('positive');
        else
            page.scoreData.classList.add('negative');
    }
}
/*
 * strongTier is the effective tier, with some respect for bond overlap, such
 * that we don't count weak bonds that have already had their replacements
 * confirmed.
 */
function strongTier(auth) {
    const { weakStrength, targetTier, effectiveTier } = auth;
    if (effectiveTier > targetTier) {
        const diff = effectiveTier - targetTier;
        if (weakStrength >= diff)
            return targetTier;
        return targetTier + (diff - weakStrength);
    }
    return effectiveTier;
}
function likelyTaker(ord, rate) {
    if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_1__.OrderTypeMarket || ord.tif === _orderutil__WEBPACK_IMPORTED_MODULE_1__.ImmediateTiF)
        return true;
    // Must cross the spread to be a taker (not so conservative).
    if (rate === 0)
        return false;
    if (ord.sell)
        return ord.rate < rate;
    return ord.rate > rate;
}
const preparcelQuantity = (ord, mkt, midGap) => {
    var _a, _b;
    const qty = ord.qty - ord.filled;
    if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_1__.OrderTypeLimit)
        return qty;
    if (ord.sell)
        return qty * ord.rate / _orderutil__WEBPACK_IMPORTED_MODULE_1__.RateEncodingFactor;
    const rate = midGap || ((_a = mkt === null || mkt === void 0 ? void 0 : mkt.spot) === null || _a === void 0 ? void 0 : _a.rate) || 0;
    // Caller should not call this for market orders without a mkt arg.
    if (!mkt)
        return 0;
    // This is tricky. The server will use the mid-gap rate to convert the
    // order qty. We don't have a mid-gap rate, only a spot rate.
    if (rate && (((_b = mkt === null || mkt === void 0 ? void 0 : mkt.spot) === null || _b === void 0 ? void 0 : _b.bookVolume) || 0) > 0)
        return qty * _orderutil__WEBPACK_IMPORTED_MODULE_1__.RateEncodingFactor / rate;
    return mkt.lotsize; // server uses same fallback if book is empty
};
function epochWeight(ord, mkt, midGap) {
    var _a;
    if (ord.status !== _orderutil__WEBPACK_IMPORTED_MODULE_1__.StatusEpoch)
        return 0;
    const qty = preparcelQuantity(ord, mkt, midGap);
    const rate = midGap || ((_a = mkt.spot) === null || _a === void 0 ? void 0 : _a.rate) || 0;
    if (likelyTaker(ord, rate))
        return qty * 2;
    return qty;
}
function bookWeight(ord) {
    if (ord.status !== _orderutil__WEBPACK_IMPORTED_MODULE_1__.StatusBooked)
        return 0;
    return preparcelQuantity(ord);
}
function settlingWeight(ord) {
    let sum = 0;
    for (const m of (ord.matches || [])) {
        if (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_1__.MatchSideMaker) {
            if (m.status > _orderutil__WEBPACK_IMPORTED_MODULE_1__.MakerRedeemed)
                continue;
        }
        else if (m.status > _orderutil__WEBPACK_IMPORTED_MODULE_1__.TakerSwapCast)
            continue;
        sum += m.qty;
    }
    return sum;
}
function parcelWeight(ord, mkt, midGap) {
    if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_1__.OrderTypeCancel)
        return 0;
    return epochWeight(ord, mkt, midGap) + bookWeight(ord) + settlingWeight(ord);
}
// function roundParcels (p: number): number {
//   return Math.floor(Math.round((p * 1e8)) / 1e8)
// }
function limitBonus(score, maxScore) {
    return score > 0 ? 1 + score / maxScore * (parcelLimitScoreMultiplier - 1) : 1;
}
function tradingLimits(host) {
    const { auth, maxScore, markets } = (0,_registry__WEBPACK_IMPORTED_MODULE_2__.app)().exchanges[host];
    const { rep: { score } } = auth;
    const tier = strongTier(auth);
    let usedParcels = 0;
    for (const mkt of Object.values(markets)) {
        let mktWeight = 0;
        for (const ord of (mkt.inflight || []))
            mktWeight += parcelWeight(ord, mkt);
        for (const ord of (mkt.orders || []))
            mktWeight += parcelWeight(ord, mkt);
        usedParcels += (mktWeight / (mkt.parcelsize * mkt.lotsize));
    }
    const parcelLimit = perTierBaseParcelLimit * limitBonus(score, maxScore) * tier;
    return [usedParcels, parcelLimit];
}


/***/ }),

/***/ "./src/js/app.ts":
/*!***********************!*\
  !*** ./src/js/app.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Application)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./register */ "./src/js/register.ts");
/* harmony import */ var _login__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./login */ "./src/js/login.ts");
/* harmony import */ var _wallets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wallets */ "./src/js/wallets.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./src/js/settings.ts");
/* harmony import */ var _markets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./markets */ "./src/js/markets.ts");
/* harmony import */ var _orders__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./orders */ "./src/js/orders.ts");
/* harmony import */ var _order__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./order */ "./src/js/order.ts");
/* harmony import */ var _mm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./mm */ "./src/js/mm.ts");
/* harmony import */ var _mmsettings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./mmsettings */ "./src/js/mmsettings.ts");
/* harmony import */ var _dexsettings__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dexsettings */ "./src/js/dexsettings.ts");
/* harmony import */ var _mmarchives__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mmarchives */ "./src/js/mmarchives.ts");
/* harmony import */ var _mmlogs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./mmlogs */ "./src/js/mmlogs.ts");
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./init */ "./src/js/init.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./notifications */ "./src/js/notifications.ts");
/* harmony import */ var _ws__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ws */ "./src/js/ws.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






















const idel = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idel; // = element by id
const bind = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind;
const unbind = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind;
const notificationRoute = 'notify';
const noteCacheSize = 100;
/* constructors is a map to page constructors. */
const constructors = {
    login: _login__WEBPACK_IMPORTED_MODULE_3__["default"],
    register: _register__WEBPACK_IMPORTED_MODULE_2__["default"],
    markets: _markets__WEBPACK_IMPORTED_MODULE_6__["default"],
    wallets: _wallets__WEBPACK_IMPORTED_MODULE_4__["default"],
    settings: _settings__WEBPACK_IMPORTED_MODULE_5__["default"],
    orders: _orders__WEBPACK_IMPORTED_MODULE_7__["default"],
    order: _order__WEBPACK_IMPORTED_MODULE_8__["default"],
    dexsettings: _dexsettings__WEBPACK_IMPORTED_MODULE_11__["default"],
    init: _init__WEBPACK_IMPORTED_MODULE_14__["default"],
    mm: _mm__WEBPACK_IMPORTED_MODULE_9__["default"],
    mmsettings: _mmsettings__WEBPACK_IMPORTED_MODULE_10__["default"],
    mmarchives: _mmarchives__WEBPACK_IMPORTED_MODULE_12__["default"],
    mmlogs: _mmlogs__WEBPACK_IMPORTED_MODULE_13__["default"]
};
const languageData = {
    'en-US': {
        name: 'English',
        flag: '🇺🇸' // Not 🇬🇧. MURICA!
    },
    'pt-BR': {
        name: 'Portugese',
        flag: '🇧🇷'
    },
    'zh-CN': {
        name: 'Chinese',
        flag: '🇨🇳'
    },
    'pl-PL': {
        name: 'Polish',
        flag: '🇵🇱'
    },
    'de-DE': {
        name: 'German',
        flag: '🇩🇪'
    },
    'ar': {
        name: 'Arabic',
        flag: '🇪🇬' // Egypt I guess
    }
};
// Application is the main javascript web application for Bison Wallet.
class Application {
    constructor() {
        this.notes = [];
        this.pokes = [];
        this.seedGenTime = 0;
        this.commitHash = "017099c1a5be1062de357cc615e25b563a1d76ed" || 0;
        this.noteReceivers = [];
        this.fiatRatesMap = {};
        this.showPopups = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].popupsLK) === '1';
        this.txHistoryMap = {};
        this.requiredActions = {};
        console.log('Bison Wallet, Build', this.commitHash.substring(0, 7));
        // Set Bootstrap dark theme attribute if dark mode is enabled.
        if (_state__WEBPACK_IMPORTED_MODULE_1__["default"].isDark()) {
            document.body.classList.add('dark');
        }
        // Loggers can be enabled by setting a truthy value to the loggerID using
        // enableLogger. Settings are stored across sessions. See docstring for the
        // log method for more info.
        this.loggers = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].loggersLK) || {};
        window.enableLogger = (loggerID, state) => {
            if (state)
                this.loggers[loggerID] = true;
            else
                delete this.loggers[loggerID];
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].loggersLK, this.loggers);
            return `${loggerID} logger ${state ? 'enabled' : 'disabled'}`;
        };
        // Enable logging from anywhere.
        window.log = (loggerID, ...a) => { this.log(loggerID, ...a); };
        window.mmStatus = () => this.mmStatus;
        // Recorders can record log messages, and then save them to file on request.
        const recorderKeys = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].recordersLK) || [];
        this.recorders = {};
        for (const loggerID of recorderKeys) {
            console.log('recording', loggerID);
            this.recorders[loggerID] = [];
        }
        window.recordLogger = (loggerID, on) => {
            if (on)
                this.recorders[loggerID] = [];
            else
                delete this.recorders[loggerID];
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].recordersLK, Object.keys(this.recorders));
            return `${loggerID} recorder ${on ? 'enabled' : 'disabled'}`;
        };
        window.dumpLogger = loggerID => {
            const record = this.recorders[loggerID];
            if (!record)
                return `no recorder for logger ${loggerID}`;
            const a = document.createElement('a');
            a.href = `data:application/octet-stream;base64,${window.btoa(JSON.stringify(record, null, 4))}`;
            a.download = `${loggerID}.json`;
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
            }, 0);
        };
        window.user = () => this.user;
    }
    /**
     * Start the application. This is the only thing done from the index.js entry
     * point. Read the id = main element and attach handlers.
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            // Handle back navigation from the browser.
            bind(window, 'popstate', (e) => {
                var _a;
                const page = (_a = e.state) === null || _a === void 0 ? void 0 : _a.page;
                if (!page && page !== '')
                    return;
                this.loadPage(page, e.state.data, true);
            });
            // The main element is the interchangeable part of the page that doesn't
            // include the header. Main should define a data-handler attribute
            // associated with one of the available constructors.
            this.main = idel(document, 'main');
            const handler = this.main.dataset.handler;
            // Don't fetch the user until we know what page we're on.
            yield this.fetchUser();
            const ignoreCachedLocale = "development" === 'development';
            yield _locales__WEBPACK_IMPORTED_MODULE_20__.loadLocale(this.lang, this.commitHash, ignoreCachedLocale);
            // The application is free to respond with a page that differs from the
            // one requested in the omnibox, e.g. routing though a login page. Set the
            // current URL state based on the actual page.
            const url = new URL(window.location.href);
            if (handlerFromPath(url.pathname) !== handler) {
                url.pathname = `/${handler}`;
                url.search = '';
                window.history.replaceState({ page: handler }, '', url);
            }
            // Attach stuff.
            this.attachHeader();
            this.attachActions();
            this.attachCommon(this.header);
            this.attach({});
            // If we are authed, populate notes, otherwise get we'll them from the login
            // response.
            if (this.authed)
                yield this.fetchNotes();
            this.updateMenuItemsDisplay();
            // initialize desktop notifications
            _notifications__WEBPACK_IMPORTED_MODULE_18__.fetchDesktopNtfnSettings();
            // Connect the websocket and register the notification route.
            _ws__WEBPACK_IMPORTED_MODULE_19__["default"].connect(getSocketURI(), () => this.reconnected());
            _ws__WEBPACK_IMPORTED_MODULE_19__["default"].registerRoute(notificationRoute, (note) => {
                this.notify(note);
            });
        });
    }
    /*
     * reconnected is called by the websocket client when a reconnection is made.
     */
    reconnected() {
        var _a;
        if (((_a = this.main) === null || _a === void 0 ? void 0 : _a.dataset.handler) === 'settings')
            window.location.assign('/');
        else
            window.location.reload(); // This triggers another websocket disconnect/connect (!)
        // a fetchUser() and loadPage(window.history.state.page) might work
    }
    /*
     * Fetch and save the user, which is the primary core state that must be
     * maintained by the Application.
     */
    fetchUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.getJSON)('/api/user');
            if (!this.checkResponse(resp))
                return;
            this.inited = resp.inited;
            this.authed = Boolean(resp.user);
            this.lang = resp.lang;
            this.langs = resp.langs;
            this.mmStatus = resp.mmStatus;
            if (!resp.user)
                return;
            const user = resp.user;
            this.seedGenTime = user.seedgentime;
            this.user = user;
            this.assets = user.assets;
            this.exchanges = user.exchanges;
            this.walletMap = {};
            this.fiatRatesMap = user.fiatRates;
            for (const [assetID, asset] of Object.entries(user.assets)) {
                if (asset.wallet) {
                    this.walletMap[assetID] = asset.wallet;
                }
            }
            this.updateMenuItemsDisplay();
            return user;
        });
    }
    fetchMMStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            this.mmStatus = yield _mmutil__WEBPACK_IMPORTED_MODULE_15__.MM.status();
        });
    }
    /* Load the page from the server. Insert and bind the DOM. */
    loadPage(page, data, skipPush) {
        return __awaiter(this, void 0, void 0, function* () {
            // Close some menus and tooltips.
            this.tooltip.style.left = '-10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.noteBox, this.page.profileBox);
            // Parse the request.
            const url = new URL(`/${page}`, window.location.origin);
            const requestedHandler = handlerFromPath(page);
            // Fetch and parse the page.
            const response = yield window.fetch(url.toString());
            if (!response.ok)
                return false;
            const html = yield response.text();
            const doc = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].noderize(html);
            const main = idel(doc, 'main');
            const delivered = main.dataset.handler;
            // Append the request to the page history.
            if (!skipPush) {
                const path = delivered === requestedHandler ? url.toString() : `/${delivered}`;
                window.history.pushState({ page: page, data: data }, '', path);
            }
            // Insert page and attach handlers.
            document.title = doc.title;
            this.main.replaceWith(main);
            this.main = main;
            this.noteReceivers = [];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.headerSpace);
            this.attach(data);
            return true;
        });
    }
    /* attach binds the common handlers and calls the page constructor. */
    attach(data) {
        const handlerID = this.main.dataset.handler;
        if (!handlerID) {
            console.error('cannot attach to content with no specified handler');
            return;
        }
        this.attachCommon(this.main);
        if (this.loadedPage)
            this.loadedPage.unload();
        const constructor = constructors[handlerID];
        if (constructor)
            this.loadedPage = new constructor(this.main, data);
        else
            this.loadedPage = null;
        // Bind the tooltips.
        this.bindTooltips(this.main);
        if (window.isWebview) {
            // Bind webview URL handlers
            this.bindUrlHandlers(this.main);
        }
        this.bindUnits(this.main);
    }
    bindTooltips(ancestor) {
        ancestor.querySelectorAll('[data-tooltip]').forEach((el) => {
            bind(el, 'mouseenter', () => {
                this.tooltip.textContent = el.dataset.tooltip || '';
                const lyt = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].layoutMetrics(el);
                let left = lyt.centerX - this.tooltip.offsetWidth / 2;
                if (left < 0)
                    left = 5;
                if (left + this.tooltip.offsetWidth > document.body.offsetWidth) {
                    left = document.body.offsetWidth - this.tooltip.offsetWidth - 5;
                }
                this.tooltip.style.left = `${left}px`;
                this.tooltip.style.top = `${lyt.bodyTop - this.tooltip.offsetHeight - 5}px`;
            });
            bind(el, 'mouseleave', () => {
                this.tooltip.style.left = '-10000px';
            });
        });
    }
    /*
     * bindUnits binds a hovering unit selection menu to the value or rate
     * display elements. The menu gives users an option to convert the value
     * to their preferred units.
     */
    bindUnits(main) {
        const div = document.createElement('div');
        div.classList.add('position-absolute', 'p-3');
        // div.style.backgroundColor = 'yellow'
        const rows = document.createElement('div');
        div.appendChild(rows);
        rows.classList.add('body-bg', 'border');
        const addRow = (el, unit, cFactor) => {
            const box = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, '[data-unit-box]');
            const atoms = parseInt(box.dataset.atoms);
            const row = document.createElement('div');
            row.textContent = unit;
            rows.appendChild(row);
            row.classList.add('p-2', 'hoverbg', 'pointer');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(row, 'click', () => {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setText(el, '[data-value]', _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(atoms / cFactor, Math.round(Math.log10(cFactor))));
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setText(el, '[data-unit]', unit);
            });
        };
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(main, '[data-conversion-value]')) {
            const box = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, '[data-unit-box]');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(box, 'mouseenter', () => {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(rows);
                box.appendChild(div);
                const lyt = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].layoutMetrics(box);
                const assetID = parseInt(box.dataset.assetID);
                const { unitInfo: ui } = this.assets[assetID];
                addRow(el, ui.conventional.unit, ui.conventional.conversionFactor);
                for (const { unit, conversionFactor } of ui.denominations)
                    addRow(el, unit, conversionFactor);
                addRow(el, ui.atomicUnit, 1);
                if (lyt.bodyTop > (div.offsetHeight + this.header.offsetHeight)) {
                    div.style.bottom = 'calc(100% - 1rem)';
                    div.style.top = 'auto';
                }
                else {
                    div.style.top = 'calc(100% - 1rem)';
                    div.style.bottom = 'auto';
                }
            });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(box, 'mouseleave', () => div.remove());
        }
    }
    bindUrlHandlers(ancestor) {
        if (!window.openUrl)
            return;
        for (const link of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, 'a[target=_blank]')) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(link, 'click', (e) => {
                var _a;
                e.preventDefault();
                window.openUrl((_a = link.href) !== null && _a !== void 0 ? _a : '');
            });
        }
    }
    /* attachHeader attaches the header element, which unlike the main element,
     * isn't replaced during page navigation.
     */
    attachHeader() {
        this.header = idel(document.body, 'header');
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(this.header);
        this.headerSpace = page.headerSpace;
        this.popupNotes = idel(document.body, 'popupNotes');
        this.popupTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(this.popupNotes, 'note');
        if (this.popupTmpl)
            this.popupTmpl.remove();
        else
            console.error('popupTmpl element not found');
        this.tooltip = idel(document.body, 'tooltip');
        page.noteTmpl.removeAttribute('id');
        page.noteTmpl.remove();
        page.pokeTmpl.removeAttribute('id');
        page.pokeTmpl.remove();
        page.loader.remove();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.loader);
        bind(page.noteBell, 'click', () => __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.pokeList);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noteList);
            this.ackNotes();
            page.noteCat.classList.add('active');
            page.pokeCat.classList.remove('active');
            this.showDropdown(page.noteBell, page.noteBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noteIndicator);
            for (const note of this.notes) {
                if (note.acked) {
                    note.el.classList.remove('firstview');
                }
            }
            this.setNoteTimes(page.noteList);
            this.setNoteTimes(page.pokeList);
        }));
        bind(page.burgerIcon, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.logoutErr);
            this.showDropdown(page.burgerIcon, page.profileBox);
        });
        bind(page.innerNoteIcon, 'click', () => { _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noteBox); });
        bind(page.innerBurgerIcon, 'click', () => { _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.profileBox); });
        bind(page.profileSignout, 'click', () => __awaiter(this, void 0, void 0, function* () { return yield this.signOut(); }));
        bind(page.pokeCat, 'click', () => {
            this.setNoteTimes(page.pokeList);
            page.pokeCat.classList.add('active');
            page.noteCat.classList.remove('active');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noteList);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.pokeList);
            this.ackNotes();
        });
        bind(page.noteCat, 'click', () => {
            this.setNoteTimes(page.noteList);
            page.noteCat.classList.add('active');
            page.pokeCat.classList.remove('active');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.pokeList);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noteList);
            this.ackNotes();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.langBttnTmpl);
        const { name, flag } = languageData[this.lang];
        page.langFlag.textContent = flag;
        page.langName.textContent = name;
        for (const lang of this.langs) {
            if (lang === this.lang)
                continue;
            const div = page.langBttnTmpl.cloneNode(true);
            const { name, flag } = languageData[lang];
            div.textContent = flag;
            div.title = name;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(div, 'click', () => this.setLanguage(lang));
            page.langBttns.appendChild(div);
        }
    }
    attachActions() {
        const { page } = this;
        Object.assign(page, _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].idel(document.body, 'requiredActions')));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.missingNoncesTmpl, page.actionTxTableTmpl, page.tooCheapTmpl, page.lostNonceTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.actionsCollapse, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.actionDialog);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.actionDialogCollapsed);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.actionDialogCollapsed, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.actionDialogCollapsed);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.actionDialog);
            if (page.actionDialogContent.children.length === 0)
                this.showOldestAction();
        });
        const showAdjacentAction = (dir) => {
            const selected = Object.values(this.requiredActions).filter((r) => r.selected)[0];
            const actions = this.sortedActions();
            const idx = actions.indexOf(selected);
            this.showRequestedAction(actions[idx + dir].uniqueID);
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.prevAction, 'click', () => showAdjacentAction(-1));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.nextAction, 'click', () => showAdjacentAction(1));
    }
    setRequiredActions() {
        const { user: { actions }, requiredActions } = this;
        if (!actions)
            return;
        for (const a of actions)
            this.addAction(a);
        if (Object.keys(requiredActions).length) {
            this.showOldestAction();
            this.blinkAction();
        }
    }
    sortedActions() {
        const actions = Object.values(this.requiredActions);
        actions.sort((a, b) => a.stamp - b.stamp);
        return actions;
    }
    showOldestAction() {
        this.showRequestedAction(this.sortedActions()[0].uniqueID);
    }
    addAction(req) {
        const { page, requiredActions } = this;
        const existingAction = requiredActions[req.uniqueID];
        if (existingAction && existingAction.actionID === req.actionID)
            return;
        const div = this.actionForm(req);
        if (existingAction) {
            if (existingAction.selected)
                existingAction.div.replaceWith(div);
            existingAction.div = div;
        }
        else {
            requiredActions[req.uniqueID] = {
                div,
                stamp: (new Date()).getTime(),
                uniqueID: req.uniqueID,
                actionID: req.actionID,
                selected: false
            };
            const n = Object.keys(requiredActions).length;
            page.actionDialogCount.textContent = String(n);
            page.actionCount.textContent = String(n);
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isHidden(page.actionDialog)) {
                this.showRequestedAction(req.uniqueID);
            }
        }
    }
    blinkAction() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].blink(this.page.actionDialog);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].blink(this.page.actionDialogCollapsed);
    }
    resolveAction(req) {
        this.resolveActionWithID(req.uniqueID);
    }
    resolveActionWithID(uniqueID) {
        const { page, requiredActions } = this;
        const existingAction = requiredActions[uniqueID];
        if (!existingAction)
            return;
        delete requiredActions[uniqueID];
        const rem = Object.keys(requiredActions).length;
        existingAction.div.remove();
        if (rem === 0) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.actionDialog, page.actionDialogCollapsed);
            return;
        }
        page.actionDialogCount.textContent = String(rem);
        page.actionCount.textContent = String(rem);
        if (existingAction.selected)
            this.showOldestAction();
    }
    actionForm(req) {
        switch (req.actionID) {
            case 'tooCheap':
                return this.tooCheapAction(req);
            case 'missingNonces':
                return this.missingNoncesAction(req);
            case 'lostNonce':
                return this.lostNonceAction(req);
            case 'redeemRejected':
                return this.redeemRejectedAction(req);
        }
        throw Error('unknown required action ID ' + req.actionID);
    }
    actionTxTable(req) {
        const { assetID, payload } = req;
        const n = payload;
        const { unitInfo: ui, token } = this.assets[assetID];
        const table = this.page.actionTxTableTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(table);
        tmpl.lostTxID.textContent = n.tx.id;
        tmpl.lostTxID.dataset.explorerCoin = n.tx.id;
        (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_21__.setCoinHref)(token ? token.parentID : assetID, tmpl.lostTxID);
        tmpl.txAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(n.tx.amount, ui);
        tmpl.amtUnit.textContent = ui.conventional.unit;
        const parentUI = token ? this.unitInfo(token.parentID) : ui;
        tmpl.type.textContent = (0,_wallets__WEBPACK_IMPORTED_MODULE_4__.txTypeString)(n.tx.type);
        tmpl.feeAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(n.tx.fees, parentUI);
        tmpl.feeUnit.textContent = parentUI.conventional.unit;
        switch (req.actionID) {
            case 'tooCheap': {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.newFeesRow);
                tmpl.newFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(n.tx.fees, parentUI);
                tmpl.newFeesUnit.textContent = parentUI.conventional.unit;
                break;
            }
        }
        return table;
    }
    submitAction(req, action, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(errMsg);
            const loading = this.loading(this.page.actionDialog);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)('/api/takeaction', {
                assetID: req.assetID,
                actionID: req.actionID,
                action
            });
            loading();
            if (!this.checkResponse(res)) {
                errMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(errMsg);
                return;
            }
            this.resolveActionWithID(req.uniqueID);
        });
    }
    missingNoncesAction(req) {
        const { assetID } = req;
        const div = this.page.missingNoncesTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
        const { name } = this.assets[assetID];
        tmpl.assetName.textContent = name;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.doNothingBttn, 'click', () => {
            this.submitAction(req, { recover: false }, tmpl.errMsg);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.recoverBttn, 'click', () => {
            this.submitAction(req, { recover: true }, tmpl.errMsg);
        });
        return div;
    }
    tooCheapAction(req) {
        const { assetID, payload } = req;
        const n = payload;
        const div = this.page.tooCheapTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
        const { name } = this.assets[assetID];
        tmpl.assetName.textContent = name;
        tmpl.txTable.appendChild(this.actionTxTable(req));
        const act = (bump) => {
            this.submitAction(req, {
                txID: n.tx.id,
                bump
            }, tmpl.errMsg);
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.keepWaitingBttn, 'click', () => act(false));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.addFeesBttn, 'click', () => act(true));
        return div;
    }
    lostNonceAction(req) {
        const { assetID, payload } = req;
        const n = payload;
        const div = this.page.lostNonceTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
        const { name } = this.assets[assetID];
        tmpl.assetName.textContent = name;
        tmpl.nonce.textContent = String(n.nonce);
        tmpl.txTable.appendChild(this.actionTxTable(req));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.abandonBttn, 'click', () => {
            this.submitAction(req, { txID: n.tx.id, abandon: true }, tmpl.errMsg);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.keepWaitingBttn, 'click', () => {
            this.submitAction(req, { txID: n.tx.id, abandon: false }, tmpl.errMsg);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.replaceBttn, 'click', () => {
            const replacementID = tmpl.idInput.value;
            if (!replacementID) {
                tmpl.idInput.focus();
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].blink(tmpl.idInput);
                return;
            }
            this.submitAction(req, { txID: n.tx.id, abandon: false, replacementID }, tmpl.errMsg);
        });
        return div;
    }
    redeemRejectedAction(req) {
        const { orderID, coinID, coinFmt, assetID } = req.payload;
        const div = this.page.rejectedRedemptionTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
        const { name, token } = this.assets[assetID];
        tmpl.assetName.textContent = name;
        tmpl.txid.textContent = coinFmt;
        tmpl.txid.dataset.explorerCoin = coinID;
        (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_21__.setCoinHref)(token ? token.parentID : assetID, tmpl.txid);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.doNothingBttn, 'click', () => {
            this.submitAction(req, { orderID, coinID, retry: false }, tmpl.errMsg);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.tryAgainBttn, 'click', () => {
            this.submitAction(req, { orderID, coinID, retry: true }, tmpl.errMsg);
        });
        return div;
    }
    showRequestedAction(uniqueID) {
        const { page, requiredActions } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.actionDialogCollapsed);
        for (const r of Object.values(requiredActions))
            r.selected = r.uniqueID === uniqueID;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.actionDialogContent);
        const action = requiredActions[uniqueID];
        page.actionDialogContent.appendChild(action.div);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.actionDialog);
        const actions = this.sortedActions();
        if (actions.length === 1) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.actionsNavigator);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.actionsNavigator);
        const idx = actions.indexOf(action);
        page.currentAction.textContent = String(idx + 1);
        page.prevAction.classList.toggle('invisible', idx === 0);
        page.nextAction.classList.toggle('invisible', idx === actions.length - 1);
    }
    /*
     * updateMarketElements sets the textContent for any ticker or asset name
     * elements or any asset logo src attributes for descendents of ancestor.
     */
    updateMarketElements(ancestor, baseID, quoteID, xc) {
        const getAsset = (assetID) => {
            const a = this.assets[assetID];
            if (a)
                return a;
            if (!xc)
                throw Error(`no asset found for asset ID ${assetID}`);
            const xcAsset = xc.assets[assetID];
            return { unitInfo: xcAsset.unitInfo, name: xcAsset.symbol, symbol: xcAsset.symbol };
        };
        const { unitInfo: bui, name: baseName, symbol: baseSymbol } = getAsset(baseID);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-base-name'))
            el.textContent = baseName;
        for (const img of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-base-logo]'))
            img.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(baseSymbol);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-base-ticker]'))
            el.textContent = bui.conventional.unit;
        const { unitInfo: qui, name: quoteName, symbol: quoteSymbol } = getAsset(quoteID);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-quote-name'))
            el.textContent = quoteName;
        for (const img of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-quote-logo]'))
            img.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(quoteSymbol);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(ancestor, '[data-quote-ticker]'))
            el.textContent = qui.conventional.unit;
    }
    setLanguage(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)('/api/setlocale', lang);
            window.location.reload();
        });
    }
    /*
     * showDropdown sets the position and visibility of the specified dropdown
     * dialog according to the position of its icon button.
     */
    showDropdown(icon, dialog) {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.noteBox, this.page.profileBox);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(dialog);
        if (window.innerWidth < 500)
            Object.assign(dialog.style, { left: '0', right: '0', top: '0' });
        else {
            const ico = icon.getBoundingClientRect();
            const right = `${window.innerWidth - ico.left - ico.width + 5}px`;
            Object.assign(dialog.style, { left: 'auto', right, top: `${ico.top - 4}px` });
        }
        const hide = (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, dialog)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(dialog);
                unbind(document, 'click', hide);
                if (dialog === this.page.noteBox && _doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(this.page.noteList)) {
                    this.ackNotes();
                }
            }
        };
        bind(document, 'click', hide);
    }
    ackNotes() {
        const acks = [];
        for (const note of this.notes) {
            if (note.acked) {
                note.el.classList.remove('firstview');
            }
            else {
                note.acked = true;
                if (note.id && note.severity > _notifications__WEBPACK_IMPORTED_MODULE_18__.POKE)
                    acks.push(note.id);
            }
        }
        if (acks.length)
            _ws__WEBPACK_IMPORTED_MODULE_19__["default"].request('acknotes', acks);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.noteIndicator);
    }
    setNoteTimes(noteList) {
        for (const el of Array.from(noteList.children)) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'span.note-time').textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(el.note.stamp);
        }
    }
    /*
     * bindInternalNavigation hijacks navigation by click on any local links that
     * are descendants of ancestor.
     */
    bindInternalNavigation(ancestor) {
        const pageURL = new URL(window.location.href);
        ancestor.querySelectorAll('a').forEach(a => {
            if (!a.href)
                return;
            const url = new URL(a.href);
            if (url.origin === pageURL.origin) {
                const token = url.pathname.substring(1);
                const params = {};
                if (url.search) {
                    url.searchParams.forEach((v, k) => {
                        params[k] = v;
                    });
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(a, 'click', (e) => {
                    e.preventDefault();
                    this.loadPage(token, params);
                });
            }
        });
    }
    /*
     * updateMenuItemsDisplay should be called when the user has signed in or out,
     * and when the user registers a DEX.
     */
    updateMenuItemsDisplay() {
        const { page, authed, mmStatus } = this;
        if (!page) {
            // initial page load, header elements not yet attached but menu items
            // would already be hidden/displayed as appropriate.
            return;
        }
        if (!authed) {
            page.profileBox.classList.remove('authed');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noteBell, page.walletsMenuEntry, page.marketsMenuEntry);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(Object.keys(this.exchanges).length > 0, page.marketsMenuEntry, page.mmLink);
        page.profileBox.classList.add('authed');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noteBell, page.walletsMenuEntry, page.marketsMenuEntry);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(mmStatus, page.mmLink);
    }
    fetchNotes() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.getJSON)('/api/notes');
            if (!this.checkResponse(res))
                return console.error('failed to fetch notes:', (res === null || res === void 0 ? void 0 : res.msg) || String(res));
            res.notes.reverse();
            this.setNotes(res.notes);
            this.setPokes(res.pokes);
            this.setRequiredActions();
        });
    }
    /* attachCommon scans the provided node and handles some common bindings. */
    attachCommon(node) {
        this.bindInternalNavigation(node);
    }
    /*
     * updateBondConfs updates the information for a pending bond.
     */
    updateBondConfs(dexAddr, coinID, confs) {
        const dex = this.exchanges[dexAddr];
        for (const bond of dex.auth.pendingBonds)
            if (bond.coinID === coinID)
                bond.confs = confs;
    }
    updateTier(host, bondedTier) {
        this.exchanges[host].auth.rep.bondedTier = bondedTier;
    }
    /*
     * handleBondNote is the handler for the 'bondpost'-type notification, which
     * is used to update the dex tier and registration status.
     */
    handleBondNote(note) {
        if (note.auth)
            this.exchanges[note.dex].auth = note.auth;
        switch (note.topic) {
            case 'RegUpdate':
                if (note.coinID !== null) { // should never be null for RegUpdate
                    this.updateBondConfs(note.dex, note.coinID, note.confirmations);
                }
                break;
            case 'BondConfirmed':
                if (note.tier !== null) { // should never be null for BondConfirmed
                    this.updateTier(note.dex, note.tier);
                }
                break;
            default:
                break;
        }
    }
    /*
     * handleTransaction either adds a new transaction to the transaction history
     * or updates an existing transaction.
     */
    handleTransactionNote(assetID, note) {
        const txHistory = this.txHistoryMap[assetID];
        if (!txHistory)
            return;
        if (note.new) {
            txHistory.txs.unshift(note.transaction);
            return;
        }
        for (let i = 0; i < txHistory.txs.length; i++) {
            if (txHistory.txs[i].id === note.transaction.id) {
                txHistory.txs[i] = note.transaction;
                break;
            }
        }
    }
    handleTxHistorySyncedNote(assetID) {
        delete this.txHistoryMap[assetID];
    }
    loggedIn(notes, pokes) {
        this.setNotes(notes);
        this.setPokes(pokes);
        this.setRequiredActions();
    }
    /*
     * setNotes sets the current notification cache and populates the notification
     * display.
     */
    setNotes(notes) {
        this.log('notes', 'setNotes', notes);
        this.notes = [];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.noteList);
        for (let i = 0; i < notes.length; i++) {
            this.prependNoteElement(notes[i]);
        }
    }
    /*
     * setPokes sets the current poke cache and populates the pokes display.
     */
    setPokes(pokes) {
        this.log('pokes', 'setPokes', pokes);
        this.pokes = [];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.pokeList);
        for (let i = 0; i < pokes.length; i++) {
            this.prependPokeElement(pokes[i]);
        }
    }
    botStatus(host, baseID, quoteID) {
        var _a, _b;
        for (const bot of ((_b = (_a = this.mmStatus) === null || _a === void 0 ? void 0 : _a.bots) !== null && _b !== void 0 ? _b : [])) {
            const { config: c } = bot;
            if (host === c.host && baseID === c.baseID && quoteID === c.quoteID) {
                return bot;
            }
        }
    }
    updateUser(note) {
        const { user, assets, walletMap } = this;
        if (note.type === 'fiatrateupdate') {
            this.fiatRatesMap = note.fiatRates;
            return;
        }
        // Some notes can be received before we get a User during login.
        if (!user)
            return;
        switch (note.type) {
            case 'order': {
                const orderNote = note;
                const order = orderNote.order;
                const mkt = user.exchanges[order.host].markets[order.market];
                const tempID = orderNote.tempID;
                // Ensure market's inflight orders list is updated.
                if (note.topic === 'AsyncOrderSubmitted') {
                    const inFlight = order;
                    inFlight.tempID = tempID;
                    if (!mkt.inflight)
                        mkt.inflight = [inFlight];
                    else
                        mkt.inflight.push(inFlight);
                    break;
                }
                else if (note.topic === 'AsyncOrderFailure') {
                    mkt.inflight = mkt.inflight.filter(ord => ord.tempID !== tempID);
                    break;
                }
                else {
                    for (const i in mkt.inflight || []) {
                        if (!(mkt.inflight[i].tempID === tempID))
                            continue;
                        mkt.inflight = mkt.inflight.filter(ord => ord.tempID !== tempID);
                        break;
                    }
                }
                // Updates given order in market's orders list if it finds it.
                // Returns a bool which indicates if order was found.
                mkt.orders = mkt.orders || [];
                const updateOrder = (mkt, ord) => {
                    const i = mkt.orders.findIndex((o) => o.id === ord.id);
                    if (i === -1)
                        return false;
                    if (note.topic === 'OrderRetired')
                        mkt.orders.splice(i, 1);
                    else
                        mkt.orders[i] = ord;
                    return true;
                };
                // If the notification order already exists we update it.
                // In case market's orders list is empty or the notification order isn't
                // part of it we add it manually as this means the order was
                // just placed.
                if (!updateOrder(mkt, order))
                    mkt.orders.push(order);
                break;
            }
            case 'balance': {
                const n = note;
                const asset = user.assets[n.assetID];
                // Balance updates can come before the user is fetched after login.
                if (!asset)
                    break;
                const w = asset.wallet;
                if (w)
                    w.balance = n.balance;
                break;
            }
            case 'bondpost':
                this.handleBondNote(note);
                break;
            case 'reputation': {
                const n = note;
                this.exchanges[n.host].auth.rep = n.rep;
                break;
            }
            case 'walletstate':
            case 'walletconfig': {
                // assets can be null if failed to connect to dex server.
                if (!assets)
                    return;
                const wallet = note === null || note === void 0 ? void 0 : note.wallet;
                if (!wallet)
                    return;
                const asset = assets[wallet.assetID];
                asset.wallet = wallet;
                walletMap[wallet.assetID] = wallet;
                break;
            }
            case 'walletsync': {
                const n = note;
                const w = this.walletMap[n.assetID];
                if (w) {
                    w.syncStatus = n.syncStatus;
                    w.synced = w.syncStatus.synced;
                    w.syncProgress = n.syncProgress;
                }
                break;
            }
            case 'match': {
                const n = note;
                const ord = this.order(n.orderID);
                if (ord)
                    updateMatch(ord, n.match);
                break;
            }
            case 'conn': {
                const n = note;
                const xc = user.exchanges[n.host];
                if (xc)
                    xc.connectionStatus = n.connectionStatus;
                break;
            }
            case 'spots': {
                const n = note;
                const xc = user.exchanges[n.host];
                // Spots can come before the user is fetched after login and before/while the
                // markets page reload when it receives a dex conn note.
                if (!xc || !xc.markets)
                    break;
                for (const [mktName, spot] of Object.entries(n.spots))
                    xc.markets[mktName].spot = spot;
                break;
            }
            case 'fiatrateupdate': {
                this.fiatRatesMap = note.fiatRates;
                break;
            }
            case 'actionrequired': {
                const n = note;
                this.addAction(n.payload);
                break;
            }
            case 'walletnote': {
                const n = note;
                switch (n.payload.route) {
                    case 'transaction': {
                        const txNote = n.payload;
                        this.handleTransactionNote(n.payload.assetID, txNote);
                        break;
                    }
                    case 'actionRequired': {
                        const req = n.payload;
                        this.addAction(req);
                        this.blinkAction();
                        break;
                    }
                    case 'actionResolved': {
                        this.resolveAction(n.payload);
                    }
                }
                if (n.payload.route === 'transactionHistorySynced') {
                    this.handleTxHistorySyncedNote(n.payload.assetID);
                }
                break;
            }
            case 'runstats': {
                this.log('mm', { runstats: note });
                const n = note;
                const bot = this.botStatus(n.host, n.baseID, n.quoteID);
                if (bot) {
                    bot.runStats = n.stats;
                    bot.running = Boolean(n.stats);
                    if (!n.stats) {
                        bot.latestEpoch = undefined;
                        bot.cexProblems = undefined;
                    }
                }
                break;
            }
            case 'cexnote': {
                const n = note;
                switch (n.topic) {
                    case 'BalanceUpdate': {
                        const u = n.note;
                        this.mmStatus.cexes[n.cexName].balances[u.assetID] = u.balance;
                    }
                }
                break;
            }
            case 'epochreport': {
                const n = note;
                const bot = this.botStatus(n.host, n.baseID, n.quoteID);
                if (bot)
                    bot.latestEpoch = n.report;
                break;
            }
            case 'cexproblems': {
                const n = note;
                const bot = this.botStatus(n.host, n.baseID, n.quoteID);
                if (bot)
                    bot.cexProblems = n.problems;
                break;
            }
        }
    }
    /*
     * notify is the top-level handler for notifications received from the client.
     * Notifications are propagated to the loadedPage.
     */
    notify(note) {
        // Handle type-specific updates.
        this.log('notes', 'notify', note);
        this.updateUser(note);
        // Inform the page.
        for (const feeder of this.noteReceivers) {
            const f = feeder[note.type];
            if (!f)
                continue;
            try {
                f(note);
            }
            catch (error) {
                console.error('note feeder error:', error.message ? error.message : error);
                console.log(note);
                console.log(error.stack);
            }
        }
        // Discard data notifications.
        if (note.severity < _notifications__WEBPACK_IMPORTED_MODULE_18__.POKE)
            return;
        // Poke notifications have their own display.
        const { popupTmpl, popupNotes, showPopups } = this;
        if (showPopups) {
            const span = popupTmpl.cloneNode(true);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(span, 'text').textContent = `${note.subject}: ${_notifications__WEBPACK_IMPORTED_MODULE_18__.plainNote(note.details)}`;
            const indicator = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(span, 'indicator');
            if (note.severity === _notifications__WEBPACK_IMPORTED_MODULE_18__.POKE) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(indicator);
            }
            else
                setSeverityClass(indicator, note.severity);
            popupNotes.appendChild(span);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(popupNotes);
            // These take up screen space. Only show max 5 at a time.
            while (popupNotes.children.length > 5)
                popupNotes.removeChild(popupNotes.firstChild);
            setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(500, (progress) => {
                    span.style.opacity = String(1 - progress);
                });
                span.remove();
                if (popupNotes.children.length === 0)
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(popupNotes);
            }), 6000);
        }
        // Success and higher severity go to the bell dropdown.
        if (note.severity === _notifications__WEBPACK_IMPORTED_MODULE_18__.POKE)
            this.prependPokeElement(note);
        else
            this.prependNoteElement(note);
        // show desktop notification
        _notifications__WEBPACK_IMPORTED_MODULE_18__.desktopNotify(note);
    }
    /*
     * registerNoteFeeder registers a feeder for core notifications. The feeder
     * will be de-registered when a new page is loaded.
     */
    registerNoteFeeder(receivers) {
        this.noteReceivers.push(receivers);
    }
    /*
     * log prints to the console if a logger has been enabled. Loggers are created
     * implicitly by passing a loggerID to log. i.e. you don't create a logger,
     * you just log to it. Loggers are enabled by invoking a global function,
     * enableLogger(loggerID, onOffBoolean), from the browser's js console. Your
     * choices are stored across sessions. Some common and useful loggers are
     * listed below, but this list is not meant to be comprehensive.
     *
     * LoggerID   Description
     * --------   -----------
     * notes      Notifications of all levels.
     * book       Order book feed.
     * ws.........Websocket connection status changes.
     */
    log(loggerID, ...msg) {
        if (this.loggers[loggerID])
            console.log(`${nowString()}[${loggerID}]:`, ...msg);
        if (this.recorders[loggerID]) {
            this.recorders[loggerID].push({
                time: nowString(),
                msg: msg
            });
        }
    }
    prependPokeElement(cn) {
        const [el, note] = this.makePoke(cn);
        this.pokes.push(note);
        while (this.pokes.length > noteCacheSize)
            this.pokes.shift();
        this.prependListElement(this.page.pokeList, note, el);
    }
    prependNoteElement(cn) {
        const [el, note] = this.makeNote(cn);
        this.notes.push(note);
        while (this.notes.length > noteCacheSize)
            this.notes.shift();
        const noteList = this.page.noteList;
        this.prependListElement(noteList, note, el);
        this.bindUrlHandlers(el);
        // Set the indicator color.
        if (this.notes.length === 0 || (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(this.page.noteBox) && _doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(noteList)))
            return;
        let unacked = 0;
        const severity = this.notes.reduce((s, note) => {
            if (!note.acked)
                unacked++;
            if (!note.acked && note.severity > s)
                return note.severity;
            return s;
        }, _notifications__WEBPACK_IMPORTED_MODULE_18__.IGNORE);
        const ni = this.page.noteIndicator;
        setSeverityClass(ni, severity);
        if (unacked) {
            ni.textContent = String((unacked > noteCacheSize - 1) ? `${noteCacheSize - 1}+` : unacked);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(ni);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(ni);
    }
    prependListElement(noteList, note, el) {
        el.note = note;
        noteList.prepend(el);
        while (noteList.children.length > noteCacheSize)
            noteList.removeChild(noteList.lastChild);
        this.setNoteTimes(noteList);
    }
    /*
     * makeNote constructs a single notification element for the drop-down
     * notification list.
     */
    makeNote(note) {
        const el = this.page.noteTmpl.cloneNode(true);
        if (note.severity > _notifications__WEBPACK_IMPORTED_MODULE_18__.POKE) {
            const cls = note.severity === _notifications__WEBPACK_IMPORTED_MODULE_18__.SUCCESS ? 'good' : note.severity === _notifications__WEBPACK_IMPORTED_MODULE_18__.WARNING ? 'warn' : 'bad';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'div.note-indicator').classList.add(cls);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'div.note-subject').textContent = note.subject;
        _notifications__WEBPACK_IMPORTED_MODULE_18__.insertRichNote(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'div.note-details'), note.details);
        const np = Object.assign({ el }, note);
        return [el, np];
    }
    makePoke(note) {
        const el = this.page.pokeTmpl.cloneNode(true);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(el, 'subject').textContent = `${note.subject}:`;
        _notifications__WEBPACK_IMPORTED_MODULE_18__.insertRichNote(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(el, 'details'), note.details);
        const np = Object.assign({ el }, note);
        return [el, np];
    }
    /*
     * loading appends the loader to the specified element and displays the
     * loading icon. The loader will block all interaction with the specified
     * element until Application.loaded is called.
     */
    loading(el) {
        const loader = this.page.loader.cloneNode(true);
        el.appendChild(loader);
        return () => { loader.remove(); };
    }
    /* orders retrieves a list of orders for the specified dex and market
     * including inflight orders.
     */
    orders(host, mktID) {
        let orders = [];
        const mkt = this.user.exchanges[host].markets[mktID];
        if (mkt.orders)
            orders = orders.concat(mkt.orders);
        if (mkt.inflight)
            orders = orders.concat(mkt.inflight);
        return orders;
    }
    /*
     * haveActiveOrders returns whether or not there are active orders involving a
     * certain asset.
     */
    haveActiveOrders(assetID) {
        for (const xc of Object.values(this.user.exchanges)) {
            if (!xc.markets)
                continue;
            for (const market of Object.values(xc.markets)) {
                if (!market.orders)
                    continue;
                for (const ord of market.orders) {
                    if ((ord.baseID === assetID || ord.quoteID === assetID) &&
                        (ord.status < _orderutil__WEBPACK_IMPORTED_MODULE_16__.StatusExecuted || (0,_orderutil__WEBPACK_IMPORTED_MODULE_16__.hasActiveMatches)(ord)))
                        return true;
                }
            }
        }
        return false;
    }
    /* order attempts to locate an order by order ID. */
    order(oid) {
        for (const xc of Object.values(this.user.exchanges)) {
            if (!xc || !xc.markets)
                continue;
            for (const market of Object.values(xc.markets)) {
                if (!market.orders)
                    continue;
                for (const ord of market.orders) {
                    if (ord.id === oid)
                        return ord;
                }
            }
        }
        return null;
    }
    /*
     * canAccelerateOrder returns true if the "from" wallet of the order
     * supports acceleration, and if the order has unconfirmed swap
     * transactions.
     */
    canAccelerateOrder(order) {
        var _a;
        const walletTraitAccelerator = 1 << 4;
        let fromAssetID;
        if (order.sell)
            fromAssetID = order.baseID;
        else
            fromAssetID = order.quoteID;
        const wallet = this.walletMap[fromAssetID];
        if (!wallet || !(wallet.traits & walletTraitAccelerator))
            return false;
        if (order.matches) {
            for (let i = 0; i < ((_a = order.matches) === null || _a === void 0 ? void 0 : _a.length); i++) {
                const match = order.matches[i];
                if (match.swap && match.swap.confs && match.swap.confs.count === 0 && !match.revoked) {
                    return true;
                }
            }
        }
        return false;
    }
    /*
     * unitInfo fetches unit info [dex.UnitInfo] for the asset. If xc
     * [core.Exchange] is provided, and this is not a SupportedAsset, the UnitInfo
     * sent from the exchange's assets map [dex.Asset] will be used.
     */
    unitInfo(assetID, xc) {
        const supportedAsset = this.assets[assetID];
        if (supportedAsset)
            return supportedAsset.unitInfo;
        if (!xc || !xc.assets) {
            throw Error(_locales__WEBPACK_IMPORTED_MODULE_20__.prep(_locales__WEBPACK_IMPORTED_MODULE_20__.ID_UNSUPPORTED_ASSET_INFO_ERR_MSG, { assetID: `${assetID}` }));
        }
        return xc.assets[assetID].unitInfo;
    }
    parentAsset(assetID) {
        const asset = this.assets[assetID];
        if (!asset.token)
            return asset;
        return this.assets[asset.token.parentID];
    }
    /*
    * baseChainSymbol returns the symbol for the asset's parent if the asset is a
    * token, otherwise the symbol for the asset itself.
    */
    baseChainSymbol(assetID) {
        const asset = this.user.assets[assetID];
        return asset.token ? this.user.assets[asset.token.parentID].symbol : asset.symbol;
    }
    /*
     * extensionWallet returns the ExtensionConfiguredWallet for the asset, if
     * it exists.
     */
    extensionWallet(assetID) {
        var _a;
        return (_a = this.user.extensionModeConfig) === null || _a === void 0 ? void 0 : _a.restrictedWallets[this.baseChainSymbol(assetID)];
    }
    /* conventionalRate converts the encoded atomic rate to a conventional rate */
    conventionalRate(baseID, quoteID, encRate, xc) {
        const [b, q] = [this.unitInfo(baseID, xc), this.unitInfo(quoteID, xc)];
        const r = b.conventional.conversionFactor / q.conventional.conversionFactor;
        return encRate * r / _orderutil__WEBPACK_IMPORTED_MODULE_16__.RateEncodingFactor;
    }
    walletDefinition(assetID, walletType) {
        const asset = this.assets[assetID];
        if (asset.token)
            return asset.token.definition;
        if (!asset.info)
            throw Error('where\'s the wallet info?');
        if (walletType === '')
            return asset.info.availablewallets[asset.info.emptyidx];
        return asset.info.availablewallets.filter(def => def.type === walletType)[0];
    }
    currentWalletDefinition(assetID) {
        const asset = this.assets[assetID];
        if (asset.token) {
            return asset.token.definition;
        }
        return this.walletDefinition(assetID, this.assets[assetID].wallet.type);
    }
    /*
     * fetchBalance requests a balance update from the API. The API response does
     * include the balance, but we're ignoring it, since a balance update
     * notification is received via the Application anyways.
     */
    fetchBalance(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)('/api/balance', { assetID: assetID });
            if (!this.checkResponse(res)) {
                throw new Error(`failed to fetch balance for asset ID ${assetID}`);
            }
            return res.balance;
        });
    }
    /*
     * checkResponse checks the response object as returned from the functions in
     * the http module. If the response indicates that the request failed, it
     * returns false, otherwise, true.
     */
    checkResponse(resp) {
        return (resp.requestSuccessful && resp.ok);
    }
    /**
     * signOut call to /api/logout, if response with no errors occurred remove auth
     * and other privacy-critical cookies/locals and reload the page, otherwise
     * show a notification.
     */
    signOut() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)('/api/logout');
            if (!this.checkResponse(res)) {
                if (res.code === _http__WEBPACK_IMPORTED_MODULE_17__.Errors.activeOrdersErr) {
                    this.page.logoutErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_20__.prep(_locales__WEBPACK_IMPORTED_MODULE_20__.ID_ACTIVE_ORDERS_LOGOUT_ERR_MSG);
                }
                else {
                    this.page.logoutErr.textContent = res.msg;
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.logoutErr);
                return;
            }
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].removeCookie(_state__WEBPACK_IMPORTED_MODULE_1__["default"].authCK);
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].removeCookie(_state__WEBPACK_IMPORTED_MODULE_1__["default"].pwKeyCK);
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].removeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].notificationsLK); // Notification storage was DEPRECATED pre-v1.
            window.location.href = '/login';
        });
    }
    /*
     * txHistory loads the tx history for an asset. If the results are not
     * already cached, they are cached. If we have reached the oldest tx,
     * this fact is also cached. If the exact amount of transactions as have been
     * made are requested, we will not know if we have reached the last tx until
     * a subsequent call.
    */
    txHistory(assetID, n, after) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = '/api/txhistory';
            const cachedTxHistory = this.txHistoryMap[assetID];
            if (!cachedTxHistory) {
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)(url, {
                    n: n,
                    assetID: assetID
                });
                if (!this.checkResponse(res)) {
                    throw new Error(res.msg);
                }
                let txs = res.txs;
                if (!txs) {
                    txs = [];
                }
                this.txHistoryMap[assetID] = {
                    txs: txs,
                    lastTx: txs.length < n
                };
                return this.txHistoryMap[assetID];
            }
            const txs = [];
            let lastTx = false;
            const startIndex = after ? cachedTxHistory.txs.findIndex(tx => tx.id === after) + 1 : 0;
            if (after && startIndex === -1) {
                throw new Error('invalid after tx ' + after);
            }
            let lastIndex = startIndex;
            for (let i = startIndex; i < cachedTxHistory.txs.length && txs.length < n; i++) {
                txs.push(cachedTxHistory.txs[i]);
                lastIndex = i;
                after = cachedTxHistory.txs[i].id;
            }
            if (cachedTxHistory.lastTx && lastIndex === cachedTxHistory.txs.length - 1) {
                lastTx = true;
            }
            if (txs.length < n && !cachedTxHistory.lastTx) {
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)(url, {
                    n: n - txs.length + 1,
                    assetID: assetID,
                    refID: after,
                    past: true
                });
                if (!this.checkResponse(res)) {
                    throw new Error(res.msg);
                }
                let resTxs = res.txs;
                if (!resTxs) {
                    resTxs = [];
                }
                if (resTxs.length > 0 && after) {
                    if (resTxs[0].id === after) {
                        resTxs.shift();
                    }
                    else {
                        // Implies a bug in the client
                        console.error('First tx history element != refID');
                    }
                }
                cachedTxHistory.lastTx = resTxs.length < n - txs.length;
                lastTx = cachedTxHistory.lastTx;
                txs.push(...resTxs);
                cachedTxHistory.txs.push(...resTxs);
            }
            return { txs, lastTx };
        });
    }
    getWalletTx(assetID, txID) {
        const cachedTxHistory = this.txHistoryMap[assetID];
        if (!cachedTxHistory)
            return undefined;
        return cachedTxHistory.txs.find(tx => tx.id === txID);
    }
    clearTxHistory(assetID) {
        delete this.txHistoryMap[assetID];
    }
    needsCustomProvider(assetID) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const baseChainID = (_c = (_b = (_a = this.assets[assetID]) === null || _a === void 0 ? void 0 : _a.token) === null || _b === void 0 ? void 0 : _b.parentID) !== null && _c !== void 0 ? _c : assetID;
            if (!baseChainID)
                return false;
            const w = this.walletMap[baseChainID];
            if (!w)
                return false;
            const traitAccountLocker = 1 << 14;
            if ((w.traits & traitAccountLocker) === 0)
                return false;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_17__.postJSON)('/api/walletsettings', { assetID: baseChainID });
            if (!this.checkResponse(res)) {
                console.error(res.msg);
                return false;
            }
            const settings = res.map;
            return !settings.providers;
        });
    }
}
/* getSocketURI returns the websocket URI for the client. */
function getSocketURI() {
    const protocol = (window.location.protocol === 'https:') ? 'wss' : 'ws';
    return `${protocol}://${window.location.host}/ws`;
}
/*
 * severityClassMap maps a notification severity level to a CSS class that
 * assigns a background color.
 */
const severityClassMap = {
    [_notifications__WEBPACK_IMPORTED_MODULE_18__.SUCCESS]: 'good',
    [_notifications__WEBPACK_IMPORTED_MODULE_18__.ERROR]: 'bad',
    [_notifications__WEBPACK_IMPORTED_MODULE_18__.WARNING]: 'warn'
};
/* handlerFromPath parses the handler name from the path. */
function handlerFromPath(path) {
    return path.replace(/^\//, '').split('/')[0].split('?')[0].split('#')[0];
}
/* nowString creates a string formatted like HH:MM:SS.xxx */
function nowString() {
    const stamp = new Date();
    const h = stamp.getHours().toString().padStart(2, '0');
    const m = stamp.getMinutes().toString().padStart(2, '0');
    const s = stamp.getSeconds().toString().padStart(2, '0');
    const ms = stamp.getMilliseconds().toString().padStart(3, '0');
    return `${h}:${m}:${s}.${ms}`;
}
function setSeverityClass(el, severity) {
    el.classList.remove('bad', 'warn', 'good');
    el.classList.add(severityClassMap[severity]);
}
/* updateMatch updates the match in or adds the match to the order. */
function updateMatch(order, match) {
    for (const i in order.matches) {
        const m = order.matches[i];
        if (m.matchID === match.matchID) {
            order.matches[i] = match;
            return;
        }
    }
    order.matches = order.matches || [];
    order.matches.push(match);
}


/***/ }),

/***/ "./src/js/basepage.ts":
/*!****************************!*\
  !*** ./src/js/basepage.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BasePage)
/* harmony export */ });
class BasePage {
    /* unload is called when the user navigates away from the page. */
    unload() {
        // should be implemented by inheriting class.
    }
}


/***/ }),

/***/ "./src/js/charts.ts":
/*!**************************!*\
  !*** ./src/js/charts.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandleChart": () => (/* binding */ CandleChart),
/* harmony export */   "Chart": () => (/* binding */ Chart),
/* harmony export */   "DepthChart": () => (/* binding */ DepthChart),
/* harmony export */   "Extents": () => (/* binding */ Extents),
/* harmony export */   "Region": () => (/* binding */ Region),
/* harmony export */   "Wave": () => (/* binding */ Wave)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");




const bind = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind;
const PIPI = 2 * Math.PI;
const plusChar = String.fromCharCode(59914);
const minusChar = String.fromCharCode(59915);
const darkTheme = {
    body: '#0b2031',
    axisLabel: '#b1b1b1',
    gridBorder: '#383f4b',
    gridLines: '#383f4b',
    gapLine: '#6b6b6b',
    value: '#9a9a9a',
    zoom: '#5b5b5b',
    zoomHover: '#aaa',
    sellLine: '#ae3333',
    buyLine: '#05a35a',
    sellFill: '#591a1a',
    buyFill: '#02572f',
    crosshairs: '#888',
    legendFill: 'black',
    legendText: '#d5d5d5'
};
const lightTheme = {
    body: '#f4f4f4',
    axisLabel: '#1b1b1b',
    gridBorder: '#ddd',
    gridLines: '#ddd',
    gapLine: '#595959',
    value: '#4d4d4d',
    zoom: '#777',
    zoomHover: '#333',
    sellLine: '#99302b',
    buyLine: '#207a46',
    sellFill: '#bd5959',
    buyFill: '#4cad75',
    crosshairs: '#595959',
    legendFill: '#e6e6e6',
    legendText: '#1b1b1b'
};
// Chart is the base class for charts.
class Chart {
    constructor(parent, reporters) {
        this.parent = parent;
        this.report = reporters;
        this.theme = _state__WEBPACK_IMPORTED_MODULE_2__["default"].isDark() ? darkTheme : lightTheme;
        this.canvas = document.createElement('canvas');
        this.visible = true;
        parent.appendChild(this.canvas);
        const ctx = this.canvas.getContext('2d');
        if (!ctx) {
            console.error('error getting canvas context');
            return;
        }
        this.ctx = ctx;
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        // Mouse handling
        this.mousePos = null;
        bind(this.canvas, 'mousemove', (e) => {
            // this.rect will be set in resize().
            if (!this.rect)
                return;
            this.mousePos = {
                x: e.clientX - this.rect.left,
                y: e.clientY - this.rect.y
            };
            this.draw();
        });
        bind(this.canvas, 'mouseleave', () => {
            this.mousePos = null;
            this.draw();
        });
        // Bind resize.
        const resizeObserver = new ResizeObserver(() => this.resize());
        resizeObserver.observe(this.parent);
        // Scrolling by wheel is smoother when the rate is slightly limited.
        this.wheelLimiter = null;
        bind(this.canvas, 'wheel', (e) => { this.wheel(e); }, { passive: true });
        bind(this.canvas, 'click', (e) => { this.click(e); });
        const setVis = () => {
            this.visible = document.visibilityState !== 'hidden';
            if (this.visible && this.renderScheduled) {
                this.renderScheduled = false;
                this.draw();
            }
        };
        bind(document, 'visibilitychange', setVis);
        this.unattachers = [() => { _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'visibilitychange', setVis); }];
    }
    wheeled() {
        this.wheelLimiter = window.setTimeout(() => { this.wheelLimiter = null; }, 100);
    }
    /* clear the canvas. */
    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    /* draw calls the child class's render method. */
    draw() {
        this.render();
    }
    /* click is the handler for a click event on the canvas. */
    click(e) {
        this.report.click(e);
    }
    /* wheel is a mousewheel event handler. */
    wheel(e) {
        this.zoom(e.deltaY < 0);
    }
    /*
     * resize updates the chart size. The parentHeight is an argument to support
     * updating the height programmatically after the caller sets a style.height
     * but before the clientHeight has been updated.
     */
    resize() {
        this.canvas.width = this.parent.clientWidth;
        this.canvas.height = this.parent.clientHeight;
        const xLblHeight = 30;
        const yGuess = 40; // y label width guess. Will be adjusted when drawn.
        const plotExtents = new Extents(0, this.canvas.width, 0, this.canvas.height - xLblHeight);
        const xLblExtents = new Extents(0, this.canvas.width, this.canvas.height - xLblHeight, this.canvas.height);
        const yLblExtents = new Extents(0, yGuess, 0, this.canvas.height - xLblHeight);
        this.plotRegion = new Region(this.ctx, plotExtents);
        this.xRegion = new Region(this.ctx, xLblExtents);
        this.yRegion = new Region(this.ctx, yLblExtents);
        // After changing the visibility, this.canvas.getBoundingClientRect will
        // return nonsense until a render.
        window.requestAnimationFrame(() => {
            this.rect = this.canvas.getBoundingClientRect();
            this.report.resize();
        });
    }
    /* zoom is called when the user scrolls the mouse wheel on the canvas. */
    zoom(bigger) {
        if (this.wheelLimiter)
            return;
        this.report.zoom(bigger);
    }
    /* The market handler will call unattach when the markets page is unloaded. */
    unattach() {
        for (const u of this.unattachers)
            u();
        this.unattachers = [];
    }
    /* render must be implemented by the child class. */
    render() {
        console.error('child class must override render method');
    }
    /* applyLabelStyle applies the style used for axis tick labels. */
    applyLabelStyle(fontSize) {
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        this.ctx.font = `${fontSize !== null && fontSize !== void 0 ? fontSize : '14'}px 'sans', sans-serif`;
        this.ctx.fillStyle = this.theme.axisLabel;
    }
    /* plotXLabels applies the provided labels to the x axis and draws the grid. */
    plotXLabels(labels, minX, maxX, unitLines) {
        const extents = new Extents(minX, maxX, 0, 1);
        this.xRegion.plot(extents, (ctx, tools) => {
            this.applyLabelStyle();
            const centerX = (maxX + minX) / 2;
            let lastX = minX;
            let unitCenter = centerX;
            const [leftEdge, rightEdge] = [tools.x(minX), tools.x(maxX)];
            const centerY = tools.y(0.5);
            labels.lbls.forEach(lbl => {
                const m = ctx.measureText(lbl.txt);
                const x = tools.x(lbl.val);
                if (x - m.width / 2 < leftEdge || x + m.width / 2 > rightEdge)
                    return;
                ctx.fillText(lbl.txt, x, centerY);
                if (centerX >= lastX && centerX < lbl.val) {
                    unitCenter = (lastX + lbl.val) / 2;
                }
                lastX = lbl.val;
            });
            ctx.font = '11px \'sans\', sans-serif';
            if (unitLines.length === 2) {
                ctx.fillText(unitLines[0], tools.x(unitCenter), tools.y(0.63));
                ctx.fillText(unitLines[1], tools.x(unitCenter), tools.y(0.23));
            }
            else if (unitLines.length === 1) {
                ctx.fillText(unitLines[0], tools.x(unitCenter), centerY);
            }
        }, true);
    }
    plotXGrid(labels, minX, maxX) {
        const extents = new Extents(minX, maxX, 0, 1);
        this.plotRegion.plot(extents, (ctx, tools) => {
            ctx.lineWidth = 1;
            ctx.strokeStyle = this.theme.gridLines;
            labels.lbls.forEach(lbl => {
                line(ctx, tools.x(lbl.val), tools.y(0), tools.x(lbl.val), tools.y(1));
            });
        }, true);
    }
    /*
     * plotYLabels applies the y labels based on the provided plot region, and
     * draws the grid.
     */
    plotYLabels(labels, minY, maxY, unit) {
        const extents = new Extents(0, 1, minY, maxY);
        const fillRect = (ctx, x, y, w, h, r) => {
            ctx.save();
            ctx.fillStyle = this.theme.body;
            ctx.beginPath();
            if (ctx.roundRect)
                ctx.roundRect(x, y, w, h, r); // Safari < 16 doesn't support
            else
                ctx.rect(x, y, w, h);
            ctx.fill();
            ctx.restore();
        };
        this.yRegion.plot(extents, (ctx, tools) => {
            this.applyLabelStyle();
            this.ctx.textAlign = 'left';
            const centerY = maxY / 2;
            let lastY = 0;
            let unitCenter = centerY;
            const x = tools.x(0);
            const [xPad, yPad] = [3, 3];
            labels.lbls.forEach(lbl => {
                const y = tools.y(lbl.val);
                if (y < tools.y(maxY) + yPad + 7 || y > tools.y(minY) - yPad - 7)
                    return;
                const m = ctx.measureText(lbl.txt);
                fillRect(ctx, x, y - 7 - yPad, m.width + xPad * 2, 14 + yPad * 3, 3);
                ctx.fillText(lbl.txt, x + xPad, y + 2);
                if (centerY >= lastY && centerY < lbl.val) {
                    unitCenter = (lastY + lbl.val) / 2;
                }
                lastY = lbl.val;
            });
            const m = ctx.measureText(unit);
            const y = tools.y(unitCenter);
            fillRect(ctx, x, y - yPad - 7, m.width + xPad * 2, 14 + yPad * 2, 3);
            ctx.fillText(unit, x + xPad, tools.y(unitCenter));
        }, true);
    }
    plotYGrid(region, labels, minY, maxY) {
        const extents = new Extents(0, 1, minY, maxY);
        region.plot(extents, (ctx, tools) => {
            ctx.lineWidth = 1;
            ctx.strokeStyle = this.theme.gridLines;
            labels.lbls.forEach(lbl => {
                line(ctx, tools.x(0), tools.y(lbl.val), tools.x(1), tools.y(lbl.val));
            });
        }, true);
    }
    /*
     * doYLabels generates and applies the y-axis labels, based upon the
     * provided plot region.
     */
    makeYLabels(region, step, unit, valFmt) {
        this.applyLabelStyle();
        const yLabels = makeLabels(this.ctx, region.height(), this.dataExtents.y.min, this.dataExtents.y.max, 50, step, unit, valFmt);
        // Reassign the width of the y-label column to accommodate the widest text.
        const yAxisWidth = (yLabels.widest || 0) + 20; /* x padding */
        this.yRegion.extents.x.max = yAxisWidth;
        this.yRegion.extents.y.max = region.extents.y.max;
        return yLabels;
    }
    line(x0, y0, x1, y1, skipStroke) {
        line(this.ctx, x0, y0, x1, y1, skipStroke);
    }
    /* dot draws a circle with the provided context. */
    dot(x, y, color, radius) {
        dot(this.ctx, x, y, color, radius);
    }
}
/* DepthChart is a javascript Canvas-based depth chart renderer. */
class DepthChart extends Chart {
    constructor(parent, reporters, zoom) {
        super(parent, {
            resize: () => this.resized(),
            click: (e) => this.clicked(e),
            zoom: (bigger) => this.zoomed(bigger)
        });
        this.reporters = reporters;
        this.zoomLevel = zoom;
        this.lines = [];
        this.markers = {
            buys: [],
            sells: []
        };
        this.setZoomBttns(); // can't wait for requestAnimationFrame -> resized
        this.resize();
    }
    // setZoomBttns creates new regions for zoom in and zoom out buttons. It is
    // used in initiation of the buttons and resizing.
    setZoomBttns() {
        this.zoomInBttn = new Region(this.ctx, new Extents(0, 0, 0, 0));
        this.zoomOutBttn = new Region(this.ctx, new Extents(0, 0, 0, 0));
    }
    /* resized is called when the window or parent element are resized. */
    resized() {
        // The button region extents are set during drawing.
        this.setZoomBttns();
        if (this.book)
            this.draw();
    }
    /* zoomed zooms the current view in or out. bigger=true is zoom in. */
    zoomed(bigger) {
        if (!this.zoomLevel)
            return;
        if (!this.book.buys || !this.book.sells)
            return;
        this.wheeled();
        // Zoom in to 66%, but out to 150% = 1 / (2/3) so that the same zoom levels
        // are hit when reversing direction.
        this.zoomLevel *= bigger ? 2 / 3 : 3 / 2;
        this.zoomLevel = (0,_doc__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.zoomLevel, 0.005, 2);
        this.draw();
        this.reporters.zoom(this.zoomLevel);
    }
    /* clicked is the canvas 'click' event handler. */
    clicked(e) {
        if (!this.dataExtents)
            return;
        const x = e.clientX - this.rect.left;
        const y = e.clientY - this.rect.y;
        if (this.zoomInBttn.contains(x, y)) {
            this.zoom(true);
            return;
        }
        if (this.zoomOutBttn.contains(x, y)) {
            this.zoom(false);
            return;
        }
        const translator = this.plotRegion.translator(this.dataExtents);
        this.reporters.click(translator.unx(x));
    }
    // set sets the current data set and draws.
    set(book, lotSize, rateStepEnc, baseUnitInfo, quoteUnitInfo) {
        this.book = book;
        this.lotSize = lotSize / baseUnitInfo.conventional.conversionFactor;
        this.conventionalRateStep = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].conventionalRateStep(rateStepEnc, baseUnitInfo, quoteUnitInfo);
        this.baseUnit = baseUnitInfo.conventional.unit;
        this.quoteUnit = quoteUnitInfo.conventional.unit;
        if (!this.zoomLevel) {
            const [midGap, gapWidth] = this.gap();
            // Default to 5% zoom, but with a minimum of 5 * midGap, but still observing
            // the hard cap of 200%.
            const minZoom = Math.max(gapWidth / midGap * 5, 0.05);
            this.zoomLevel = Math.min(minZoom, 2);
        }
        this.draw();
    }
    /*
     * render draws the chart.
     * 1. Calculate the data extents and translate the order book data to a
     *    cumulative form.
     * 2. Draw axis ticks and grid, mid-gap line and value, zoom buttons, mouse
     *    position indicator...
     * 4. Tick labels.
     * 5. Data.
     * 6. Epoch line legend.
     * 7. Hover legend.
     */
    render() {
        // if connection fails it is not possible to get book.
        if (!this.book || !this.visible || this.canvas.width === 0) {
            this.renderScheduled = true;
            return;
        }
        this.clear();
        // if (!this.book || this.book.empty()) return
        const ctx = this.ctx;
        const mousePos = this.mousePos;
        const buys = this.book.buys;
        const sells = this.book.sells;
        const [midGap, gapWidth] = this.gap();
        const halfWindow = this.zoomLevel * midGap / 2;
        const high = midGap + halfWindow;
        const low = midGap - halfWindow;
        // Get a sorted copy of the markers list.
        const buyMarkers = [...this.markers.buys];
        const sellMarkers = [...this.markers.sells];
        buyMarkers.sort((a, b) => b.rate - a.rate);
        sellMarkers.sort((a, b) => a.rate - b.rate);
        const markers = [];
        const buyDepth = [];
        const buyEpoch = [];
        const sellDepth = [];
        const sellEpoch = [];
        const volumeReport = {
            buyBase: 0,
            buyQuote: 0,
            sellBase: 0,
            sellQuote: 0
        };
        let sum = 0;
        // The epoch line is above the non-epoch region, so the epochSum y value
        // must account for non-epoch orders too.
        let epochSum = 0;
        for (let i = 0; i < buys.length; i++) {
            const ord = buys[i];
            epochSum += ord.qty;
            if (ord.rate >= low)
                buyEpoch.push([ord.rate, epochSum]);
            if (ord.epoch)
                continue;
            sum += ord.qty;
            buyDepth.push([ord.rate, sum]);
            volumeReport.buyBase += ord.qty;
            volumeReport.buyQuote += ord.qty * ord.rate;
            while (buyMarkers.length && floatCompare(buyMarkers[0].rate, ord.rate)) {
                const mark = buyMarkers.shift();
                if (!mark)
                    continue;
                markers.push({
                    rate: mark.rate,
                    qty: ord.epoch ? epochSum : sum,
                    sell: ord.sell,
                    active: mark.active
                });
            }
        }
        const buySum = buyDepth.length ? last(buyDepth)[1] : 0;
        buyDepth.push([low, buySum]);
        const epochBuySum = buyEpoch.length ? last(buyEpoch)[1] : 0;
        buyEpoch.push([low, epochBuySum]);
        epochSum = sum = 0;
        for (let i = 0; i < sells.length; i++) {
            const ord = sells[i];
            epochSum += ord.qty;
            if (ord.rate <= high)
                sellEpoch.push([ord.rate, epochSum]);
            if (ord.epoch)
                continue;
            sum += ord.qty;
            sellDepth.push([ord.rate, sum]);
            volumeReport.sellBase += ord.qty;
            volumeReport.sellQuote += ord.qty * ord.rate;
            while (sellMarkers.length && floatCompare(sellMarkers[0].rate, ord.rate)) {
                const mark = sellMarkers.shift();
                if (!mark)
                    continue;
                markers.push({
                    rate: mark.rate,
                    qty: ord.epoch ? epochSum : sum,
                    sell: ord.sell,
                    active: mark.active
                });
            }
        }
        // Add a data point going to the left so that the data doesn't end with a
        // vertical line.
        const sellSum = sellDepth.length ? last(sellDepth)[1] : 0;
        sellDepth.push([high, sellSum]);
        const epochSellSum = sellEpoch.length ? last(sellEpoch)[1] : 0;
        sellEpoch.push([high, epochSellSum]);
        // Add ~30px padding to the top of the chart.
        const h = this.xRegion.extents.y.min;
        const growthFactor = (h + 40) / h;
        const maxY = (epochSellSum && epochBuySum ? Math.max(epochBuySum, epochSellSum) : epochSellSum || epochBuySum || 1) * growthFactor;
        const dataExtents = new Extents(low, high, 0, maxY);
        this.dataExtents = dataExtents;
        // A function to be run at the end if there is legend data to display.
        let mouseData = null;
        // Draw the grid.
        const xLabels = makeLabels(ctx, this.plotRegion.width(), dataExtents.x.min, dataExtents.x.max, 100, this.conventionalRateStep, '');
        this.plotXGrid(xLabels, low, high);
        const yLabels = this.makeYLabels(this.plotRegion, this.lotSize, this.baseUnit);
        this.plotYGrid(this.plotRegion, yLabels, this.dataExtents.y.min, this.dataExtents.y.max);
        this.plotRegion.plot(dataExtents, (ctx, tools) => {
            ctx.lineWidth = 1;
            // first, a square around the plot area.
            ctx.strokeStyle = this.theme.gridBorder;
            // draw a line to indicate mid-gap
            ctx.lineWidth = 2.5;
            ctx.strokeStyle = this.theme.gapLine;
            line(ctx, tools.x(midGap), tools.y(0), tools.x(midGap), tools.y(0.3 * dataExtents.y.max));
            ctx.font = '30px \'demi-sans\', sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = this.theme.value;
            const y = 0.5 * dataExtents.y.max;
            ctx.fillText(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(midGap), tools.x(midGap), tools.y(y));
            ctx.font = '12px \'sans\', sans-serif';
            // ctx.fillText('mid-market price', tools.x(midGap), tools.y(y) + 24)
            ctx.fillText(`${(gapWidth / midGap * 100).toFixed(2)}% spread`, tools.x(midGap), tools.y(y) + 24);
            // Draw zoom buttons.
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            const topCenterX = this.plotRegion.extents.midX;
            const topCenterY = tools.y(maxY * 0.9);
            const zoomPct = dataExtents.xRange / midGap * 100;
            const zoomText = `${zoomPct.toFixed(1)}%`;
            const w = ctx.measureText(zoomText).width;
            ctx.font = '13px \'sans\', sans-serif';
            ctx.fillText(zoomText, topCenterX, topCenterY + 1);
            // define the region for the zoom button
            const bttnSize = 20;
            const xPad = 10;
            let bttnLeft = topCenterX - w / 2 - xPad - bttnSize;
            const bttnTop = topCenterY - bttnSize / 2;
            this.zoomOutBttn.setExtents(bttnLeft, bttnLeft + bttnSize, bttnTop, bttnTop + bttnSize);
            let hover = mousePos && this.zoomOutBttn.contains(mousePos.x, mousePos.y);
            this.zoomOutBttn.plot(new Extents(0, 1, 0, 1), ctx => {
                ctx.font = '12px \'icomoon\'';
                ctx.fillStyle = this.theme.zoom;
                if (hover) {
                    ctx.fillStyle = this.theme.zoomHover;
                    ctx.font = '13px \'icomoon\'';
                }
                ctx.fillText(minusChar, this.zoomOutBttn.extents.midX, this.zoomOutBttn.extents.midY);
            });
            bttnLeft = topCenterX + w / 2 + xPad;
            this.zoomInBttn.setExtents(bttnLeft, bttnLeft + bttnSize, bttnTop, bttnTop + bttnSize);
            hover = mousePos && this.zoomInBttn.contains(mousePos.x, mousePos.y);
            this.zoomInBttn.plot(new Extents(0, 1, 0, 1), ctx => {
                ctx.font = '12px \'icomoon\'';
                ctx.fillStyle = this.theme.zoom;
                if (hover) {
                    ctx.fillStyle = this.theme.zoomHover;
                    ctx.font = '14px \'icomoon\'';
                }
                ctx.fillText(plusChar, this.zoomInBttn.extents.midX, this.zoomInBttn.extents.midY);
            });
            // Draw a dotted vertical line where the mouse is, and a dot at the level
            // of the depth line.
            const drawLine = (x, color) => {
                if (x > high || x < low)
                    return;
                ctx.save();
                ctx.setLineDash([3, 5]);
                ctx.lineWidth = 1.5;
                ctx.strokeStyle = color;
                line(ctx, tools.x(x), tools.y(0), tools.x(x), tools.y(maxY));
                ctx.restore();
            };
            // for (const line of this.lines || []) {
            //   drawLine(line.rate, line.color)
            // }
            const tolerance = (high - low) * 0.005;
            const hoverMarkers = [];
            for (const marker of markers || []) {
                const hovered = (mousePos && withinTolerance(marker.rate, tools.unx(mousePos.x), tolerance));
                if (hovered)
                    hoverMarkers.push(marker.rate);
                ctx.save();
                ctx.lineWidth = (hovered || marker.active) ? 5 : 3;
                ctx.strokeStyle = marker.sell ? this.theme.sellLine : this.theme.buyLine;
                ctx.fillStyle = marker.sell ? this.theme.sellFill : this.theme.buyFill;
                const size = (hovered || marker.active) ? 10 : 8;
                ctx.beginPath();
                const tip = {
                    x: tools.x(marker.rate),
                    y: tools.y(marker.qty) - 8
                };
                const top = tip.y - (Math.sqrt(3) * size / 2); // cos(30)
                ctx.moveTo(tip.x, tip.y);
                ctx.lineTo(tip.x - size / 2, top);
                ctx.lineTo(tip.x + size / 2, top);
                ctx.closePath();
                ctx.stroke();
                ctx.fill();
                ctx.restore();
            }
            // If the mouse is in the chart area, draw the crosshairs.
            if (!mousePos)
                return;
            if (!this.plotRegion.contains(mousePos.x, mousePos.y))
                return;
            // The mouse is in the plot region. Get the data coordinates and find the
            // side and depth for the x value.
            const dataX = tools.unx(mousePos.x);
            let evalSide = sellDepth;
            let trigger = (ptX) => ptX >= dataX;
            let dotColor = this.theme.sellLine;
            if (dataX < midGap) {
                evalSide = buyDepth;
                trigger = (ptX) => ptX <= dataX;
                dotColor = this.theme.buyLine;
            }
            let bestDepth = evalSide[0];
            for (let i = 0; i < evalSide.length; i++) {
                const pt = evalSide[i];
                if (trigger(pt[0]))
                    break;
                bestDepth = pt;
            }
            drawLine(dataX, this.theme.crosshairs);
            mouseData = {
                rate: dataX,
                depth: bestDepth[1],
                dotColor: dotColor,
                hoverMarkers: hoverMarkers
            };
        });
        // Draw the epoch lines
        ctx.lineWidth = 1.5;
        ctx.setLineDash([3, 3]);
        // epoch sells
        ctx.fillStyle = this.theme.sellFill;
        ctx.strokeStyle = this.theme.sellLine;
        this.drawDepth(sellEpoch);
        // epoch buys
        ctx.fillStyle = this.theme.buyFill;
        ctx.strokeStyle = this.theme.buyLine;
        this.drawDepth(buyEpoch);
        // Draw the book depth.
        ctx.lineWidth = 2.5;
        ctx.setLineDash([]);
        // book sells
        ctx.fillStyle = this.theme.sellFill;
        ctx.strokeStyle = this.theme.sellLine;
        this.drawDepth(sellDepth);
        // book buys
        ctx.fillStyle = this.theme.buyFill;
        ctx.strokeStyle = this.theme.buyLine;
        this.drawDepth(buyDepth);
        this.plotYLabels(yLabels, this.dataExtents.y.min, this.dataExtents.y.max, this.baseUnit);
        this.plotXLabels(xLabels, low, high, [`${this.quoteUnit}/`, this.baseUnit]);
        // Display the dot at the intersection of the mouse hover line and the depth
        // line. This should be drawn after the depths.
        if (mouseData) {
            this.plotRegion.plot(dataExtents, (ctx, tools) => {
                if (!mouseData)
                    return; // For TypeScript. Duh.
                dot(ctx, tools.x(mouseData.rate), tools.y(mouseData.depth), mouseData.dotColor, 5);
            });
        }
        // Report the book volumes.
        this.reporters.volume(volumeReport);
        this.reporters.mouse(mouseData);
    }
    /* drawDepth draws a single side's depth chart data. */
    drawDepth(depth) {
        const firstPt = depth[0];
        let x;
        this.plotRegion.plot(this.dataExtents, (ctx, tools) => {
            const yZero = tools.y(0);
            let y = tools.y(firstPt[1]);
            ctx.beginPath();
            ctx.moveTo(tools.x(firstPt[0]), tools.y(firstPt[1]));
            for (let i = 0; i < depth.length; i++) {
                // Set x, but don't set y until we draw the horizontal line.
                x = tools.x(depth[i][0]);
                ctx.lineTo(x, y);
                // If this is past the render edge, quit drawing.
                y = tools.y(depth[i][1]);
                ctx.lineTo(x, y);
            }
            ctx.stroke();
            ctx.lineTo(x, yZero);
            ctx.lineTo(tools.x(firstPt[0]), yZero);
            ctx.closePath();
            ctx.globalAlpha = 0.25;
            ctx.fill();
        });
    }
    /* returns the mid-gap rate and gap width as a tuple. */
    gap() {
        const [b, s] = [this.book.bestGapBuy(), this.book.bestGapSell()];
        if (!b) {
            if (!s)
                return [1, 0];
            return [s.rate, 0];
        }
        else if (!s)
            return [b.rate, 0];
        return [(s.rate + b.rate) / 2, s.rate - b.rate];
    }
    /* setLines stores the indicator lines to draw. */
    setLines(lines) {
        this.lines = lines;
    }
    /* setMarkers sets the indicator markers to draw. */
    setMarkers(markers) {
        this.markers = markers;
    }
}
/* CandleChart is a candlestick data renderer. */
class CandleChart extends Chart {
    constructor(parent, reporters) {
        super(parent, {
            resize: () => this.resized(),
            click: ( /* e: MouseEvent */) => { this.clicked(); },
            zoom: (bigger) => this.zoomed(bigger)
        });
        this.reporters = reporters;
        this.zoomLevel = 1;
        this.numToShow = 100;
        this.resize();
    }
    /* resized is called when the window or parent element are resized. */
    resized() {
        const ext = this.plotRegion.extents;
        const candleExtents = new Extents(ext.x.min, ext.x.max, ext.y.min, ext.y.min + ext.yRange * 0.85);
        this.candleRegion = new Region(this.ctx, candleExtents);
        const volumeExtents = new Extents(ext.x.min, ext.x.max, ext.y.min + 0.85 * ext.yRange, ext.y.max);
        this.volumeRegion = new Region(this.ctx, volumeExtents);
        // Set a delay on the render to prevent lag.
        if (this.resizeTimer)
            clearTimeout(this.resizeTimer);
        this.resizeTimer = window.setTimeout(() => this.draw(), 100);
    }
    clicked( /* e: MouseEvent */) {
        // handle clicks
    }
    /* zoomed zooms the current view in or out. bigger=true is zoom in. */
    zoomed(bigger) {
        // bigger actually means fewer candles -> reduce zoomLevels index.
        const idx = this.zoomLevels.indexOf(this.numToShow);
        if (bigger) {
            if (idx === 0)
                return;
            this.numToShow = this.zoomLevels[idx - 1];
        }
        else {
            if (this.zoomLevels.length <= idx + 1 || this.numToShow > this.data.candles.length)
                return;
            this.numToShow = this.zoomLevels[idx + 1];
        }
        this.draw();
    }
    /* render draws the chart */
    render() {
        var _a;
        const data = this.data;
        if (!data || !this.visible || this.canvas.width === 0) {
            this.renderScheduled = true;
            return;
        }
        const candleWidth = data.ms;
        const mousePos = this.mousePos;
        const allCandles = data.candles || [];
        const n = Math.min(this.numToShow, allCandles.length);
        const candles = allCandles.slice(allCandles.length - n);
        this.clear();
        // If there are no candles. just don't draw anything.
        if (n === 0)
            return;
        // padding definition and some helper functions to parse candles.
        const candleWidthPadding = 0.2;
        const start = (c) => truncate(c.endStamp, candleWidth);
        const end = (c) => start(c) + candleWidth;
        const paddedStart = (c) => start(c) + candleWidthPadding * candleWidth;
        const paddedWidth = (1 - 2 * candleWidthPadding) * candleWidth;
        const first = candles[0];
        const last = candles[n - 1];
        let [high, low, highVol] = [first.highRate, first.lowRate, first.matchVolume];
        for (const c of candles) {
            if (c.highRate > high)
                high = c.highRate;
            if (c.lowRate < low)
                low = c.lowRate;
            if (c.matchVolume > highVol)
                highVol = c.matchVolume;
        }
        high += (high - low) * 0.1; // a little padding
        const xStart = start(first);
        let xEnd = end(last);
        xEnd += (xEnd - xStart) * 0.05; // a little padding
        // Calculate data extents and store them. They are used to apply labels.
        const rateStep = this.market.ratestep;
        const dataExtents = new Extents(xStart, xEnd, low, high);
        if (low === high) {
            // If there is no price movement at all in the window, show a little more
            // top and bottom so things render nicely.
            dataExtents.y.min -= rateStep;
            dataExtents.y.max += rateStep;
        }
        this.dataExtents = dataExtents;
        let mouseCandle = null;
        if (mousePos) {
            this.plotRegion.plot(new Extents(dataExtents.x.min, dataExtents.x.max, 0, 1), (ctx, tools) => {
                const selectedStartStamp = truncate(tools.unx(mousePos.x), candleWidth);
                for (const c of candles) {
                    if (start(c) === selectedStartStamp) {
                        mouseCandle = c;
                        ctx.fillStyle = this.theme.gridLines;
                        ctx.fillRect(tools.x(start(c)), tools.y(0), tools.w(candleWidth), tools.h(1));
                        break;
                    }
                }
            });
        }
        // Draw the grid
        const rFactor = this.rateConversionFactor;
        const baseUnit = ((_a = (0,_registry__WEBPACK_IMPORTED_MODULE_3__.app)().assets[this.market.baseid]) === null || _a === void 0 ? void 0 : _a.unitInfo.conventional.unit) || this.market.basesymbol.toUpperCase();
        const xLabels = makeCandleTimeLabels(candles, candleWidth, this.plotRegion.width(), 100);
        this.plotXGrid(xLabels, xStart, xEnd);
        const yLabels = this.makeYLabels(this.candleRegion, rateStep, baseUnit, v => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(v / rFactor));
        this.plotYGrid(this.candleRegion, yLabels, this.dataExtents.y.min, this.dataExtents.y.max);
        // Draw the volume bars.
        const volDataExtents = new Extents(xStart, xEnd, 0, highVol);
        this.volumeRegion.plot(volDataExtents, (ctx, tools) => {
            ctx.fillStyle = this.theme.gridBorder;
            for (const c of candles) {
                ctx.fillRect(tools.x(paddedStart(c)), tools.y(0), tools.w(paddedWidth), tools.h(c.matchVolume));
            }
        });
        // Draw the candles.
        this.candleRegion.plot(dataExtents, (ctx, tools) => {
            ctx.lineWidth = 1;
            for (const c of candles) {
                const desc = c.startRate > c.endRate;
                const [x, y, w, h] = [tools.x(paddedStart(c)), tools.y(c.startRate), tools.w(paddedWidth), tools.h(c.endRate - c.startRate)];
                const [high, low, cx] = [tools.y(c.highRate), tools.y(c.lowRate), w / 2 + x];
                ctx.strokeStyle = desc ? this.theme.sellLine : this.theme.buyLine;
                ctx.fillStyle = desc ? this.theme.sellFill : this.theme.buyFill;
                ctx.beginPath();
                ctx.moveTo(cx, high);
                ctx.lineTo(cx, low);
                ctx.stroke();
                ctx.fillRect(x, y, w, h);
                ctx.strokeRect(x, y, w, h);
            }
        });
        // Apply labels.
        this.plotXLabels(xLabels, xStart, xEnd, []);
        this.plotYLabels(yLabels, this.dataExtents.y.min, this.dataExtents.y.max, baseUnit);
        // Highlight the candle if the user mouse is over the canvas.
        if (mouseCandle) {
            const yExt = this.xRegion.extents.y;
            this.xRegion.plot(new Extents(dataExtents.x.min, dataExtents.x.max, yExt.min, yExt.max), (ctx, tools) => {
                if (!mouseCandle)
                    return; // For TypeScript. Duh.
                this.applyLabelStyle();
                const rangeTxt = `${new Date(start(mouseCandle)).toLocaleString()} - ${new Date(end(mouseCandle)).toLocaleString()}`;
                const [xPad, yPad] = [25, 2];
                const rangeWidth = ctx.measureText(rangeTxt).width + 2 * xPad;
                const rangeHeight = 16;
                let centerX = tools.x((start(mouseCandle) + end(mouseCandle)) / 2);
                let left = centerX - rangeWidth / 2;
                const xExt = this.xRegion.extents.x;
                if (left < xExt.min)
                    left = xExt.min;
                else if (left + rangeWidth > xExt.max)
                    left = xExt.max - rangeWidth;
                centerX = left + rangeWidth / 2;
                const top = yExt.min + (this.xRegion.height() - rangeHeight) / 2;
                ctx.fillStyle = this.theme.legendFill;
                ctx.strokeStyle = this.theme.gridBorder;
                const rectArgs = [left - xPad, top - yPad, rangeWidth + 2 * xPad, rangeHeight + 2 * yPad];
                ctx.fillRect(...rectArgs);
                ctx.strokeRect(...rectArgs);
                this.applyLabelStyle();
                ctx.fillText(rangeTxt, centerX, this.xRegion.extents.midY, rangeWidth);
            });
        }
        // Report the mouse candle.
        this.reporters.mouse(mouseCandle);
    }
    /* setCandles sets the candle data and redraws the chart. */
    setCandles(data, market, baseUnitInfo, quoteUnitInfo) {
        this.data = data;
        if (!data.candles)
            return;
        this.market = market;
        const [qFactor, bFactor] = [quoteUnitInfo.conventional.conversionFactor, baseUnitInfo.conventional.conversionFactor];
        this.rateConversionFactor = _orderutil__WEBPACK_IMPORTED_MODULE_1__.RateEncodingFactor * qFactor / bFactor;
        let n = 25;
        this.zoomLevels = [];
        const maxCandles = Math.max(data.candles.length, 1000);
        while (n < maxCandles) {
            this.zoomLevels.push(n);
            n *= 2;
        }
        this.numToShow = 100;
        this.draw();
    }
}
/* Wave is a loading animation that displays a colorful line that oscillates */
class Wave extends Chart {
    constructor(parent, opts) {
        super(parent, {
            resize: () => this.resized(),
            click: ( /* e: MouseEvent */) => { },
            zoom: ( /* bigger: boolean */) => { }
        });
        this.canvas.classList.add('fill-abs');
        this.canvas.style.zIndex = '5';
        this.opts = opts !== null && opts !== void 0 ? opts : {};
        const period = 1500; // ms
        const start = Math.random() * period;
        this.colorShift = Math.random() * 360;
        // y = A*cos(k*x + theta*t + c)
        // combine three waves with different periods and speeds and phases.
        const amplitudes = [1, 0.65, 0.75];
        const ks = [3, 3, 2];
        const speeds = [Math.PI, Math.PI * 10 / 9, Math.PI / 2.5];
        const phases = [0, 0, Math.PI * 1.5];
        const n = 75;
        const single = (n, angularX, angularTime) => {
            return amplitudes[n] * Math.cos(ks[n] * angularX + speeds[n] * angularTime + phases[n]);
        };
        const value = (x, angularTime) => {
            const angularX = x * Math.PI * 2;
            return (single(0, angularX, angularTime) + single(1, angularX, angularTime) + single(2, angularX, angularTime)) / 3;
        };
        this.resize();
        this.ani = new _doc__WEBPACK_IMPORTED_MODULE_0__.Animation(_doc__WEBPACK_IMPORTED_MODULE_0__.Animation.Forever, () => {
            const angularTime = (new Date().getTime() - start) / period * Math.PI * 2;
            const values = [];
            for (let i = 0; i < n; i++) {
                values.push(value(i / (n - 1), angularTime));
            }
            this.drawValues(values);
        });
    }
    resized() {
        const opts = this.opts;
        const [maxW, maxH] = [150, 100];
        const [cw, ch] = [this.canvas.width, this.canvas.height];
        let [w, h] = [cw * 0.8, ch * 0.8];
        if (w > maxW)
            w = maxW;
        if (h > maxH)
            h = maxH;
        let [l, t] = [(cw - w) / 2, (ch - h) / 2];
        if (opts.message) {
            this.fontSize = (0,_doc__WEBPACK_IMPORTED_MODULE_0__.clamp)(h * 0.15, 10, 14);
            this.applyLabelStyle(this.fontSize);
            const ypad = this.fontSize * 0.5;
            const halfH = (this.fontSize / 2) + ypad;
            t -= halfH;
            this.msgRegion = new Region(this.ctx, new Extents(0, cw, t + h, t + h + 2 * halfH));
        }
        this.region = new Region(this.ctx, new Extents(l, l + w, t, t + h));
    }
    drawValues(values) {
        if (!this.region)
            return;
        this.clear();
        const hsl = (h) => `hsl(${h}, 35%, 50%)`;
        const { region, msgRegion, canvas: { width: w, height: h }, opts: { backgroundColor: bg, message: msg }, colorShift, ctx } = this;
        if (bg) {
            if (bg === true)
                ctx.fillStyle = _state__WEBPACK_IMPORTED_MODULE_2__["default"].isDark() ? '#0a1e34' : '#f0f0f0';
            else
                ctx.fillStyle = bg;
            ctx.fillRect(0, 0, w, h);
        }
        region.plot(new Extents(0, 1, -1, 1), (ctx, t) => {
            ctx.lineWidth = 4;
            ctx.lineCap = 'round';
            const shift = colorShift + (new Date().getTime() % 2000) / 2000 * 360; // colors move with frequency 1 / 2s
            const grad = ctx.createLinearGradient(t.x(0), 0, t.x(1), 0);
            grad.addColorStop(0, hsl(shift));
            ctx.strokeStyle = grad;
            ctx.beginPath();
            ctx.moveTo(t.x(0), t.y(values[0]));
            for (let i = 1; i < values.length; i++) {
                const prog = i / (values.length - 1);
                grad.addColorStop(prog, hsl(prog * 300 + shift));
                ctx.lineTo(t.x(prog), t.y(values[i]));
            }
            ctx.stroke();
        });
        if (!msg)
            return;
        msgRegion.plot(new Extents(0, 1, 0, 1), (ctx, t) => {
            this.applyLabelStyle(this.fontSize);
            ctx.fillText(msg, t.x(0.5), t.y(0.5), this.msgRegion.width());
        });
    }
    render() { }
    stop() {
        this.ani.stop();
        this.canvas.remove();
    }
}
/*
 * Extents holds a min and max in both the x and y directions, and provides
 * getters for related data.
 */
class Extents {
    constructor(xMin, xMax, yMin, yMax) {
        this.setExtents(xMin, xMax, yMin, yMax);
    }
    setExtents(xMin, xMax, yMin, yMax) {
        this.x = {
            min: xMin,
            max: xMax
        };
        this.y = {
            min: yMin,
            max: yMax
        };
    }
    get xRange() {
        return this.x.max - this.x.min;
    }
    get midX() {
        return (this.x.max + this.x.min) / 2;
    }
    get yRange() {
        return this.y.max - this.y.min;
    }
    get midY() {
        return (this.y.max + this.y.min) / 2;
    }
}
/*
 * Region applies an Extents to the canvas, providing utilities for coordinate
 * transformations and restricting drawing to a specified region of the canvas.
 */
class Region {
    constructor(context, extents) {
        this.context = context;
        this.extents = extents;
    }
    setExtents(xMin, xMax, yMin, yMax) {
        this.extents.setExtents(xMin, xMax, yMin, yMax);
    }
    width() {
        return this.extents.xRange;
    }
    height() {
        return this.extents.yRange;
    }
    contains(x, y) {
        const ext = this.extents;
        return (x < ext.x.max && x > ext.x.min &&
            y < ext.y.max && y > ext.y.min);
    }
    /*
     * A translator provides 4 function for coordinate transformations. x and y
     * translate data coordinates to canvas coordinates for the specified data
     * Extents. unx and uny translate canvas coordinates to data coordinates.
     */
    translator(dataExtents) {
        const region = this.extents;
        const xMin = dataExtents.x.min;
        // const xMax = dataExtents.x.max
        const yMin = dataExtents.y.min;
        // const yMax = dataExtents.y.max
        const yRange = dataExtents.yRange;
        const xRange = dataExtents.xRange;
        const screenMinX = region.x.min;
        const screenW = region.x.max - screenMinX;
        const screenMaxY = region.y.max;
        const screenH = screenMaxY - region.y.min;
        const xFactor = screenW / xRange;
        const yFactor = screenH / yRange;
        return {
            x: (x) => (x - xMin) * xFactor + screenMinX,
            y: (y) => screenMaxY - (y - yMin) * yFactor,
            unx: (x) => (x - screenMinX) / xFactor + xMin,
            uny: (y) => yMin - (y - screenMaxY) / yFactor,
            w: (w) => w / xRange * screenW,
            h: (h) => -h / yRange * screenH
        };
    }
    /* clear clears the region. */
    clear() {
        const ext = this.extents;
        this.context.clearRect(ext.x.min, ext.y.min, ext.xRange, ext.yRange);
    }
    /* plot prepares tools for drawing using data coordinates. */
    plot(dataExtents, drawFunc, skipMask) {
        const ctx = this.context;
        const region = this.extents;
        ctx.save(); // Save the original state
        if (!skipMask) {
            ctx.beginPath();
            ctx.rect(region.x.min, region.y.min, region.xRange, region.yRange);
            ctx.clip();
        }
        // The drawFunc will be passed a set of tool that can be used to assist
        // drawing. The tools start with the transformation functions.
        const tools = this.translator(dataExtents);
        // Create a transformation that allows drawing in data coordinates. It's
        // not advisable to stroke or add text with this transform in place, as the
        // result will be distorted. You can however use ctx.moveTo and ctx.lineTo
        // with this transform in place using data coordinates, and remove the
        // transform before stroking. The dataCoords method of the supplied tool
        // provides this functionality.
        // TODO: Figure out why this doesn't work on WebView.
        // const yRange = dataExtents.yRange
        // const xFactor = region.xRange / dataExtents.xRange
        // const yFactor = region.yRange / yRange
        // const xMin = dataExtents.x.min
        // const yMin = dataExtents.y.min
        // // These translation factors are complicated because the (0, 0) of the
        // // region is not necessarily the (0, 0) of the canvas.
        // const tx = (region.x.min + xMin) - xMin * xFactor
        // const ty = -region.y.min - (yRange - yMin) * yFactor
        // const setTransform = () => {
        //   // Data coordinates are flipped about y. Flip the coordinates and
        //   // translate top left corner to canvas (0, 0).
        //   ctx.transform(1, 0, 0, -1, -xMin, yMin)
        //   // Scale to data coordinates and shift into place for the region's offset
        //   // on the canvas.
        //   ctx.transform(xFactor, 0, 0, yFactor, tx, ty)
        // }
        // // dataCoords allows some drawing to be performed directly in data
        // // coordinates. Most actual drawing functions like ctx.stroke and
        // // ctx.fillRect should not be called from inside dataCoords, but
        // // ctx.moveTo and ctx.LineTo are fine.
        // tools.dataCoords = f => {
        //   ctx.save()
        //   setTransform()
        //   f()
        //   ctx.restore()
        // }
        drawFunc(this.context, tools);
        ctx.restore();
    }
}
/*
 * makeLabels attempts to create the appropriate labels for the specified
 * screen size, context, and label spacing.
 */
function makeLabels(ctx, screenW, min, max, spacingGuess, step, unit, valFmt) {
    valFmt = valFmt || _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs;
    const n = screenW / spacingGuess;
    const diff = max - min;
    if (n < 1 || diff <= 0)
        return { lbls: [] };
    const tickGuess = diff / n;
    // make the tick spacing a multiple of the step
    const tick = tickGuess + step - (tickGuess % step);
    let x = min + tick - (min % tick);
    const absMax = Math.max(Math.abs(max), Math.abs(min));
    // The Math.round part is the minimum precision required to see the change in the numbers.
    // The 2 accounts for the precision of the tick.
    const sigFigs = Math.round(Math.log10(absMax / tick)) + 2;
    const pts = [];
    let widest = 0;
    while (x < max) {
        x = Number(x.toPrecision(sigFigs));
        const lbl = valFmt(x);
        widest = Math.max(widest, ctx.measureText(lbl).width);
        pts.push({
            val: x,
            txt: lbl
        });
        x += tick;
    }
    const unitW = ctx.measureText(unit).width;
    if (unitW > widest)
        widest = unitW;
    return {
        widest: widest,
        lbls: pts
    };
}
const months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
/* makeCandleTimeLabels prepares labels for candlestick data. */
function makeCandleTimeLabels(candles, dur, screenW, spacingGuess) {
    const first = candles[0];
    const last = candles[candles.length - 1];
    const start = truncate(first.endStamp, dur);
    const end = truncate(last.endStamp, dur) + dur;
    const diff = end - start;
    const n = Math.min(candles.length, screenW / spacingGuess);
    const tick = truncate(diff / n, dur);
    if (tick === 0) {
        console.error('zero tick', dur, diff, n); // probably won't happen, but it'd suck if it did
        return { lbls: [] };
    }
    let x = start;
    const zoneOffset = new Date().getTimezoneOffset();
    const dayStamp = (x) => {
        x = x - zoneOffset * 60000;
        return x - (x % 86400000);
    };
    let lastDay = dayStamp(start);
    let lastYear = 0; // new Date(start).getFullYear()
    if (dayStamp(first.endStamp) === dayStamp(last.endStamp))
        lastDay = 0; // Force at least one day stamp.
    const pts = [];
    let label;
    if (dur < 86400000) {
        label = (d, x) => {
            const day = dayStamp(x);
            if (day !== lastDay)
                return `${months[d.getMonth()]}${d.getDate()} ${d.getHours()}:${String(d.getMinutes()).padStart(2, '0')}`;
            else
                return `${d.getHours()}:${String(d.getMinutes()).padStart(2, '0')}`;
        };
    }
    else {
        label = (d) => {
            const year = d.getFullYear();
            if (year !== lastYear)
                return `${months[d.getMonth()]}${d.getDate()} '${String(year).slice(2, 4)}`;
            else
                return `${months[d.getMonth()]}${d.getDate()}`;
        };
    }
    while (x <= end) {
        const d = new Date(x);
        pts.push({
            val: x,
            txt: label(d, x)
        });
        lastDay = dayStamp(x);
        lastYear = d.getFullYear();
        x += tick;
    }
    return { lbls: pts };
}
/* The last element of an array. */
function last(arr) {
    return arr[arr.length - 1];
}
/* line draws a line with the provided context. */
function line(ctx, x0, y0, x1, y1, skipStroke) {
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    if (!skipStroke)
        ctx.stroke();
}
/* dot draws a circle with the provided context. */
function dot(ctx, x, y, color, radius) {
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, PIPI);
    ctx.fill();
}
/* floatCompare compares two floats to within a tolerance of  1e-8. */
function floatCompare(a, b) {
    return withinTolerance(a, b, 1e-8);
}
/*
 * withinTolerance returns true if the difference between a and b are with
 * the specified tolerance.
 */
function withinTolerance(a, b, tolerance) {
    return Math.abs(a - b) < Math.abs(tolerance);
}
function truncate(v, w) {
    return v - (v % w);
}


/***/ }),

/***/ "./src/js/coinexplorers.ts":
/*!*********************************!*\
  !*** ./src/js/coinexplorers.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoinExplorers": () => (/* binding */ CoinExplorers),
/* harmony export */   "Mainnet": () => (/* binding */ Mainnet),
/* harmony export */   "Simnet": () => (/* binding */ Simnet),
/* harmony export */   "Testnet": () => (/* binding */ Testnet),
/* harmony export */   "formatCoinID": () => (/* binding */ formatCoinID),
/* harmony export */   "setCoinHref": () => (/* binding */ setCoinHref)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");


const Mainnet = 0;
const Testnet = 1;
const Simnet = 2;
const coinIDTakerFoundMakerRedemption = 'TakerFoundMakerRedemption:';
/* ethBasedExplorerArg returns the explorer argument for ETH, ERC20 and EVM
Compatible assets and whether the return value is an address. */
function ethBasedExplorerArg(cid) {
    if (cid.startsWith(coinIDTakerFoundMakerRedemption))
        return [cid.substring(coinIDTakerFoundMakerRedemption.length), true];
    else if (cid.length === 42)
        return [cid, true];
    else
        return [cid, false];
}
const ethExplorers = {
    [Mainnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://etherscan.io/address/${arg}` : `https://etherscan.io/tx/${arg}`;
    },
    [Testnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://sepolia.etherscan.io/address/${arg}` : `https://sepolia.etherscan.io/tx/${arg}`;
    },
    [Simnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://etherscan.io/address/${arg}` : `https://etherscan.io/tx/${arg}`;
    }
};
const polygonExplorers = {
    [Mainnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://polygonscan.com/address/${arg}` : `https://polygonscan.com/tx/${arg}`;
    },
    [Testnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://amoy.polygonscan.com/address/${arg}` : `https://amoy.polygonscan.com/tx/${arg}`;
    },
    [Simnet]: (cid) => {
        const [arg, isAddr] = ethBasedExplorerArg(cid);
        return isAddr ? `https://polygonscan.com/address/${arg}` : `https://polygonscan.com/tx/${arg}`;
    }
};
const CoinExplorers = {
    42: {
        [Mainnet]: (cid) => {
            const [txid, vout] = cid.split(':');
            if (vout !== undefined)
                return `https://explorer.dcrdata.org/tx/${txid}/out/${vout}`;
            return `https://explorer.dcrdata.org/tx/${txid}`;
        },
        [Testnet]: (cid) => {
            const [txid, vout] = cid.split(':');
            if (vout !== undefined)
                return `https://testnet.dcrdata.org/tx/${txid}/out/${vout}`;
            return `https://testnet.dcrdata.org/tx/${txid}`;
        },
        [Simnet]: (cid) => {
            const [txid, vout] = cid.split(':');
            if (vout !== undefined)
                return `http://127.0.0.1:17779/tx/${txid}/out/${vout}`;
            return `https://127.0.0.1:17779/tx/${txid}`;
        }
    },
    0: {
        [Mainnet]: (cid) => `https://mempool.space/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://mempool.space/testnet/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://mempool.space/tx/${cid.split(':')[0]}`
    },
    2: {
        [Mainnet]: (cid) => `https://ltc.bitaps.com/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://sochain.com/tx/LTCTEST/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://ltc.bitaps.com/${cid.split(':')[0]}`
    },
    20: {
        [Mainnet]: (cid) => `https://digiexplorer.info/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://testnetexplorer.digibyteservers.io/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://digiexplorer.info/tx/${cid.split(':')[0]}`
    },
    60: ethExplorers,
    60001: ethExplorers,
    60002: ethExplorers,
    3: {
        [Mainnet]: (cid) => `https://dogeblocks.com/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://blockexplorer.one/dogecoin/testnet/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://dogeblocks.com/tx/${cid.split(':')[0]}`
    },
    5: {
        [Mainnet]: (cid) => `https://blockexplorer.one/dash/mainnet/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://blockexplorer.one/dash/testnet/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://blockexplorer.one/dash/mainnet/tx/${cid.split(':')[0]}`
    },
    133: {
        [Mainnet]: (cid) => `https://zcashblockexplorer.com/transactions/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://blockexplorer.one/zcash/testnet/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://zcashblockexplorer.com/transactions/${cid.split(':')[0]}`
    },
    147: {
        [Mainnet]: (cid) => `https://explorer.zcl.zelcore.io/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://explorer.zcl.zelcore.io/tx/${cid.split(':')[0]}`
    },
    136: {
        [Mainnet]: (cid) => `https://explorer.firo.org/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://testexplorer.firo.org/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://explorer.firo.org/tx/${cid.split(':')[0]}`
    },
    145: {
        [Mainnet]: (cid) => `https://bch.loping.net/tx/${cid.split(':')[0]}`,
        [Testnet]: (cid) => `https://tbch4.loping.net/tx/${cid.split(':')[0]}`,
        [Simnet]: (cid) => `https://bch.loping.net/tx/${cid.split(':')[0]}`
    },
    966: polygonExplorers,
    966001: polygonExplorers,
    966002: polygonExplorers,
    966003: polygonExplorers,
    966004: polygonExplorers
};
function formatCoinID(cid) {
    if (cid.startsWith(coinIDTakerFoundMakerRedemption)) {
        const makerAddr = cid.substring(coinIDTakerFoundMakerRedemption.length);
        return _locales__WEBPACK_IMPORTED_MODULE_1__.prep(_locales__WEBPACK_IMPORTED_MODULE_1__.ID_TAKER_FOUND_MAKER_REDEMPTION, { makerAddr: makerAddr });
    }
    return cid;
}
/*
 * baseChainID returns the asset ID for the asset's parent if the asset is a
 * token, otherwise the ID for the asset itself.
 */
function baseChainID(assetID) {
    const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().user.assets[assetID];
    return asset.token ? asset.token.parentID : assetID;
}
/*
 * setCoinHref sets the hyperlink element's href attribute based on provided
 * assetID and data-explorer-coin value present on supplied link element.
 */
function setCoinHref(assetID, link) {
    const net = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().user.net;
    const assetExplorer = CoinExplorers[baseChainID(assetID)];
    if (!assetExplorer)
        return;
    const formatter = assetExplorer[net];
    if (!formatter)
        return;
    link.classList.remove('plainlink');
    link.classList.add('subtlelink');
    link.href = formatter(link.dataset.explorerCoin || '');
}


/***/ }),

/***/ "./src/js/dexsettings.ts":
/*!*******************************!*\
  !*** ./src/js/dexsettings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DexSettingsPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./account */ "./src/js/account.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







const animationLength = 300;
class DexSettingsPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(body) {
        super();
        this.body = body;
        const host = this.host = body.dataset.host ? body.dataset.host : '';
        const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[host];
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(body);
        this.forms = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.forms, ':scope > form');
        this.confirmRegisterForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.ConfirmRegistrationForm(page.confirmRegForm, () => __awaiter(this, void 0, void 0, function* () {
            this.showSuccess(_locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_TRADING_TIER_UPDATED));
            this.renewToggle.setState(this.confirmRegisterForm.tier > 0);
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().updateMenuItemsDisplay();
        }), () => {
            this.runAnimation(this.regAssetForm, page.regAssetForm);
        });
        this.confirmRegisterForm.setExchange(xc, '');
        this.walletWaitForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.WalletWaitForm(page.walletWait, () => {
            this.runAnimation(this.confirmRegisterForm, page.confirmRegForm);
        }, () => {
            this.runAnimation(this.regAssetForm, page.regAssetForm);
        });
        this.walletWaitForm.setExchange(xc);
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.NewWalletForm(page.newWalletForm, assetID => this.newWalletCreated(assetID, this.confirmRegisterForm.tier), () => this.runAnimation(this.regAssetForm, page.regAssetForm));
        this.regAssetForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.FeeAssetSelectionForm(page.regAssetForm, (assetID, tier) => __awaiter(this, void 0, void 0, function* () {
            if (assetID === _registry__WEBPACK_IMPORTED_MODULE_6__.PrepaidBondID) {
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
                this.updateReputation();
                this.showSuccess(_locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_TRADING_TIER_UPDATED));
                return;
            }
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            const wallet = asset.wallet;
            if (wallet) {
                const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.regAssetForm);
                const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.regAssetForm);
                this.confirmRegisterForm.setAsset(assetID, tier, bondsFeeBuffer);
                loaded();
                this.progressTierFormsWithWallet(assetID, wallet);
                return;
            }
            this.confirmRegisterForm.setAsset(assetID, tier, 0);
            this.newWalletForm.setAsset(assetID);
            this.showForm(page.newWalletForm);
        }));
        this.regAssetForm.setExchange(xc, '');
        this.reputationMeter = new _account__WEBPACK_IMPORTED_MODULE_5__.ReputationMeter(page.repMeter);
        this.reputationMeter.setHost(host);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.exportDexBtn, 'click', () => this.exportAccount());
        this.accountDisabled = body.dataset.disabled === 'true';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.toggleAccountStatusBtn, 'click', () => {
            if (!this.accountDisabled)
                this.prepareAccountDisable(page.disableAccountForm);
            else
                this.toggleAccountStatus(false);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.updateCertBtn, 'click', () => page.certFileInput.click());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.updateHostBtn, 'click', () => this.prepareUpdateHost());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.certFileInput, 'change', () => this.onCertFileChange());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.goBackToSettings, 'click', () => (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage('settings'));
        const showTierForm = () => {
            this.regAssetForm.setExchange((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[host], ''); // reset form
            this.showForm(page.regAssetForm);
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.changeTier, 'click', () => { showTierForm(); });
        const willAutoRenew = xc.auth.targetTier > 0;
        this.renewToggle = new _doc__WEBPACK_IMPORTED_MODULE_0__.AniToggle(page.toggleAutoRenew, page.renewErr, willAutoRenew, (newState) => __awaiter(this, void 0, void 0, function* () {
            if (this.accountDisabled)
                return;
            if (newState)
                showTierForm();
            else
                return this.disableAutoRenew();
        }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.autoRenewBox, 'click', (e) => {
            e.stopPropagation();
            if (!this.accountDisabled)
                page.toggleAutoRenew.click();
        });
        page.penaltyComps.textContent = String(xc.auth.penaltyComps);
        const hideCompInput = () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.penaltyCompInput);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.penaltyComps);
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.penaltyCompBox, 'click', (e) => {
            e.stopPropagation();
            const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[this.host];
            page.penaltyCompInput.value = String(xc.auth.penaltyComps);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.penaltyComps);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.penaltyCompInput);
            page.penaltyCompInput.focus();
            const checkClick = (e) => {
                if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, page.penaltyCompBox))
                    return;
                hideCompInput();
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'click', checkClick);
            };
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'click', checkClick);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.penaltyCompInput, 'keyup', (e) => __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.penaltyCompsErr);
            if (e.key === 'Escape') {
                hideCompInput();
                return;
            }
            if (!(e.key === 'Enter'))
                return;
            const penaltyComps = parseInt(page.penaltyCompInput.value || '');
            if (isNaN(penaltyComps)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.penaltyCompsErr);
                page.penaltyCompsErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_INVALID_COMPS_VALUE);
                return;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.otherBondSettings);
            try {
                yield this.updateBondOptions({ penaltyComps });
                loaded();
                page.penaltyComps.textContent = String(penaltyComps);
            }
            catch (e) {
                loaded();
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.penaltyCompsErr);
                page.penaltyCompsErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_API_ERROR, { msg: e.msg });
            }
            hideCompInput();
        }));
        this.dexAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.DEXAddressForm(page.dexAddrForm, (xc) => __awaiter(this, void 0, void 0, function* () {
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage(`/dexsettings/${xc.host}`);
        }), this.host);
        // forms.bind(page.bondDetailsForm, page.updateBondOptionsConfirm, () => this.updateBondOptions())
        _forms__WEBPACK_IMPORTED_MODULE_3__.bind(page.disableAccountForm, page.disableAccountConfirm, () => this.toggleAccountStatus(true));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                this.closePopups();
            }
        });
        this.keyup = (e) => {
            if (e.key === 'Escape') {
                this.closePopups();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'keyup', this.keyup);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.forms, '.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => { this.closePopups(); });
        });
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            conn: () => { this.setConnectionStatus(); },
            reputation: () => { this.updateReputation(); },
            feepayment: () => { this.updateReputation(); },
            bondpost: () => { this.updateReputation(); }
        });
        this.setConnectionStatus();
        this.updateReputation();
    }
    unload() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'keyup', this.keyup);
    }
    progressTierFormsWithWallet(assetID, wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, confirmRegisterForm: { fees } } = this;
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            const { bondAssets } = this.regAssetForm.xc;
            const bondAsset = bondAssets[asset.symbol];
            if (!wallet.open) {
                const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.forms);
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/openwallet', { assetID: assetID });
                loaded();
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                    this.regAssetForm.setAssetError(`error unlocking wallet: ${res.msg}`);
                    this.runAnimation(this.regAssetForm, page.regAssetForm);
                }
                return;
            }
            if (wallet.synced && wallet.balance.available >= 2 * bondAsset.amount + fees) {
                // If we are raising our tier, we'll show a confirmation form
                this.progressTierFormWithSyncedFundedWallet(assetID);
                return;
            }
            this.walletWaitForm.setWallet(assetID, fees, this.confirmRegisterForm.tier);
            this.showForm(page.walletWait);
        });
    }
    progressTierFormWithSyncedFundedWallet(bondAssetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[this.host];
            const targetTier = this.confirmRegisterForm.tier;
            const page = this.page;
            const strongTier = xc.auth.liveStrength + xc.auth.pendingStrength - xc.auth.weakStrength;
            if (targetTier > xc.auth.targetTier && targetTier > strongTier) {
                this.runAnimation(this.confirmRegisterForm, page.confirmRegForm);
                return;
            }
            // Lowering tier
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.body);
            try {
                yield this.updateBondOptions({ bondAssetID, targetTier });
                loaded();
            }
            catch (e) {
                loaded();
                this.regAssetForm.setTierError(e.msg);
                return;
            }
            // this.animateConfirmForm(page.regAssetForm)
            this.showSuccess(_locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_TRADING_TIER_UPDATED));
        });
    }
    updateReputation() {
        const page = this.page;
        const auth = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[this.host].auth;
        const { rep: { penalties }, targetTier, expiredBonds } = auth;
        const displayTier = (0,_account__WEBPACK_IMPORTED_MODULE_5__.strongTier)(auth);
        page.targetTier.textContent = String(targetTier);
        page.effectiveTier.textContent = String(displayTier);
        page.penalties.textContent = String(penalties);
        page.bondsPendingRefund.textContent = `${(expiredBonds === null || expiredBonds === void 0 ? void 0 : expiredBonds.length) || 0}`;
        this.reputationMeter.update();
    }
    /* showForm shows a modal form with a little animation. */
    showForm(form) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.currentForm = form;
            this.forms.forEach(form => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form));
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, form);
            const shift = (page.forms.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0';
        });
    }
    runAnimation(ani, form) {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.currentForm);
            yield ani.animate();
            this.currentForm = form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(form);
        });
    }
    closePopups() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.forms);
        if (this.animation)
            this.animation.stop();
    }
    showSuccess(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.forms.forEach(form => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form));
            this.currentForm = this.page.checkmarkForm;
            this.animation = _forms__WEBPACK_IMPORTED_MODULE_3__.showSuccess(this.page, msg);
            yield this.animation.wait();
            this.animation = new _doc__WEBPACK_IMPORTED_MODULE_0__.Animation(1500, () => { }, '', () => {
                if (this.currentForm === this.page.checkmarkForm)
                    this.closePopups();
            });
        });
    }
    // exportAccount exports and downloads the account info.
    exportAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, host } = this;
            const req = { host };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/exportaccount', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.exportAccountErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.exportAccountErr);
                return;
            }
            res.account.bonds = res.bonds; // maintain backward compat of JSON file
            const accountForExport = JSON.parse(JSON.stringify(res.account));
            const a = document.createElement('a');
            a.setAttribute('download', 'dcrAccount-' + host + '.json');
            a.setAttribute('href', 'data:text/json,' + JSON.stringify(accountForExport, null, 2));
            a.click();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
        });
    }
    // toggleAccountStatus enables or disables the account associated with the
    // provided host.
    toggleAccountStatus(disable) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.errMsg);
            let host = this.host;
            if (disable)
                host = page.disableAccountHost.textContent;
            const req = { host, disable: disable };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/toggleaccountstatus', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                if (disable) {
                    page.disableAccountErr.textContent = res.msg;
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.disableAccountErr);
                }
                else {
                    page.errMsg.textContent = res.msg;
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.errMsg);
                }
                return;
            }
            if (disable) {
                this.page.toggleAccountStatusBtn.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_ENABLE_ACCOUNT);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            }
            else
                this.page.toggleAccountStatusBtn.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_DISABLE_ACCOUNT);
            this.accountDisabled = disable;
            // Refresh exchange information since we've just enabled/disabled the
            // exchange.
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage(`dexsettings/${host}`);
        });
    }
    prepareAccountDisable(disableAccountForm) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            page.disableAccountHost.textContent = this.host;
            page.disableAccountErr.textContent = '';
            this.showForm(disableAccountForm);
        });
    }
    // Retrieve an estimate for the tx fee needed to create new bond reserves.
    getBondsFeeBuffer(assetID, form) {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/bondsfeebuffer', { assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                return 0;
            }
            return res.feeBuffer;
        });
    }
    prepareUpdateHost() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.dexAddrForm.refresh();
            this.showForm(page.dexAddrForm);
        });
    }
    onCertFileChange() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.errMsg);
            const files = page.certFileInput.files;
            let cert;
            if (files && files.length)
                cert = yield files[0].text();
            if (!cert)
                return;
            const req = { host: this.host, cert: cert };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/updatecert', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.errMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.errMsg);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.updateCertMsg);
                setTimeout(() => { _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.updateCertMsg); }, 5000);
            }
        });
    }
    setConnectionStatus() {
        const page = this.page;
        const exchange = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().user.exchanges[this.host];
        const displayIcons = (connected) => {
            if (connected) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.disconnectedIcon);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.connectedIcon);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.disconnectedIcon);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.connectedIcon);
            }
        };
        if (exchange) {
            switch (exchange.connectionStatus) {
                case _registry__WEBPACK_IMPORTED_MODULE_6__.ConnectionStatus.Connected:
                    displayIcons(true);
                    page.connectionStatus.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_CONNECTED);
                    break;
                case _registry__WEBPACK_IMPORTED_MODULE_6__.ConnectionStatus.Disconnected:
                    displayIcons(false);
                    if (this.accountDisabled)
                        page.connectionStatus.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_ACCOUNT_DISABLED_MSG);
                    else
                        page.connectionStatus.textContent = _locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_DISCONNECTED);
                    break;
                case _registry__WEBPACK_IMPORTED_MODULE_6__.ConnectionStatus.InvalidCert:
                    displayIcons(false);
                    page.connectionStatus.textContent = `${_locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_DISCONNECTED)} - ${_locales__WEBPACK_IMPORTED_MODULE_4__.prep(_locales__WEBPACK_IMPORTED_MODULE_4__.ID_INVALID_CERTIFICATE)}`;
            }
        }
    }
    disableAutoRenew() {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.page.otherBondSettings);
            try {
                this.updateBondOptions({ targetTier: 0 });
                loaded();
            }
            catch (e) {
                loaded();
                throw e;
            }
        });
    }
    /*
     * updateBondOptions is called when the form to update bond options is
     * submitted.
     */
    updateBondOptions(conf) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            conf.host = this.host;
            yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/updatebondoptions', conf);
            const targetTier = (_a = conf.targetTier) !== null && _a !== void 0 ? _a : (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[this.host].auth.targetTier;
            this.renewToggle.setState(targetTier > 0);
        });
    }
    newWalletCreated(assetID, tier) {
        return __awaiter(this, void 0, void 0, function* () {
            this.regAssetForm.refresh();
            const user = yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            if (!user)
                return;
            const page = this.page;
            const asset = user.assets[assetID];
            const wallet = asset.wallet;
            const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[this.host];
            const bondAmt = xc.bondAssets[asset.symbol].amount;
            const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.newWalletForm);
            this.confirmRegisterForm.setFees(assetID, bondsFeeBuffer);
            if (wallet.synced && wallet.balance.available >= 2 * bondAmt + bondsFeeBuffer) {
                this.progressTierFormWithSyncedFundedWallet(assetID);
                return;
            }
            this.walletWaitForm.setWallet(assetID, bondsFeeBuffer, tier);
            yield this.showForm(page.walletWait);
        });
    }
}


/***/ }),

/***/ "./src/js/doc.ts":
/*!***********************!*\
  !*** ./src/js/doc.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AniToggle": () => (/* binding */ AniToggle),
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Easing": () => (/* binding */ Easing),
/* harmony export */   "IncrementalInput": () => (/* binding */ IncrementalInput),
/* harmony export */   "MiniSlider": () => (/* binding */ MiniSlider),
/* harmony export */   "NumberInput": () => (/* binding */ NumberInput),
/* harmony export */   "WalletIcons": () => (/* binding */ WalletIcons),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ Doc),
/* harmony export */   "parseFloatDefault": () => (/* binding */ parseFloatDefault),
/* harmony export */   "setupCopyBtn": () => (/* binding */ setupCopyBtn),
/* harmony export */   "toFourSigFigs": () => (/* binding */ toFourSigFigs),
/* harmony export */   "toPrecision": () => (/* binding */ toPrecision)
/* harmony export */ });
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const parser = new window.DOMParser();
const FPS = 30;
const BipIDs = {
    0: 'btc',
    42: 'dcr',
    2: 'ltc',
    5: 'dash',
    20: 'dgb',
    22: 'mona',
    28: 'vtc',
    3: 'doge',
    145: 'bch',
    60: 'eth',
    60001: 'usdc.eth',
    60002: 'usdt.eth',
    60003: 'matic.eth',
    136: 'firo',
    133: 'zec',
    966: 'polygon',
    966001: 'usdc.polygon',
    966002: 'weth.polygon',
    966003: 'wbtc.polygon',
    966004: 'usdt.polygon',
    147: 'zcl'
};
const BipSymbolIDs = {};
(function () {
    for (const k of Object.keys(BipIDs)) {
        BipSymbolIDs[BipIDs[parseInt(k)]] = parseInt(k);
    }
})();
const BipSymbols = Object.values(BipIDs);
const RateEncodingFactor = 1e8; // same as value defined in ./orderutil
const log10RateEncodingFactor = Math.round(Math.log10(RateEncodingFactor));
const languages = navigator.languages.filter((locale) => locale !== 'c');
const intFormatter = new Intl.NumberFormat(languages, { maximumFractionDigits: 0 });
const fourSigFigs = new Intl.NumberFormat(languages, {
    minimumSignificantDigits: 4,
    maximumSignificantDigits: 4
});
/* A cache for formatters used for Doc.formatCoinValue. */
const decimalFormatters = {};
/*
 * decimalFormatter gets the formatCoinValue formatter for the specified decimal
 * precision.
 */
function decimalFormatter(prec) {
    return formatter(decimalFormatters, 2, prec);
}
/* A cache for formatters used for Doc.formatFullPrecision. */
const fullPrecisionFormatters = {};
/*
 * fullPrecisionFormatter gets the formatFullPrecision formatter for the
 * specified decimal precision.
 */
function fullPrecisionFormatter(prec, locales) {
    return formatter(fullPrecisionFormatters, prec, prec, locales);
}
/*
 * formatter gets the formatter from the supplied cache if it already exists,
 * else creates it.
 */
function formatter(formatters, min, max, locales) {
    const k = `${min}-${max}`;
    let fmt = formatters[k];
    if (!fmt) {
        fmt = new Intl.NumberFormat(locales !== null && locales !== void 0 ? locales : languages, {
            minimumFractionDigits: min,
            maximumFractionDigits: max
        });
        formatters[k] = fmt;
    }
    return fmt;
}
/*
 * convertToConventional converts the value in atomic units to conventional
 * units.
 */
function convertToConventional(v, unitInfo) {
    let prec = 8;
    if (unitInfo) {
        const f = unitInfo.conventional.conversionFactor;
        v /= f;
        prec = Math.round(Math.log10(f));
    }
    return [v, prec];
}
/*
 * bestDisplayOrder is used in bestConversion, and is the order of magnitude
 * that is considered the best for display. For example, if bestDisplayOrder is
 * 1, and the choices for display are 1,000 BTC or 0.00001 Sats, the algorithm
 * will look at the orders of the conversions, 1000 => 10^3 => order 3, and
 * 0.00001 => 10^-5 => order 5, and see which is closest to bestDisplayOrder and
 * choose that conversion. In the example, 3 - bestDisplayOrder = 2 and
 * 1 - (-5) = 6, so the conversion that has the order closest to
 * bestDisplayOrder is the first one, 1,000 BTC.
 */
const bestDisplayOrder = 1; // 10^1 => 1
/*
 * resolveUnitConversions creates a lookup object mapping unit -> conversion
 * factor. By default, resolveUnitConversions only maps the atomic and
 * conventional units. If a prefs dict is provided, additional units can be
 * included.
 */
function resolveUnitConversions(ui, prefs) {
    const unitFactors = {
        [ui.atomicUnit]: 1,
        [ui.conventional.unit]: ui.conventional.conversionFactor
    };
    if (ui.denominations && prefs) {
        for (const alt of ui.denominations)
            if (prefs[alt.unit])
                unitFactors[alt.unit] = alt.conversionFactor;
    }
    return unitFactors;
}
// Helpers for working with the DOM.
class Doc {
    /*
     * idel is the element with the specified id that is the descendent of the
     * specified node.
     */
    static idel(el, id) {
        return el.querySelector(`#${id}`);
    }
    /* bind binds the function to the event for the element. */
    static bind(el, ev, f, opts /* EventListenerOptions */) {
        for (const e of (Array.isArray(ev) ? ev : [ev]))
            el.addEventListener(e, f, opts);
    }
    /* unbind removes the handler for the event from the element. */
    static unbind(el, ev, f) {
        el.removeEventListener(ev, f);
    }
    /* noderize creates a Document object from a string of HTML. */
    static noderize(html) {
        return parser.parseFromString(html, 'text/html');
    }
    /*
     * mouseInElement returns true if the position of mouse event, e, is within
     * the bounds of the specified element or any of its descendents.
     */
    static mouseInElement(e, el) {
        if (el.contains(e.target))
            return true;
        const rect = el.getBoundingClientRect();
        return e.pageX >= rect.left && e.pageX <= rect.right &&
            e.pageY >= rect.top && e.pageY <= rect.bottom;
    }
    /*
     * layoutMetrics gets information about the elements position on the page.
     */
    static layoutMetrics(el) {
        const box = el.getBoundingClientRect();
        const docEl = document.documentElement;
        const top = box.top + docEl.scrollTop;
        const left = box.left + docEl.scrollLeft;
        const w = el.offsetWidth;
        const h = el.offsetHeight;
        return {
            bodyTop: top,
            bodyLeft: left,
            width: w,
            height: h,
            centerX: left + w / 2,
            centerY: top + h / 2
        };
    }
    static descendentMetrics(parent, kid) {
        const parentMetrics = Doc.layoutMetrics(parent);
        const kidMetrics = Doc.layoutMetrics(kid);
        return {
            bodyTop: kidMetrics.bodyTop - parentMetrics.bodyTop,
            bodyLeft: kidMetrics.bodyLeft - parentMetrics.bodyLeft,
            width: kidMetrics.width,
            height: kidMetrics.height,
            centerX: kidMetrics.centerX - parentMetrics.bodyLeft,
            centerY: kidMetrics.centerY - parentMetrics.bodyTop
        };
    }
    /* empty removes all child nodes from the specified element. */
    static empty(...els) {
        for (const el of els)
            while (el.firstChild)
                el.removeChild(el.firstChild);
    }
    /*
     * setContent removes all child nodes from the specified element and appends
     * passed elements.
     */
    static setContent(ancestor, ...kids) {
        Doc.empty(ancestor);
        for (const k of kids)
            ancestor.appendChild(k);
    }
    /*
     * hide hides the specified elements. This is accomplished by adding the
     * bootstrap d-hide class to the element. Use Doc.show to undo.
     */
    static hide(...els) {
        for (const el of els)
            el.classList.add('d-hide');
    }
    /*
     * show shows the specified elements. This is accomplished by removing the
     * bootstrap d-hide class as added with Doc.hide.
     */
    static show(...els) {
        for (const el of els)
            el.classList.remove('d-hide');
    }
    /*
     * show or hide the specified elements, based on value of the truthiness of
     * vis.
     */
    static setVis(vis, ...els) {
        if (vis)
            Doc.show(...els);
        else
            Doc.hide(...els);
    }
    /* isHidden returns true if the specified element is hidden */
    static isHidden(el) {
        return el.classList.contains('d-hide');
    }
    /* isDisplayed returns true if the specified element is not hidden */
    static isDisplayed(el) {
        return !el.classList.contains('d-hide');
    }
    /*
     * animate runs the supplied function, which should be a "progress" function
     * accepting one argument. The progress function will be called repeatedly
     * with the argument varying from 0.0 to 1.0. The exact path that animate
     * takes from 0.0 to 1.0 will vary depending on the choice of easing
     * algorithm. See the Easing object for the available easing algo choices. The
     * default easing algorithm is linear.
     */
    static animate(duration, f, easingAlgo) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new Animation(duration, f, easingAlgo).wait();
        });
    }
    static blink(el) {
        return __awaiter(this, void 0, void 0, function* () {
            const [r, g, b] = _state__WEBPACK_IMPORTED_MODULE_1__["default"].isDark() ? [255, 255, 255] : [0, 0, 0];
            const cycles = 2;
            Doc.animate(1000, (p) => {
                el.style.outline = `2px solid rgba(${r}, ${g}, ${b}, ${(cycles - p * cycles) % 1})`;
            });
        });
    }
    static applySelector(ancestor, k) {
        return Array.from(ancestor.querySelectorAll(k));
    }
    static kids(ancestor) {
        return Array.from(ancestor.children);
    }
    static safeSelector(ancestor, k) {
        const el = ancestor.querySelector(k);
        if (el)
            return el;
        console.warn(`no element found for selector '${k}' on element ->`, ancestor);
        return document.createElement('div');
    }
    /*
     * idDescendants creates an object mapping to elements which are descendants
     * of the ancestor and have id attributes. Elements are keyed by their id
     * value.
     */
    static idDescendants(ancestor) {
        const d = {};
        for (const el of Doc.applySelector(ancestor, '[id]'))
            d[el.id] = el;
        return d;
    }
    /*
     * formatCoinValue formats the value in atomic units into a string
     * representation in conventional units. If the value happens to be an
     * integer, no decimals are displayed. Trailing zeros may be truncated.
     */
    static formatCoinValue(vAtomic, unitInfo) {
        const [v, prec] = convertToConventional(vAtomic, unitInfo);
        if (Number.isInteger(v))
            return intFormatter.format(v);
        return decimalFormatter(prec).format(v);
    }
    static conventionalCoinValue(vAtomic, unitInfo) {
        const [v] = convertToConventional(vAtomic, unitInfo);
        return v;
    }
    /*
     * formatRateFullPrecision formats rate to represent it exactly at rate step
     * precision, trimming non-effectual zeros if there are any.
     */
    static formatRateFullPrecision(encRate, bui, qui, rateStepEnc) {
        const r = bui.conventional.conversionFactor / qui.conventional.conversionFactor;
        const convRate = encRate * r / RateEncodingFactor;
        const rateStepDigits = log10RateEncodingFactor - Math.floor(Math.log10(rateStepEnc)) -
            Math.floor(Math.log10(bui.conventional.conversionFactor) - Math.log10(qui.conventional.conversionFactor));
        if (rateStepDigits <= 0)
            return intFormatter.format(convRate);
        return fullPrecisionFormatter(rateStepDigits).format(convRate);
    }
    static formatFourSigFigs(n, maxDecimals) {
        return formatSigFigsWithFormatters(intFormatter, fourSigFigs, n, maxDecimals);
    }
    static formatInt(i) {
        return intFormatter.format(i);
    }
    /*
     * formatFullPrecision formats the value in atomic units into a string
     * representation in conventional units using the full decimal precision
     * associated with the conventional unit's conversion factor.
     */
    static formatFullPrecision(vAtomic, unitInfo) {
        const [v, prec] = convertToConventional(vAtomic, unitInfo);
        return fullPrecisionFormatter(prec).format(v);
    }
    /*
     * formatFiatConversion formats the value in atomic units to its representation in
     * conventional units and returns the fiat value as a string.
     */
    static formatFiatConversion(vAtomic, rate, unitInfo) {
        if (!rate || rate === 0)
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_UNAVAILABLE);
        const prec = 2;
        const [v] = convertToConventional(vAtomic, unitInfo);
        const value = v * rate;
        return fullPrecisionFormatter(prec).format(value);
    }
    static languages() {
        return languages;
    }
    static formatFiatValue(value) {
        return fullPrecisionFormatter(2).format(value);
    }
    /*
     * bestConversion picks the best conversion factor for the atomic value. The
     * best is the one in which log10(converted_value) is closest to
     * bestDisplayOrder. Return: [converted_value, precision, unit].
     */
    static bestConversion(atoms, ui, prefs) {
        const unitFactors = resolveUnitConversions(ui, prefs);
        const logDiffs = [];
        const entryDiff = (entry) => Math.abs(Math.log10(atoms / entry[1]) - bestDisplayOrder);
        for (const entry of Object.entries(unitFactors))
            logDiffs.push([entry[0], entryDiff(entry)]);
        const best = logDiffs.reduce((best, entry) => entry[1] < best[1] ? entry : best);
        const unit = best[0];
        const cFactor = unitFactors[unit];
        const v = atoms / cFactor;
        return [v, Math.round(Math.log10(cFactor)), unit];
    }
    /*
     * formatBestUnitsFullPrecision formats the value with the best choice of
     * units, at full precision.
     */
    static formatBestUnitsFullPrecision(atoms, ui, prefs) {
        const [v, prec, unit] = this.bestConversion(atoms, ui, prefs);
        if (Number.isInteger(v))
            return [intFormatter.format(v), unit];
        return [fullPrecisionFormatter(prec).format(v), unit];
    }
    /*
     * formatBestUnitsFourSigFigs formats the value with the best choice of
     * units and rounded to four significant figures.
     */
    static formatBestUnitsFourSigFigs(atoms, ui, prefs) {
        const [v, prec, unit] = this.bestConversion(atoms, ui, prefs);
        return [Doc.formatFourSigFigs(v, prec), unit];
    }
    /*
     * formatBestRateElement formats a rate using the best available units and
     * updates the UI element. The ancestor should have descendents with data
     * attributes [best-value, data-unit, data-unit-box, data-denom].
     */
    static formatBestRateElement(ancestor, assetID, atoms, ui, prefs) {
        Doc.formatBestValueElement(ancestor, assetID, atoms, ui, prefs);
        Doc.setText(ancestor, '[data-denom]', ui.feeRateDenom);
    }
    /*
     * formatBestRateElement formats a value using the best available units and
     * updates the UI element. The ancestor should have descendents with data
     * attributes [best-value, data-unit, data-unit-box].
     */
    static formatBestValueElement(ancestor, assetID, atoms, ui, prefs) {
        const [v, unit] = this.formatBestUnitsFourSigFigs(atoms, ui, prefs);
        Doc.setText(ancestor, '[data-value]', v);
        Doc.setText(ancestor, '[data-unit]', unit);
        const span = Doc.safeSelector(ancestor, '[data-unit-box]');
        span.dataset.atoms = String(atoms);
        span.dataset.assetID = String(assetID);
    }
    static conventionalRateStep(rateStepEnc, baseUnitInfo, quoteUnitInfo) {
        const [qFactor, bFactor] = [quoteUnitInfo.conventional.conversionFactor, baseUnitInfo.conventional.conversionFactor];
        return rateStepEnc / RateEncodingFactor * (bFactor / qFactor);
    }
    /*
     * logoPath creates a path to a png logo for the specified ticker symbol. If
     * the symbol is not a supported asset, the generic letter logo will be
     * requested instead.
     */
    static logoPath(symbol) {
        if (BipSymbols.indexOf(symbol) === -1)
            symbol = symbol.substring(0, 1);
        symbol = symbol.split('.')[0]; // e.g. usdc.eth => usdc
        return `/img/coins/${symbol}.png`;
    }
    static bipSymbol(assetID) {
        return BipIDs[assetID];
    }
    static bipIDFromSymbol(symbol) {
        return BipSymbolIDs[symbol];
    }
    static bipCEXSymbol(assetID) {
        const bipSymbol = BipIDs[assetID];
        if (!bipSymbol || bipSymbol === '')
            return '';
        const parts = bipSymbol.split('.');
        if (parts[0] === 'weth')
            return 'eth';
        return parts[0];
    }
    static logoPathFromID(assetID) {
        return Doc.logoPath(BipIDs[assetID]);
    }
    /*
     * symbolize creates a token-aware symbol element for the asset's symbol. For
     * non-token assets, this is simply a <span>SYMBOL</span>. For tokens, it'll
     * be <span><span>SYMBOL</span><sup>PARENT</sup></span>.
     */
    static symbolize(asset, useLogo) {
        const ticker = asset.unitInfo.conventional.unit;
        const symbolSpan = document.createElement('span');
        symbolSpan.textContent = ticker.toUpperCase();
        const parts = asset.symbol.split('.');
        const isToken = parts.length === 2;
        if (!isToken)
            return symbolSpan;
        const parentSymbol = parts[1];
        const span = document.createElement('span');
        span.appendChild(symbolSpan);
        if (useLogo) {
            const parentLogo = document.createElement('img');
            parentLogo.src = Doc.logoPath(parentSymbol);
            parentLogo.classList.add('token-parent');
            span.appendChild(parentLogo);
            return span;
        }
        const parentSup = document.createElement('sup');
        parentSup.textContent = parentSymbol.toUpperCase();
        parentSup.classList.add('token-parent');
        span.appendChild(parentSup);
        return span;
    }
    /*
     * shortSymbol removes the short format of a symbol, with any parent chain
     * identifier removed
     */
    static shortSymbol(symbol) {
        return symbol.split('.')[0].toUpperCase();
    }
    /*
     * setText sets the textContent for all descendant elements that match the
     * specified CSS selector.
     */
    static setText(ancestor, selector, textContent) {
        for (const el of Doc.applySelector(ancestor, selector))
            el.textContent = textContent;
    }
    static setSrc(ancestor, selector, textContent) {
        for (const img of Doc.applySelector(ancestor, selector))
            img.src = textContent;
    }
    /*
    * cleanTemplates removes the elements from the DOM and deletes the id
    * attribute.
    */
    static cleanTemplates(...tmpls) {
        tmpls.forEach(tmpl => {
            tmpl.remove();
            tmpl.removeAttribute('id');
        });
    }
    /*
    * tmplElement is a helper function for grabbing sub-elements of the market list
    * template.
    */
    static tmplElement(ancestor, s) {
        return ancestor.querySelector(`[data-tmpl="${s}"]`) || document.createElement('div');
    }
    /*
    * parseTemplate returns an object of data-tmpl elements, keyed by their
    * data-tmpl values.
    */
    static parseTemplate(ancestor) {
        const d = {};
        for (const el of Doc.applySelector(ancestor, '[data-tmpl]'))
            d[el.dataset.tmpl || ''] = el;
        return d;
    }
    /*
     * timeSince returns a string representation of the duration since the
     * specified unix timestamp (milliseconds).
     */
    static timeSince(ms) {
        return Doc.formatDuration((new Date().getTime()) - ms);
    }
    /*
     * hmsSince returns a time duration since the specified unix timestamp
     * formatted as HH:MM:SS
     */
    static hmsSince(secs) {
        let r = (new Date().getTime() / 1000) - secs;
        const h = String(Math.floor(r / 3600));
        r = r % 3600;
        const m = String(Math.floor(r / 60));
        const s = String(Math.floor(r % 60));
        return `${h.padStart(2, '0')}:${m.padStart(2, '0')}:${s.padStart(2, '0')}`;
    }
    /* formatDuration returns a string representation of the duration */
    static formatDuration(dur) {
        let seconds = Math.floor(dur);
        let result = '';
        let count = 0;
        const add = (n, s) => {
            if (n > 0 || count > 0)
                count++;
            if (n > 0)
                result += `${n} ${s} `;
            return count >= 2;
        };
        let y, mo, d, h, m, s;
        [y, seconds] = timeMod(seconds, aYear);
        if (add(y, 'y')) {
            return result;
        }
        [mo, seconds] = timeMod(seconds, aMonth);
        if (add(mo, 'mo')) {
            return result;
        }
        [d, seconds] = timeMod(seconds, aDay);
        if (add(d, 'd')) {
            return result;
        }
        [h, seconds] = timeMod(seconds, anHour);
        if (add(h, 'h')) {
            return result;
        }
        [m, seconds] = timeMod(seconds, aMinute);
        if (add(m, 'm')) {
            return result;
        }
        [s, seconds] = timeMod(seconds, 1000);
        add(s, 's');
        return result || '0 s';
    }
    /*
     * disableMouseWheel can be used to disable the mouse wheel for any
     * input. It is very easy to unknowingly scroll up on a number input
     * and then submit an unexpected value. This function prevents the
     * scroll increment/decrement behavior for a wheel action on a
     * number input.
     */
    static disableMouseWheel(...inputFields) {
        for (const inputField of inputFields) {
            Doc.bind(inputField, 'wheel', () => { }, { passive: true });
        }
    }
    // showFormError can be used to set and display error message on forms.
    static showFormError(el, msg) {
        el.textContent = msg;
        Doc.show(el);
    }
    // showFiatValue displays the fiat equivalent for the provided amount.
    static showFiatValue(display, amount, rate, ui) {
        if (rate) {
            display.textContent = Doc.formatFiatConversion(amount, rate, ui);
            Doc.show(display.parentElement);
        }
        else
            Doc.hide(display.parentElement);
    }
}
/*
 * Animation is a handler for starting and stopping animations.
 */
class Animation {
    constructor(duration, f, easingAlgo, done) {
        this.done = done;
        this.thread = this.run(duration, f, easingAlgo);
    }
    /*
     * run runs the animation function, increasing progress from 0 to 1 in a
     * manner dictated by easingAlgo.
     */
    run(duration, f, easingAlgo) {
        return __awaiter(this, void 0, void 0, function* () {
            duration = duration >= 0 ? duration : 1000 * 86400 * 365 * 10; // 10 years, in ms
            const easer = easingAlgo ? Easing[easingAlgo] : Easing.linear;
            const start = new Date().getTime();
            const end = (duration === Animation.Forever) ? Number.MAX_SAFE_INTEGER : start + duration;
            const range = end - start;
            const frameDuration = 1000 / FPS;
            let now = start;
            this.endAnimation = false;
            while (now < end) {
                if (this.endAnimation)
                    return this.runCompletionFunction();
                f(easer((now - start) / range));
                yield sleep(frameDuration);
                now = new Date().getTime();
            }
            f(1);
            this.runCompletionFunction();
        });
    }
    /* wait returns a promise that will resolve when the animation completes. */
    wait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.thread;
        });
    }
    /* stop schedules the animation to exit at its next frame. */
    stop() {
        this.endAnimation = true;
    }
    /*
     * stopAndWait stops the animations and returns a promise that will resolve
     * when the animation exits.
     */
    stopAndWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stop();
            yield this.wait();
        });
    }
    /* runCompletionFunction runs any registered callback function */
    runCompletionFunction() {
        if (this.done)
            this.done();
    }
}
Animation.Forever = -1;
/* Easing algorithms for animations. */
const Easing = {
    linear: t => t,
    easeIn: t => t * t,
    easeOut: t => t * (2 - t),
    easeInHard: t => t * t * t,
    easeOutHard: t => (--t) * t * t + 1,
    easeOutElastic: t => {
        const c4 = (2 * Math.PI) / 3;
        return t === 0
            ? 0
            : t === 1
                ? 1
                : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c4) + 1;
    }
};
/* WalletIcons are used for controlling wallets in various places. */
class WalletIcons {
    constructor(box) {
        const stateElement = (name) => box.querySelector(`[data-state=${name}]`);
        this.icons = {};
        this.icons.sleeping = stateElement('sleeping');
        this.icons.locked = stateElement('locked');
        this.icons.unlocked = stateElement('unlocked');
        this.icons.nowallet = stateElement('nowallet');
        this.icons.syncing = stateElement('syncing');
        this.icons.nopeers = stateElement('nopeers');
        this.icons.disabled = stateElement('disabled');
        this.status = stateElement('status');
    }
    /* sleeping sets the icons to indicate that the wallet is not connected. */
    sleeping() {
        const i = this.icons;
        Doc.hide(i.locked, i.unlocked, i.nowallet, i.syncing, i.disabled);
        Doc.show(i.sleeping);
        if (this.status)
            this.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_OFF);
    }
    /*
     * locked sets the icons to indicate that the wallet is connected, but locked.
     */
    locked() {
        const i = this.icons;
        Doc.hide(i.unlocked, i.nowallet, i.sleeping, i.disabled);
        Doc.show(i.locked);
        if (this.status)
            this.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_LOCKED);
    }
    /*
     * unlocked sets the icons to indicate that the wallet is connected and
     * unlocked.
     */
    unlocked() {
        const i = this.icons;
        Doc.hide(i.locked, i.nowallet, i.sleeping, i.disabled);
        Doc.show(i.unlocked);
        if (this.status)
            this.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_READY);
    }
    /* nowallet sets the icons to indicate that no wallet exists. */
    nowallet() {
        const i = this.icons;
        Doc.hide(i.locked, i.unlocked, i.sleeping, i.syncing, i.disabled);
        Doc.show(i.nowallet);
        if (this.status)
            this.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_NO_WALLET);
    }
    /* set the icons to indicate that the wallet is disabled */
    disabled() {
        const i = this.icons;
        Doc.hide(i.locked, i.unlocked, i.sleeping, i.syncing, i.nowallet, i.nopeers);
        Doc.show(i.disabled);
        i.disabled.dataset.tooltip = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_DISABLED_MSG);
    }
    setSyncing(wallet) {
        const syncIcon = this.icons.syncing;
        if (!wallet || !wallet.running || wallet.disabled) {
            Doc.hide(syncIcon);
            return;
        }
        if (wallet.peerCount === 0) {
            Doc.show(this.icons.nopeers);
            Doc.hide(syncIcon); // potentially misleading with no peers
            return;
        }
        Doc.hide(this.icons.nopeers);
        if (!wallet.synced) {
            Doc.show(syncIcon);
            syncIcon.dataset.tooltip = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_WALLET_SYNC_PROGRESS, { syncProgress: (wallet.syncProgress * 100).toFixed(1) });
            return;
        }
        Doc.hide(syncIcon);
    }
    /* reads the core.Wallet state and sets the icon visibility. */
    readWallet(wallet) {
        this.setSyncing(wallet);
        if (!wallet)
            return this.nowallet();
        switch (true) {
            case (wallet.disabled):
                this.disabled();
                break;
            case (!wallet.running):
                this.sleeping();
                break;
            case (!wallet.open):
                this.locked();
                break;
            case (wallet.open):
                this.unlocked();
                break;
            default:
                console.error('wallet in unknown state', wallet);
        }
    }
}
/*
 * AniToggle is a small toggle switch, defined in HTML with the element
 * <div class="anitoggle"></div>. The animations are defined in the anitoggle
 * CSS class. AniToggle triggers the callback on click events, but does not
 * update toggle appearance, so the caller must call the setState method from
 * the callback or elsewhere if the newState
 * is accepted.
 */
class AniToggle {
    constructor(toggle, errorEl, initialState, callback) {
        this.toggle = toggle;
        if (toggle.children.length === 0)
            toggle.appendChild(document.createElement('div'));
        Doc.bind(toggle, 'click', (e) => __awaiter(this, void 0, void 0, function* () {
            e.stopPropagation();
            Doc.hide(errorEl);
            const newState = !toggle.classList.contains('on');
            this.toggling = true;
            try {
                yield callback(newState);
            }
            catch (e) {
                this.toggling = false;
                Doc.show(errorEl);
                errorEl.textContent = _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_API_ERROR, { msg: e.msg || String(e) });
                return;
            }
            this.toggling = false;
        }));
        this.setState(initialState);
    }
    setState(state) {
        if (state)
            this.toggle.classList.add('on');
        else
            this.toggle.classList.remove('on');
    }
}
/* sleep can be used by async functions to pause for a specified period. */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
const aYear = 31536000000;
const aMonth = 2592000000;
const aDay = 86400000;
const anHour = 3600000;
const aMinute = 60000;
/* timeMod returns the quotient and remainder of t / dur. */
function timeMod(t, dur) {
    const n = Math.floor(t / dur);
    return [n, t - n * dur];
}
function formatSigFigsWithFormatters(intFormatter, sigFigFormatter, n, maxDecimals, locales) {
    var _a, _b;
    if (n >= 1000)
        return intFormatter.format(n);
    const s = sigFigFormatter.format(n);
    if (typeof maxDecimals !== 'number')
        return s;
    const fractional = (_b = (_a = sigFigFormatter.formatToParts(n).filter((part) => part.type === 'fraction')[0]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';
    if (fractional.length <= maxDecimals)
        return s;
    return fullPrecisionFormatter(maxDecimals, locales).format(n);
}
if (true) {
    // Code will only appear in dev build.
    // https://webpack.js.org/guides/production/
    window.testFormatFourSigFigs = () => {
        const tests = [
            ['en-US', '1.234567', undefined, '1.235'],
            ['en-US', '1.234567', 2, '1.23'],
            ['en-US', '1234', undefined, '1,234.0'],
            ['en-US', '12', undefined, '12.00'],
            ['fr-FR', '123.45678', undefined, '123,5'],
            ['fr-FR', '1234.5', undefined, '1 234,5'],
            // For Arabic, https://www.saitak.com/number is useful, but seems to use
            // slightly different unicode points and no thousands separator. I think
            // the Arabic decimal separator is supposed to be more like a point, not
            // a comma, but Google Chrome uses U+066B (Arabic Decimal Separator),
            // which looks like a comma to me. ¯\_(ツ)_/¯
            ['ar-EG', '123.45678', undefined, '١٢٣٫٥'],
            ['ar-EG', '1234', undefined, '١٬٢٣٤٫٠'],
            ['ar-EG', '0.12345', 3, '٠٫١٢٣']
        ];
        // Reproduce the NumberFormats with ONLY our desired language.
        for (const [code, unformatted, maxDecimals, expected] of tests) {
            const intFormatter = new Intl.NumberFormat(code, {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
            });
            const sigFigFormatter = new Intl.NumberFormat(code, {
                minimumSignificantDigits: 4,
                maximumSignificantDigits: 4
            });
            for (const k in decimalFormatters)
                delete decimalFormatters[k]; // cleanup
            for (const k in fullPrecisionFormatters)
                delete fullPrecisionFormatters[k]; // cleanup
            const s = formatSigFigsWithFormatters(intFormatter, sigFigFormatter, parseFloatDefault(unformatted), maxDecimals, code);
            if (s !== expected)
                console.log(`TEST FAILED: f('${code}', ${unformatted}, ${maxDecimals}) => '${s}' != '${expected}'}`);
            else
                console.log(`✔️ f('${code}', ${unformatted}, ${maxDecimals}) => ${s} ✔️`);
        }
    };
    window.testFormatRateFullPrecision = () => {
        const tests = [
            // Two utxo assets with a conventional rate of 0.15. Conventional rate
            // step is 100 / 1e8 = 1e-6, so there should be 6 decimal digits.
            [1.5e7, 100, 1e8, 1e8, '0.150000'],
            // USDC quote -> utxo base with a rate of $10 / 1 XYZ. USDC has an
            // conversion factor of 1e6, so $10 encodes to 1e7, 1 XYZ encodes to 1e8,
            // encoded rate is 1e7 / 1e8 * 1e8 = 1e7, bFactor / qFactor is 1e2.
            // The conventional rate step is 200 / 1e8 * 1e2 = 2e-4, so using
            // rateStepDigits, we should get 4 decimal digits.
            [1e7, 200, 1e6, 1e8, '10.0000'],
            // Set a rate of 1 atom USDC for 0.01 BTC. That atomic rate will be 1 /
            // 1e6 = 1e-6. The encoded rate will be 1e-6 * 1e8 = 1e2. As long as our
            // rate step divides evenly into 100, this should work. The conventional
            // rate is 1e-6 / 1e-2 = 1e-4, so expect 4 decimal digits.
            [1e2, 100, 1e6, 1e8, '0.0001'],
            // DCR-ETH, expect 6 decimals.
            [1.5e7, 1000, 1e9, 1e8, '0.015000'],
            [1e6, 1000, 1e9, 1e8, '0.001000'],
            [1e3, 1000, 1e9, 1e8, '0.000001'],
            [100001000, 1000, 1e9, 1e8, '0.100001'],
            [1000001000, 1000, 1e9, 1e8, '1.000001'],
            // DCR-USDC, expect 3 decimals.
            [1.5e7, 1000, 1e6, 1e8, '15.000'],
            [1e6, 1000, 1e6, 1e8, '1.000'],
            [1e3, 1000, 1e6, 1e8, '0.001'],
            [101000, 1000, 1e6, 1e8, '0.101'],
            [1001000, 1000, 1e6, 1e8, '1.001'],
            // UTXO assets but with a rate step that's not a perfect power of 10.
            // For a rate step of 500, a min rate would be e.g. rate step = 500.
            // 5e2 / 1e8 = 5e-6 = 0.000005
            [5e2, 500, 1e8, 1e8, '0.000005']
        ];
        for (const [encRate, rateStep, qFactor, bFactor, expEncoding] of tests) {
            for (const k in fullPrecisionFormatters)
                delete fullPrecisionFormatters[k]; // cleanup
            const bui = { conventional: { conversionFactor: bFactor } };
            const qui = { conventional: { conversionFactor: qFactor } };
            const enc = Doc.formatRateFullPrecision(encRate, bui, qui, rateStep);
            if (enc !== expEncoding)
                console.log(`TEST FAILED: f(${encRate}, ${bFactor}, ${qFactor}, ${rateStep}) => ${enc} != ${expEncoding}`);
            else
                console.log(`✔️ f(${encRate}, ${bFactor}, ${qFactor}, ${rateStep}) => ${enc} ✔️`);
        }
    };
}
class NumberInput {
    constructor(input, opts) {
        var _a, _b, _c;
        this.input = input;
        this.prec = (_a = opts.prec) !== null && _a !== void 0 ? _a : 0;
        this.fmt = opts.sigFigs ? toFourSigFigs : toPrecision;
        this.changed = (_b = opts.changed) !== null && _b !== void 0 ? _b : (() => { });
        this.set = opts.set;
        this.min = (_c = opts.min) !== null && _c !== void 0 ? _c : 0;
        Doc.bind(input, 'change', () => { this.inputChanged(); });
    }
    inputChanged() {
        const { changed } = this;
        if (changed)
            changed(this.value());
    }
    setValue(v) {
        this.input.value = String(v);
        v = this.value();
        if (this.set)
            this.set(v, this.input.value);
    }
    value() {
        const { input, min, prec, fmt } = this;
        const rawV = Math.max(parseFloatDefault(input.value, min !== null && min !== void 0 ? min : 0), min !== null && min !== void 0 ? min : 0);
        const [v, s] = fmt(rawV, prec !== null && prec !== void 0 ? prec : 0);
        input.value = s;
        return v;
    }
}
class IncrementalInput extends NumberInput {
    constructor(box, opts) {
        var _a;
        super(Doc.safeSelector(box, 'input'), opts);
        this.opts = opts;
        this.inc = (_a = opts.inc) !== null && _a !== void 0 ? _a : 1;
        const up = Doc.safeSelector(box, '.ico-arrowup');
        const down = Doc.safeSelector(box, '.ico-arrowdown');
        Doc.bind(up, 'click', () => { this.increment(1); });
        Doc.bind(down, 'click', () => { this.increment(-1); });
    }
    setIncrementAndMinimum(inc, min) {
        this.inc = inc;
        this.min = min;
    }
    increment(sign) {
        const { inc, min, input } = this;
        input.value = String(Math.max(this.value() + sign * inc, min));
        this.inputChanged();
    }
}
class MiniSlider {
    constructor(box, changed) {
        this.changed = changed;
        this.r = 0;
        const color = document.createElement('div');
        color.dataset.tmpl = 'color';
        box.appendChild(color);
        const track = this.track = document.createElement('div');
        track.dataset.tmpl = 'track';
        color.appendChild(track);
        const ball = this.ball = document.createElement('div');
        ball.dataset.tmpl = 'ball';
        track.appendChild(ball);
        Doc.bind(box, 'mousedown', (e) => {
            if (e.button !== 0)
                return;
            e.preventDefault();
            e.stopPropagation();
            const startX = e.pageX;
            const w = track.clientWidth;
            const startLeft = this.r * w;
            const left = (ee) => Math.max(Math.min(startLeft + (ee.pageX - startX), w), 0);
            const trackMouse = (ee) => {
                ee.preventDefault();
                const l = left(ee);
                this.r = l / w;
                ball.style.left = `${this.r * 100}%`;
                this.changed(this.r);
            };
            const mouseUp = (ee) => {
                trackMouse(ee);
                Doc.unbind(document, 'mousemove', trackMouse);
                Doc.unbind(document, 'mouseup', mouseUp);
            };
            Doc.bind(document, 'mousemove', trackMouse);
            Doc.bind(document, 'mouseup', mouseUp);
        });
        Doc.bind(box, 'click', (e) => {
            if (e.button !== 0)
                return;
            const x = e.pageX;
            const m = Doc.layoutMetrics(track);
            this.r = clamp((x - m.bodyLeft) / m.width, 0, 1);
            ball.style.left = `${this.r * m.width}px`;
            this.changed(this.r);
        });
    }
    setValue(r) {
        this.r = clamp(r, 0, 1);
        this.ball.style.left = `${this.r * 100}%`;
    }
}
function toPrecision(v, prec) {
    const ord = Math.pow(10, prec !== null && prec !== void 0 ? prec : 0);
    v = Math.round(v * ord) / ord;
    let s = v.toFixed(prec);
    if (prec > 0) {
        while (s.endsWith('0'))
            s = s.substring(0, s.length - 1);
        if (s.endsWith('.'))
            s = s.substring(0, s.length - 1);
    }
    return [v, s];
}
function toFourSigFigs(v, maxPrec) {
    const ord = Math.floor(Math.log10(Math.abs(v)));
    if (ord >= 3)
        return [Math.round(v), v.toFixed(0)];
    const prec = Math.min(4 - ord, maxPrec);
    return toPrecision(v, prec);
}
function parseFloatDefault(inputValue, defaultValue) {
    const v = parseFloat((inputValue !== null && inputValue !== void 0 ? inputValue : '').replace(/,/g, ''));
    if (!isNaN(v))
        return v;
    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : 0;
}
/* clamp returns v if min <= v <= max, else min or max. */
function clamp(v, min, max) {
    if (v < min)
        return min;
    if (v > max)
        return max;
    return v;
}
function setupCopyBtn(txt, textEl, btnEl, color) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield navigator.clipboard.writeText(txt);
        }
        catch (err) {
            console.error('Unable to copy: ', err);
        }
        const textOriginalColor = textEl.style.color;
        const btnOriginalColor = btnEl.style.color;
        textEl.style.color = color;
        btnEl.style.color = color;
        setTimeout(() => {
            textEl.style.color = textOriginalColor;
            btnEl.style.color = btnOriginalColor;
        }, 350);
    });
}


/***/ }),

/***/ "./src/js/forms.ts":
/*!*************************!*\
  !*** ./src/js/forms.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccelerateOrderForm": () => (/* binding */ AccelerateOrderForm),
/* harmony export */   "AppPassResetForm": () => (/* binding */ AppPassResetForm),
/* harmony export */   "CEXConfigurationForm": () => (/* binding */ CEXConfigurationForm),
/* harmony export */   "CertificatePicker": () => (/* binding */ CertificatePicker),
/* harmony export */   "ConfirmRegistrationForm": () => (/* binding */ ConfirmRegistrationForm),
/* harmony export */   "DEXAddressForm": () => (/* binding */ DEXAddressForm),
/* harmony export */   "DepositAddress": () => (/* binding */ DepositAddress),
/* harmony export */   "DiscoverAccountForm": () => (/* binding */ DiscoverAccountForm),
/* harmony export */   "FeeAssetSelectionForm": () => (/* binding */ FeeAssetSelectionForm),
/* harmony export */   "Forms": () => (/* binding */ Forms),
/* harmony export */   "LoginForm": () => (/* binding */ LoginForm),
/* harmony export */   "NewWalletForm": () => (/* binding */ NewWalletForm),
/* harmony export */   "TokenApprovalForm": () => (/* binding */ TokenApprovalForm),
/* harmony export */   "WalletConfigForm": () => (/* binding */ WalletConfigForm),
/* harmony export */   "WalletWaitForm": () => (/* binding */ WalletWaitForm),
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "showSuccess": () => (/* binding */ showSuccess),
/* harmony export */   "slideSwap": () => (/* binding */ slideSwap)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _charts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./charts */ "./src/js/charts.ts");
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./account */ "./src/js/account.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _opts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./opts */ "./src/js/opts.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class Forms {
    constructor(formsDiv, cfg) {
        this.formsDiv = formsDiv;
        this.closed = cfg === null || cfg === void 0 ? void 0 : cfg.closed;
        formsDiv.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => { this.close(); });
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(formsDiv, 'mousedown', (e) => {
            if (!this.currentForm)
                return;
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                this.close();
            }
        });
        this.keyup = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'keyup', this.keyup);
    }
    /* showForm shows a modal form with a little animation. */
    show(form) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentForm = form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(...Array.from(this.formsDiv.children));
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.formsDiv, form);
            const shift = (this.formsDiv.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0';
        });
    }
    close() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.formsDiv);
        if (this.closed)
            this.closed();
        this.currentForm = undefined;
    }
    exit() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'keyup', this.keyup);
    }
}
/*
 * NewWalletForm should be used with the "newWalletForm" template. The enclosing
 * <form> element should be the first argument of the constructor.
 */
class NewWalletForm {
    constructor(form, success, backFunc) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        if (backFunc) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.goBack);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.goBack, 'click', () => { backFunc(); });
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.walletTabTmpl);
        page.walletTabTmpl.removeAttribute('id');
        // WalletConfigForm will set the global app variable.
        this.subform = new WalletConfigForm(page.walletSettings, true);
        this.walletCfgGuide = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'walletCfgGuide');
        bind(form, page.submitAdd, () => this.submit());
        bind(form, page.oneBttn, () => this.submit());
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            walletstate: (note) => { this.reportWalletState(note.wallet); },
            walletsync: (note) => { if (this.parentSyncer)
                this.parentSyncer((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().walletMap[note.assetID]); },
            createwallet: (note) => { this.reportCreationUpdate(note); }
        });
    }
    /*
     * reportWalletState should be called when a 'walletstate' notification is
     * received.
     * TODO: Let form classes register for notifications.
     */
    reportWalletState(w) {
        if (this.parentSyncer)
            this.parentSyncer(w);
    }
    /*
     * reportWalletState should be called when a 'createwallet' notification is
     * received.
     */
    reportCreationUpdate(note) {
        if (this.createUpdater)
            this.createUpdater(note);
    }
    createWallet(assetID, walletType, parentForm) {
        return __awaiter(this, void 0, void 0, function* () {
            const createForm = {
                assetID: assetID,
                pass: this.page.newWalletPass.value || '',
                config: this.subform.map(assetID),
                walletType: walletType,
                parentForm: parentForm
            };
            const ani = new _charts__WEBPACK_IMPORTED_MODULE_4__.Wave(this.form, { backgroundColor: true });
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/newwallet', createForm);
            ani.stop();
            return res;
        });
    }
    submit() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const newWalletPass = page.newWalletPass;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.newWalletErr);
            const { asset, parentAsset } = this.current;
            const selectedDef = this.current.selectedDef;
            let parentForm;
            let walletType = selectedDef.type;
            if (parentAsset) {
                walletType = asset.token.definition.type;
                parentForm = {
                    assetID: parentAsset.id,
                    config: this.subform.map(parentAsset.id),
                    walletType: selectedDef.type
                };
            }
            // Register the selected asset.
            const res = yield this.createWallet(asset.id, walletType, parentForm);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                this.setError(res.msg);
                return;
            }
            newWalletPass.value = '';
            if (parentAsset)
                yield this.runParentSync();
            else
                this.success(this.current.asset.id);
        });
    }
    /*
     * runParentSync shows a syncing sub-dialog that tracks the parent asset's
     * syncProgress and informs the user that the token wallet will be created
     * after sync is complete.
     */
    runParentSync() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, current: { parentAsset, asset } } = this;
            if (!parentAsset)
                return;
            page.parentSyncPct.textContent = '0';
            page.parentName.textContent = parentAsset.name;
            page.parentLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
            page.childName.textContent = asset.name;
            page.childLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(asset.symbol);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mainForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.parentSyncing);
            try {
                yield this.syncParent(parentAsset);
                this.success(this.current.asset.id);
            }
            catch (error) {
                this.setError(error.message || error);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mainForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.parentSyncing);
        });
    }
    /*
     * syncParent monitors the sync progress of a token's parent asset, generating
     * an Error if the token wallet creation does not complete successfully.
     */
    syncParent(parentAsset) {
        const { page, current: { asset } } = this;
        return new Promise((resolve, reject) => {
            // First, check if it's already synced.
            const w = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[parentAsset.id].wallet;
            if (w && w.synced)
                return resolve();
            // Not synced, so create a syncer to update the parent sync pane.
            this.parentSyncer = (w) => {
                if (w.assetID !== parentAsset.id)
                    return;
                page.parentSyncPct.textContent = (w.syncProgress * 100).toFixed(1);
            };
            // Handle the async result.
            this.createUpdater = (note) => {
                if (note.assetID !== asset.id)
                    return;
                switch (note.topic) {
                    case 'QueuedCreationFailed':
                        reject(new Error(`${note.subject}: ${note.details}`));
                        break;
                    case 'QueuedCreationSuccess':
                        resolve();
                        break;
                    default:
                        return;
                }
                this.parentSyncer = null;
                this.createUpdater = null;
            };
        });
    }
    /* setAsset sets the current asset of the NewWalletForm */
    setAsset(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.parseAsset(assetID))
                return; // nothing to change
            const page = this.page;
            const tabs = page.walletTypeTabs;
            const { winfo, asset, parentAsset } = this.current;
            page.assetName.textContent = winfo.name;
            page.newWalletPass.value = '';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tabs);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tabs, page.newWalletErr, page.tokenMsgBox);
            this.page.assetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(asset.symbol);
            if (parentAsset) {
                page.tokenParentLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
                page.tokenParentName.textContent = parentAsset.name;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.tokenMsgBox);
            }
            const pinfo = parentAsset ? parentAsset.info : null;
            const walletDefs = pinfo ? pinfo.availablewallets : winfo.availablewallets ? winfo.availablewallets : [winfo.definition];
            if (walletDefs.length > 1) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tabs);
                for (const wDef of walletDefs) {
                    const tab = page.walletTabTmpl.cloneNode(true);
                    tab.dataset.tooltip = wDef.description;
                    tab.textContent = wDef.tab;
                    tabs.appendChild(tab);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tab, 'click', () => {
                        for (const t of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].kids(tabs))
                            t.classList.remove('selected');
                        tab.classList.add('selected');
                        this.update(wDef);
                    });
                }
                (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().bindTooltips(tabs);
                const first = tabs.firstChild;
                first.classList.add('selected');
            }
            yield this.update(this.current.selectedDef);
            if (asset.walletCreationPending)
                yield this.runParentSync();
        });
    }
    /*
    * parseAsset parses the current data for the asset ID.
    */
    parseAsset(assetID) {
        if (this.current && this.current.asset.id === assetID)
            return false;
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
        const token = asset.token;
        if (!token) {
            if (!asset.info)
                throw Error('this non-token asset has no wallet info!');
            this.current = { asset, winfo: asset.info, selectedDef: asset.info.availablewallets[0] };
            return true;
        }
        const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().user.assets[token.parentID];
        if (parentAsset.wallet) {
            // If the parent asset already has a wallet, there's no need to configure
            // the parent too. Just configure the token.
            this.current = { asset, winfo: token, selectedDef: token.definition };
            return true;
        }
        if (!parentAsset.info)
            throw Error('this parent has no wallet info!');
        this.current = { asset, parentAsset, winfo: token, selectedDef: parentAsset.info.availablewallets[0] };
        return true;
    }
    update(walletDef) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.current.selectedDef = walletDef;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.walletPassAndSubmitBttn, page.oneBttnBox, page.newWalletPassBox);
            const guideLink = walletDef.guidelink;
            const configOpts = walletDef.configopts || [];
            // If a config represents a wallet's birthday, we update the default
            // selection to the current date if this installation of the client
            // generated a seed.
            configOpts.map((opt) => {
                if (opt.isBirthdayConfig && (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().seedGenTime > 0) {
                    opt.default = toUnixDate(new Date());
                }
                return opt;
            });
            // Either this is a walletDef for a token's uncreated parent asset, or this
            // is the definition for the token.
            let containsRequired = false;
            for (const opt of configOpts) {
                if (opt.required) {
                    containsRequired = true;
                    break;
                }
            }
            const { asset, parentAsset, winfo } = this.current;
            const displayCreateBtn = walletDef.seeded || Boolean(asset.token);
            if (displayCreateBtn && !containsRequired) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.walletSettingsHeader);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.oneBttnBox);
            }
            else if (displayCreateBtn) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.walletPassAndSubmitBttn, page.walletSettingsHeader);
                page.newWalletPass.value = '';
                page.submitAdd.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_CREATE);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.walletPassAndSubmitBttn, page.walletSettingsHeader);
                if (!walletDef.noauth)
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.newWalletPassBox);
                page.submitAdd.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ADD);
            }
            if (parentAsset) {
                const parentAndTokenOpts = JSON.parse(JSON.stringify(configOpts));
                // Add the regAsset field to the configurations so proper logos will be displayed
                // next to them, and map can filter them out. The opts are copied here so the originals
                // do not have the regAsset field added to them.
                for (const opt of parentAndTokenOpts)
                    opt.regAsset = parentAsset.id;
                const tokenOpts = winfo.definition.configopts || [];
                if (tokenOpts.length > 0) {
                    const tokenOptsCopy = JSON.parse(JSON.stringify(tokenOpts));
                    for (const opt of tokenOptsCopy)
                        opt.regAsset = asset.id;
                    parentAndTokenOpts.push(...tokenOptsCopy);
                }
                this.subform.update(asset.id, parentAndTokenOpts, false);
            }
            else
                this.subform.update(asset.id, configOpts, false);
            this.setGuideLink(guideLink);
            // A seeded or token wallet is internal to Bison Wallet and as such does
            // not have an external config file to select.
            if (walletDef.seeded || Boolean(this.current.asset.token))
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.subform.fileSelector);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.subform.fileSelector);
            yield this.loadDefaults();
        });
    }
    setGuideLink(guideLink) {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.walletCfgGuide);
        if (guideLink !== '') {
            this.walletCfgGuide.href = guideLink;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.walletCfgGuide);
        }
    }
    /* setError sets and shows the in-form error message. */
    setError(errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.page.newWalletErr.textContent = errMsg;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.newWalletErr);
        });
    }
    /*
     * loadDefaults attempts to load the ExchangeWallet configuration from the
     * default wallet config path on the server and will auto-fill the page on
     * the subform if settings are found.
     */
    loadDefaults() {
        return __awaiter(this, void 0, void 0, function* () {
            // No default config files for seeded assets right now.
            const { asset, parentAsset, selectedDef } = this.current;
            if (!selectedDef.configpath)
                return;
            let configID = asset.id;
            if (parentAsset) {
                if (selectedDef.seeded)
                    return;
                configID = parentAsset.id;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/defaultwalletcfg', {
                assetID: configID,
                type: selectedDef.type
            });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                this.setError(res.msg);
                return;
            }
            this.subform.setLoadedConfig(res.config);
        });
    }
}
let dynamicInputCounter = 0;
/*
 * WalletConfigForm is a dynamically generated sub-form for setting
 * asset-specific wallet configuration options.
*/
class WalletConfigForm {
    constructor(form, sectionize) {
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        this.form = form;
        // A configElement is a div containing an input and its label.
        this.configElements = [];
        // configOpts is the wallet options provided by core.
        this.configOpts = [];
        this.sectionize = sectionize;
        // Get template elements
        this.allSettings = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'allSettings');
        this.dynamicOpts = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'dynamicOpts');
        this.textInputTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'textInput');
        this.textInputTmpl.remove();
        this.dateInputTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'dateInput');
        this.dateInputTmpl.remove();
        this.checkboxTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'checkbox');
        this.checkboxTmpl.remove();
        this.repeatableTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'repeatableInput');
        this.repeatableTmpl.remove();
        this.fileSelector = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'fileSelector');
        this.fileInput = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'fileInput');
        this.errMsg = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'errMsg');
        this.showOther = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'showOther');
        this.showIcon = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'showIcon');
        this.hideIcon = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'hideIcon');
        this.showHideMsg = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'showHideMsg');
        this.otherSettings = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'otherSettings');
        this.loadedSettingsMsg = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'loadedSettingsMsg');
        this.loadedSettings = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'loadedSettings');
        this.defaultSettingsMsg = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'defaultSettingsMsg');
        this.defaultSettings = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(form, 'defaultSettings');
        if (!sectionize)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.showOther);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.fileSelector, 'click', () => this.fileInput.click());
        // config file upload
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.fileInput, 'change', () => __awaiter(this, void 0, void 0, function* () { return this.fileInputChanged(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.showOther, 'click', () => {
            this.setOtherSettingsViz(this.hideIcon.classList.contains('d-hide'));
        });
    }
    /*
     * fileInputChanged will read the selected file and attempt to load the
     * configuration settings. All loaded settings will be made visible for
     * inspection by the user.
     */
    fileInputChanged() {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.errMsg);
            if (!this.fileInput.value)
                return;
            const files = this.fileInput.files;
            if (!files || files.length === 0)
                return;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const config = yield files[0].text();
            if (!config)
                return;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/parseconfig', {
                configtext: config
            });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                this.errMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.errMsg);
                return;
            }
            if (Object.keys(res.map).length === 0)
                return;
            this.dynamicOpts.append(...this.setConfig(res.map));
            this.reorder(this.dynamicOpts);
            const [loadedOpts, defaultOpts] = [this.loadedSettings.children.length, this.defaultSettings.children.length];
            if (loadedOpts === 0)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.loadedSettings, this.loadedSettingsMsg);
            if (defaultOpts === 0)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.defaultSettings, this.defaultSettingsMsg);
            if (loadedOpts + defaultOpts === 0)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.showOther, this.otherSettings);
        });
    }
    addOpt(box, opt, insertAfter, skipRepeatN) {
        var _a;
        let el;
        if (opt.isboolean)
            el = this.checkboxTmpl.cloneNode(true);
        else if (opt.isdate)
            el = this.dateInputTmpl.cloneNode(true);
        else if (opt.repeatable) {
            el = this.repeatableTmpl.cloneNode(true);
            el.classList.add('repeatable');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(el, 'add'), 'click', () => {
                this.addOpt(box, opt, el, true);
            });
            if (!skipRepeatN)
                for (let i = 0; i < (opt.repeatN ? opt.repeatN - 1 : 0); i++)
                    this.addOpt(box, opt, insertAfter, true);
        }
        else
            el = this.textInputTmpl.cloneNode(true);
        const hiddenFields = ((_a = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().extensionWallet(this.assetID)) === null || _a === void 0 ? void 0 : _a.hiddenFields) || [];
        if (hiddenFields.indexOf(opt.key) !== -1)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(el);
        this.configElements.push([opt, el]);
        const input = el.querySelector('input');
        input.dataset.configKey = opt.key;
        // We need to generate a unique ID only for the <input id> => <label for>
        // matching.
        dynamicInputCounter++;
        const elID = 'wcfg-' + String(dynamicInputCounter);
        input.id = elID;
        const label = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'label');
        label.htmlFor = elID; // 'for' attribute, but 'for' is a keyword
        label.prepend(opt.displayname);
        if (opt.regAsset !== undefined) {
            const logo = new window.Image(15, 15);
            logo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(opt.regAsset || -1);
            label.prepend(logo);
        }
        if (insertAfter)
            insertAfter.after(el);
        else
            box.appendChild(el);
        if (opt.noecho) {
            input.type = 'password';
            input.autocomplete = 'off';
        }
        if (opt.description)
            label.dataset.tooltip = opt.description;
        if (opt.isboolean)
            input.checked = opt.default;
        else if (opt.isdate) {
            const getMinMaxVal = (minMax) => {
                if (!minMax)
                    return '';
                if (minMax === 'now')
                    return dateToString(new Date());
                return dateToString(new Date(minMax * 1000));
            };
            input.max = getMinMaxVal(opt.max);
            input.min = getMinMaxVal(opt.min);
            const date = opt.default ? new Date(opt.default * 1000) : new Date();
            // UI shows Dates in valueAsDate as UTC, but user interprets local. Set a
            // local date string so the UI displays what the user expects. alt:
            // input.valueAsDate = dateApplyOffset(date)
            input.value = dateToString(date);
        }
        else
            input.value = opt.default !== null ? opt.default : '';
        input.disabled = Boolean(opt.disablewhenactive && this.assetHasActiveOrders);
        return el;
    }
    /*
     * update creates the dynamic form.
     */
    update(assetID, configOpts, activeOrders) {
        this.assetHasActiveOrders = activeOrders;
        this.configElements = [];
        this.configOpts = configOpts || [];
        this.assetID = assetID;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.dynamicOpts, this.defaultSettings, this.loadedSettings);
        // If there are no options, just hide the entire form.
        if (this.configOpts.length === 0)
            return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.form);
        this.setOtherSettingsViz(false);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.loadedSettingsMsg, this.loadedSettings, this.defaultSettingsMsg, this.defaultSettings, this.errMsg);
        const defaultedOpts = [];
        for (const opt of this.configOpts) {
            if (this.sectionize && opt.default !== null)
                defaultedOpts.push(opt);
            else
                this.addOpt(this.dynamicOpts, opt);
        }
        if (defaultedOpts.length) {
            for (const opt of defaultedOpts)
                this.addOpt(this.defaultSettings, opt);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.showOther, this.defaultSettingsMsg, this.defaultSettings);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.showOther);
        }
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().bindTooltips(this.allSettings);
        if (this.dynamicOpts.children.length)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.dynamicOpts);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.dynamicOpts);
    }
    /*
     * setOtherSettingsViz sets the visibility of the additional settings section.
     */
    setOtherSettingsViz(visible) {
        if (visible) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.showIcon);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.hideIcon, this.otherSettings);
            this.showHideMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_HIDE_ADDITIONAL_SETTINGS);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.hideIcon, this.otherSettings);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.showIcon);
        this.showHideMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_SHOW_ADDITIONAL_SETTINGS);
    }
    /*
     * setConfig looks for inputs with configOpt keys matching the cfg object, and
     * sets the inputs value to the corresponding cfg value. A list of matching
     * configElements is returned.
     */
    setConfig(cfg) {
        const finds = [];
        const handledRepeatables = {};
        const removes = [];
        for (const r of [...this.configElements]) {
            const [opt, el] = r;
            const v = cfg[opt.key];
            if (v === undefined)
                continue;
            if (opt.repeatable) {
                if (handledRepeatables[opt.key]) {
                    el.remove();
                    removes.push(r);
                    continue;
                }
                handledRepeatables[opt.key] = true;
                const vals = v.split(opt.repeatable);
                const firstVal = vals[0];
                finds.push(el);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'input').value = firstVal;
                // Add repeatN - 1 empty elements to the reconfig form. Add them before
                // the populated inputs just because of the way we're using the
                // insertAfter argument to addOpt.
                for (let i = 1; i < (opt.repeatN || 1); i++)
                    finds.push(this.addOpt(el.parentElement, opt, el, true));
                for (let i = 1; i < vals.length; i++) {
                    const newEl = this.addOpt(el.parentElement, opt, el, true);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(newEl, 'input').value = vals[i];
                    finds.push(newEl);
                }
                continue;
            }
            finds.push(el);
            const input = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'input');
            if (opt.isboolean)
                input.checked = isTruthyString(v);
            else if (opt.isdate) {
                input.value = dateToString(new Date(parseInt(v) * 1000));
                // alt: input.valueAsDate = dateApplyOffset(...)
            }
            else
                input.value = v;
        }
        for (const r of removes) {
            const i = this.configElements.indexOf(r);
            if (i >= 0)
                this.configElements.splice(i, 1);
        }
        return finds;
    }
    /*
     * setLoadedConfig sets the input values for the entries in cfg, and moves
     * them to the loadedSettings box.
     */
    setLoadedConfig(cfg) {
        const finds = this.setConfig(cfg);
        if (!this.sectionize || finds.length === 0)
            return;
        this.loadedSettings.append(...finds);
        this.reorder(this.loadedSettings);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.loadedSettings, this.loadedSettingsMsg);
        if (this.defaultSettings.children.length === 0)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.defaultSettings, this.defaultSettingsMsg);
    }
    /*
     * map reads all inputs and constructs an object from the configOpt keys and
     * values.
     */
    map(assetID) {
        const config = {};
        for (const [opt, el] of this.configElements) {
            const input = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(el, 'input');
            if (opt.regAsset !== undefined && opt.regAsset !== assetID)
                continue;
            if (opt.isboolean && opt.key) {
                config[opt.key] = input.checked ? '1' : '0';
            }
            else if (opt.isdate && opt.key) {
                // Force local time interpretation by appending a time to the date
                // string, otherwise the Date constructor considers it UTC.
                const minDate = input.min ? toUnixDate(new Date(input.min + 'T00:00')) : Number.MIN_SAFE_INTEGER;
                const maxDate = input.max ? toUnixDate(new Date(input.max + 'T00:00')) : Number.MAX_SAFE_INTEGER;
                let date = input.value ? toUnixDate(new Date(input.value + 'T00:00')) : 0;
                if (date < minDate)
                    date = minDate;
                else if (date > maxDate)
                    date = maxDate;
                config[opt.key] = String(date);
            }
            else if (input.value) {
                if (opt.repeatable && config[opt.key])
                    config[opt.key] += opt.repeatable + input.value;
                else
                    config[opt.key] = input.value;
            }
        }
        return config;
    }
    /*
     * reorder sorts the configElements in the box by the order of the
     * server-provided configOpts array.
     */
    reorder(box) {
        const inputs = {};
        box.querySelectorAll('input').forEach((input) => {
            const k = input.dataset.configKey;
            if (!k)
                return; // TS2538
            const els = [];
            for (const [opt, el] of this.configElements)
                if (opt.key === k)
                    els.push(el);
            inputs[k] = els;
        });
        for (const opt of this.configOpts) {
            const els = inputs[opt.key] || [];
            for (const el of els)
                box.append(el);
        }
    }
}
/*
 * ConfirmRegistrationForm should be used with the "confirmRegistrationForm"
 * template.
 */
class ConfirmRegistrationForm {
    constructor(form, success, goBack) {
        this.form = form;
        this.success = success;
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        this.certFile = '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.page.goBack, 'click', () => goBack());
        bind(form, this.page.submit, () => this.submitForm());
    }
    setExchange(xc, certFile) {
        this.xc = xc;
        this.certFile = certFile;
        this.page.host.textContent = xc.host;
    }
    setAsset(assetID, tier, fees) {
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
        const { conversionFactor, unit } = asset.unitInfo.conventional;
        this.bondAssetID = asset.id;
        this.tier = tier;
        this.fees = fees;
        const page = this.page;
        const bondAsset = this.xc.bondAssets[asset.symbol];
        const bondLock = bondAsset.amount * tier * _account__WEBPACK_IMPORTED_MODULE_5__.bondReserveMultiplier;
        const bondLockConventional = bondLock / conversionFactor;
        page.tradingTier.textContent = String(tier);
        page.logo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(asset.symbol);
        page.bondLock.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondLockConventional);
        page.bondUnit.textContent = unit;
        const r = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[assetID];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.bondLockUSDBox);
        if (r)
            page.bondLockUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondLockConventional * r);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.bondLockUSDBox);
        if (fees)
            page.feeReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(fees / conversionFactor);
        page.reservesUnit.textContent = unit;
    }
    setFees(assetID, fees) {
        this.fees = fees;
        const conversionFactor = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID].unitInfo.conventional.conversionFactor;
        this.page.feeReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(fees / conversionFactor);
    }
    /* Form expands into its space quickly from the lower-right as it fades in. */
    animate() {
        return __awaiter(this, void 0, void 0, function* () {
            const form = this.form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(400, prog => {
                form.style.transform = `scale(${prog})`;
                form.style.opacity = String(Math.pow(prog, 4));
                const offset = `${(1 - prog) * 500}px`;
                form.style.top = offset;
                form.style.left = offset;
            });
        });
    }
    /*
     * submitForm is called when the form is submitted.
     */
    submitForm() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, bondAssetID, xc, certFile, tier } = this;
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[bondAssetID];
            if (!asset) {
                page.regErr.innerText = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_SELECT_WALLET_FOR_FEE_PAYMENT);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.regErr);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.regErr);
            const bondAsset = xc.bondAssets[asset.wallet.symbol];
            const dexAddr = xc.host;
            let form;
            let url;
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[xc.host] || (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[xc.host].viewOnly) {
                form = {
                    addr: dexAddr,
                    cert: certFile,
                    bond: bondAsset.amount * tier,
                    asset: bondAsset.id
                };
                url = '/api/postbond';
            }
            else {
                form = {
                    host: dexAddr,
                    targetTier: tier,
                    bondAssetID: bondAssetID
                };
                url = '/api/updatebondoptions';
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)(url, form);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.regErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.regErr);
                return;
            }
            this.success();
        });
    }
}
/*
 * FeeAssetSelectionForm should be used with the "regAssetForm" template.
 */
class FeeAssetSelectionForm {
    constructor(form, success) {
        this.form = form;
        this.certFile = '';
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.currentBondTmpl, page.bondAssetTmpl, page.marketTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.tradingTierInput, 'input', () => { this.setTier(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.tradingTierInput, 'keyup', (e) => { if (e.key === 'Enter')
            this.acceptTier(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.submitTradingTier, 'click', () => { this.acceptTier(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.tierUp, 'click', () => { this.incrementTier(true); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.tierDown, 'click', () => { this.incrementTier(false); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.goBackToAssets, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.tradingTierForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.assetForm);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.whatsABond, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.assetForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.whatsABondPanel);
        });
        const hideWhatsABond = () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.assetForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.whatsABondPanel);
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.bondGotIt, 'click', () => { hideWhatsABond(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.whatsABondBack, 'click', () => { hideWhatsABond(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.usePrepaidBond, 'click', () => { this.showPrepaidBondForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.ppbGoBack, 'click', () => { this.hidePrepaidBondForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.submitPrepaidBond, 'click', () => { this.submitPrepaidBond(); });
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            createwallet: (note) => {
                if (note.topic === 'QueuedCreationSuccess')
                    this.walletCreated(note.assetID);
            }
        });
    }
    setTierError(errMsg) {
        this.page.tradingTierErr.textContent = errMsg;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.tradingTierErr);
    }
    setAssetError(errMsg) {
        this.page.regAssetErr.textContent = errMsg;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.regAssetErr);
    }
    clearErrors() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.regAssetErr, this.page.tradingTierErr);
    }
    setExchange(xc, certFile) {
        this.xc = xc;
        this.certFile = certFile;
        this.assetRows = {};
        this.marketRows = [];
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.assetForm, page.tradingTierForm, page.whatsABondPanel, page.prepaidBonds);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.bondAssets, page.markets);
        this.clearErrors();
        const addBondRow = (assetID, bondAsset) => {
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            if (!asset)
                return;
            const { unitInfo: { conventional: { unit, conversionFactor } }, name, symbol } = asset;
            const tr = page.bondAssetTmpl.cloneNode(true);
            page.bondAssets.appendChild(tr);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tr);
            tmpl.logo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
            tmpl.name.textContent = name;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tr, 'click', () => { this.assetSelected(assetID); });
            tmpl.feeSymbol.textContent = unit;
            const bondSizeConventional = bondAsset.amount / conversionFactor;
            tmpl.feeAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondSizeConventional);
            const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[assetID];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(fiatRate, tmpl.fiatBox);
            if (fiatRate)
                tmpl.fiatBondAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondSizeConventional * fiatRate);
            this.assetRows[assetID] = { ready: tmpl.ready };
        };
        const addMarketRow = (mkt) => {
            const { baseid: baseID, quoteid: quoteID } = mkt;
            const [b, q] = [(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[quoteID]];
            if (!b || !q)
                return;
            const tr = page.marketTmpl.cloneNode(true);
            page.markets.appendChild(tr);
            const { symbol: baseSymbol, unitInfo: bui } = xc.assets[baseID];
            const { symbol: quoteSymbol, unitInfo: qui } = xc.assets[quoteID];
            for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(tr, '[data-base-ticker]'))
                el.textContent = bui.conventional.unit;
            for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(tr, '[data-quote-ticker]'))
                el.textContent = qui.conventional.unit;
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tr);
            tmpl.baseLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(baseSymbol);
            tmpl.quoteLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(quoteSymbol);
            const setTier = (tier) => {
                const { parcelsize: parcelSize, lotsize: lotSize } = mkt;
                const conventionalLotSize = lotSize / bui.conventional.conversionFactor;
                const startingLimit = conventionalLotSize * parcelSize * _account__WEBPACK_IMPORTED_MODULE_5__.perTierBaseParcelLimit * tier;
                const privilegedLimit = conventionalLotSize * parcelSize * _account__WEBPACK_IMPORTED_MODULE_5__.perTierBaseParcelLimit * _account__WEBPACK_IMPORTED_MODULE_5__.parcelLimitScoreMultiplier * tier;
                tmpl.tradeLimitLow.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(startingLimit);
                tmpl.tradeLimitHigh.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(privilegedLimit);
                const baseFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[baseID];
                if (baseFiatRate) {
                    tmpl.fiatTradeLimitLow.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(startingLimit * baseFiatRate);
                    tmpl.fiatTradeLimitHigh.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(privilegedLimit * baseFiatRate);
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(baseFiatRate, page.fiatTradeLowBox, page.fiatTradeHighBox);
            };
            setTier((0,_account__WEBPACK_IMPORTED_MODULE_5__.strongTier)(xc.auth) || 1);
            this.marketRows.push({ mkt, tmpl, setTier });
        };
        for (const { symbol, id: assetID } of Object.values(xc.assets || {})) {
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID])
                continue;
            const bondAsset = xc.bondAssets[symbol];
            if (bondAsset)
                addBondRow(assetID, bondAsset);
        }
        for (const mkt of Object.values(xc.markets || {}))
            addMarketRow(mkt);
        // page.host.textContent = xc.host
        page.tradingTierInput.value = xc.auth.targetTier ? String(xc.auth.targetTier) : '1';
        if (this.validBondAssetSelected(xc))
            this.assetSelected(xc.auth.bondAssetID);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.assetForm);
    }
    validBondAssetSelected(xc) {
        if (xc.viewOnly)
            return false;
        const { targetTier, bondAssetID } = xc.auth;
        if (targetTier < 1)
            return false;
        const a = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[bondAssetID];
        return a && Boolean(xc.bondAssets[a.symbol]);
    }
    /*
     * walletCreated should be called when an asynchronous wallet creation
     * completes successfully.
     */
    walletCreated(assetID) {
        const a = this.assetRows[assetID];
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
        setReadyMessage(a.ready, asset);
    }
    refresh() {
        this.setExchange(this.xc, this.certFile);
    }
    assetSelected(assetID) {
        this.selectedAssetID = assetID;
        this.setTier();
        const { page: { assetForm, tradingTierForm, tradingTierInput } } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(assetForm);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tradingTierForm);
        tradingTierInput.focus();
    }
    setTier() {
        var _a;
        const { page, xc: { bondAssets }, selectedAssetID: assetID } = this;
        const { symbol, unitInfo: ui } = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
        const { conventional: { conversionFactor, unit } } = ui;
        const bondAsset = bondAssets[symbol];
        const raw = (_a = page.tradingTierInput.value) !== null && _a !== void 0 ? _a : '';
        if (!raw)
            return;
        const tier = parseInt(raw);
        if (isNaN(tier)) {
            this.setTierError(_locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_INVALID_TIER_VALUE));
            return;
        }
        page.tradingTierInput.value = String(tier);
        page.bondSizeDisplay.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondAsset.amount, ui);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.tradingTierForm, '[data-tier]'))
            el.textContent = String(tier);
        for (const el of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.tradingTierForm, '[data-bond-asset-ticker]'))
            el.textContent = unit;
        const bondLock = bondAsset.amount * tier * _account__WEBPACK_IMPORTED_MODULE_5__.bondReserveMultiplier;
        page.bondLockDisplay.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondLock, ui);
        const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[assetID];
        if (fiatRate)
            page.fiatLockDisplay.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondLock / conversionFactor * fiatRate);
        for (const m of Object.values(this.marketRows))
            m.setTier(tier);
        const currentBondAmts = {};
        for (const [assetIDStr, { wallet }] of Object.entries((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets)) {
            if (!wallet)
                continue;
            const { balance: { bondlocked, bondReserves } } = wallet;
            const bonded = bondlocked + bondReserves;
            if (bonded > 0)
                currentBondAmts[parseInt(assetIDStr)] = bonded;
        }
        const haveLock = Object.keys(currentBondAmts).length > 0;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(haveLock, page.currentBondBox);
        if (haveLock) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.currentBonds);
            for (const [assetIDStr, bondLocked] of Object.entries(currentBondAmts)) {
                const assetID = parseInt(assetIDStr);
                const { unitInfo: ui, symbol, name } = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
                const { conventional: { conversionFactor, unit } } = ui;
                const tr = page.currentBondTmpl.cloneNode(true);
                page.currentBonds.appendChild(tr);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tr);
                tmpl.icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
                tmpl.name.textContent = name;
                tmpl.amt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondLocked, ui);
                tmpl.ticker.textContent = unit;
                tmpl.name.textContent = name;
                const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[assetID];
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tmpl.fiatBox);
                if (fiatRate)
                    tmpl.fiatAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bondLocked / conversionFactor * fiatRate);
            }
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(fiatRate, page.fiatLockBox);
    }
    acceptTier() {
        var _a;
        const { page, selectedAssetID: assetID } = this;
        this.clearErrors();
        const raw = (_a = page.tradingTierInput.value) !== null && _a !== void 0 ? _a : '';
        if (!raw)
            return;
        const tier = parseInt(raw);
        if (isNaN(tier)) {
            this.setTierError(_locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_INVALID_TIER_VALUE));
            return;
        }
        this.success(assetID, tier);
    }
    incrementTier(up) {
        var _a;
        const { page: { tradingTierInput: input } } = this;
        input.value = String(Math.max(1, (parseInt((_a = input.value) !== null && _a !== void 0 ? _a : '') || 1) + (up ? 1 : -1)));
        this.setTier();
    }
    /*
     * Animation to make the elements sort of expand into their space from the
     * bottom as they fade in.
     */
    animate() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, form } = this;
            const extraMargin = 75;
            const extraTop = 50;
            const regAssetElements = Array.from(page.bondAssets.children);
            form.style.opacity = '0';
            const aniLen = 350;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(aniLen, prog => {
                for (const el of regAssetElements) {
                    el.style.marginTop = `${(1 - prog) * extraMargin}px`;
                    el.style.transform = `scale(${prog})`;
                }
                form.style.opacity = Math.pow(prog, 4).toFixed(1);
                form.style.top = `${(1 - prog) * extraTop}px`;
            }, 'easeOut');
        });
    }
    showPrepaidBondForm() {
        const { page } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.assetForm, page.prepaidBondErr);
        page.prepaidBondCode.value = '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.prepaidBonds);
    }
    hidePrepaidBondForm() {
        const { page } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.prepaidBonds);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.assetForm);
    }
    submitPrepaidBond() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, xc: { host } } = this;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.prepaidBondErr);
            const code = page.prepaidBondCode.value;
            if (!code) {
                page.prepaidBondErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_INVALID_VALUE);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.prepaidBondErr);
                return;
            }
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/redeemprepaidbond', { host, code, cert: this.certFile });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.prepaidBondErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.prepaidBondErr);
                return;
            }
            this.success(_registry__WEBPACK_IMPORTED_MODULE_6__.PrepaidBondID, res.tier);
        });
    }
}
/*
 * setReadyMessage sets an asset's status message on the FeeAssetSelectionForm.
 */
function setReadyMessage(el, asset) {
    if (asset.wallet)
        el.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_WALLET_READY);
    else if (asset.walletCreationPending)
        el.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_WALLET_PENDING);
    else
        el.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_SETUP_NEEDED);
    el.classList.remove('readygreen', 'setuporange');
    el.classList.add(asset.wallet ? 'readygreen' : 'setuporange');
}
/*
 * WalletWaitForm is a form used to track the wallet sync status and balance
 * in preparation for posting a bond.
 */
class WalletWaitForm {
    constructor(form, success, goBack) {
        this.form = form;
        this.success = success;
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        this.assetID = -1;
        this.progressCache = [];
        this.progressed = false;
        this.funded = false;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.page.goBack, 'click', () => {
            this.assetID = -1;
            goBack();
        });
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            walletstate: (note) => this.reportWalletState(note.wallet),
            walletsync: (note) => {
                if (note.assetID !== this.assetID)
                    return;
                const w = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().walletMap[note.assetID];
                this.reportProgress(w.synced, w.syncProgress);
            },
            balance: (note) => this.reportBalance(note.assetID)
        });
    }
    /* setExchange sets the exchange for which the fee is being paid. */
    setExchange(xc) {
        this.xc = xc;
    }
    /* setWallet must be called before showing the WalletWaitForm. */
    setWallet(assetID, bondFeeBuffer, tier) {
        this.assetID = assetID;
        this.progressCache = [];
        this.progressed = false;
        this.funded = false;
        this.bondFeeBuffer = bondFeeBuffer; // in case we're a token, parent's balance must cover
        this.parentAssetSynced = false;
        const page = this.page;
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
        const { symbol, unitInfo: ui, wallet: { balance: bal, address, synced, syncProgress }, token } = asset;
        this.parentID = token === null || token === void 0 ? void 0 : token.parentID;
        const bondAsset = this.bondAsset = this.xc.bondAssets[symbol];
        const symbolize = (el, asset) => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(el);
            el.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(asset));
        };
        for (const span of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(this.form, '.unit'))
            symbolize(span, asset);
        page.logo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
        page.depoAddr.textContent = address;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncUncheck, page.syncCheck, page.balUncheck, page.balCheck, page.syncRemainBox, page.bondCostBreakdown);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.balanceBox);
        let bondLock = 2 * bondAsset.amount * tier;
        if (bondFeeBuffer > 0) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.bondCostBreakdown);
            page.bondLockNoFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondLock, ui);
            page.bondLockFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondFeeBuffer, ui);
            bondLock += bondFeeBuffer;
            const need = Math.max(bondLock - bal.available + bal.reservesDeficit, 0);
            page.totalForBond.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(need, ui);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.sendEnough); // generic msg when no fee info available when
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txFeeBox, page.sendEnoughForToken, page.txFeeBalanceBox); // for tokens
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.sendEnoughWithEst); // non-tokens
            if (token) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txFeeBox, page.sendEnoughForToken, page.txFeeBalanceBox);
                const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[token.parentID];
                page.txFee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondFeeBuffer, parentAsset.unitInfo);
                page.parentFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondFeeBuffer, parentAsset.unitInfo);
                page.tokenFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(need, ui);
                symbolize(page.txFeeUnit, parentAsset);
                symbolize(page.parentUnit, parentAsset);
                symbolize(page.parentBalUnit, parentAsset);
                page.parentBal.textContent = parentAsset.wallet ? _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(parentAsset.wallet.balance.available, parentAsset.unitInfo) : '0';
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.sendEnoughWithEst);
            }
            page.fee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bondLock, ui);
        }
        else { // show some generic message with no amounts, this shouldn't happen... show wallet error?
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.sendEnough);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(synced ? page.syncCheck : syncProgress >= 1 ? page.syncSpinner : page.syncUncheck);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(bal.available >= 2 * bondAsset.amount + bondFeeBuffer ? page.balCheck : page.balUncheck);
        page.progress.textContent = (syncProgress * 100).toFixed(1);
        if (synced) {
            this.progressed = true;
        }
        this.reportBalance(assetID);
    }
    /*
     * reportWalletState sets the progress and balance, ultimately calling the
     * success function if conditions are met.
     */
    reportWalletState(wallet) {
        if (this.progressed && this.funded)
            return;
        if (wallet.assetID === this.assetID)
            this.reportProgress(wallet.synced, wallet.syncProgress);
        this.reportBalance(wallet.assetID);
    }
    /*
     * reportBalance sets the balance display and calls success if we go over the
     * threshold.
     */
    reportBalance(assetID) {
        if (this.funded || this.assetID === -1)
            return;
        if (assetID !== this.assetID && assetID !== this.parentID)
            return;
        const page = this.page;
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[this.assetID];
        const avail = asset.wallet.balance.available;
        page.balance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(avail, asset.unitInfo);
        if (asset.token) {
            const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[asset.token.parentID];
            const parentAvail = parentAsset.wallet.balance.available;
            page.parentBal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(parentAvail, parentAsset.unitInfo);
            if (parentAvail < this.bondFeeBuffer)
                return;
        }
        // NOTE: when/if we allow one-time bond post (no maintenance) from the UI we
        // may allow to proceed as long as they have enough for tx fees. For now,
        // the balance check box will remain unchecked and we will not proceed.
        if (avail < 2 * this.bondAsset.amount + this.bondFeeBuffer)
            return;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.balCheck);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.balUncheck, page.balanceBox, page.sendEnough);
        this.funded = true;
        if (this.progressed)
            this.success();
    }
    /*
     * reportProgress sets the progress display and calls success if we are fully
     * synced.
     */
    reportProgress(synced, prog) {
        const page = this.page;
        if (synced) {
            page.progress.textContent = '100';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncUncheck, page.syncRemainBox, page.syncSpinner);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncCheck);
            this.progressed = true;
            if (this.funded)
                this.success();
            return;
        }
        else if (prog === 1) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncUncheck);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncSpinner);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncSpinner);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncUncheck);
        }
        page.progress.textContent = (prog * 100).toFixed(1);
        if (prog >= 0.999) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncRemaining);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncFinishingUp);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncRemainBox);
            // The final stage of wallet sync process can take a while (it might hang
            // at 99.9% for many minutes, indexing addresses for example), the simplest
            // way to handle it is to keep displaying "finishing up" message until the
            // sync is finished, since we can't reasonably show it progressing over time.
            page.syncFinishingUp.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_WALLET_SYNC_FINISHING_UP);
            return;
        }
        // Before we get to 99.9% the remaining time estimate must be based on more
        // than one progress report. We'll cache up to the last 20 and look at the
        // difference between the first and last to make the estimate.
        const cacheSize = 20;
        const cache = this.progressCache;
        cache.push({
            stamp: new Date().getTime(),
            progress: prog
        });
        if (cache.length < 2) {
            // Can't meaningfully estimate remaining until we have at least 2 data points.
            return;
        }
        while (cache.length > cacheSize)
            cache.shift();
        const [first, last] = [cache[0], cache[cache.length - 1]];
        const progDelta = last.progress - first.progress;
        if (progDelta === 0) {
            // Having no progress for a while likely means we are experiencing network
            // issues, can't reasonably estimate time remaining in this case.
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.syncFinishingUp);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncRemaining);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.syncRemainBox);
        const timeDelta = last.stamp - first.stamp;
        const progRate = progDelta / timeDelta;
        const toGoProg = 1 - last.progress;
        const toGoTime = toGoProg / progRate;
        page.syncRemain.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatDuration(toGoTime);
    }
}
/*
 * AccelerateOrderForm is used to submit an acceleration request for an order.
 */
class AccelerateOrderForm {
    constructor(form, success) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.accelerateSubmit, 'click', () => {
            this.submit();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.submitEarlyConfirm, 'click', () => {
            this.sendAccelerateRequest();
        });
    }
    /*
     * displayEarlyAccelerationMsg displays a message asking for confirmation
     * when the user tries to submit an acceleration transaction very soon after
     * the swap transaction was broadcast, or very soon after a previous
     * acceleration.
     */
    displayEarlyAccelerationMsg() {
        const page = this.page;
        // this is checked in submit, but another check is needed for ts compiler
        if (!this.earlyAcceleration)
            return;
        page.recentAccelerationTime.textContent = `${Math.floor(this.earlyAcceleration.timePast / 60)}`;
        page.recentSwapTime.textContent = `${Math.floor(this.earlyAcceleration.timePast / 60)}`;
        if (this.earlyAcceleration.wasAcceleration) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.recentAccelerationMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.recentSwapMsg);
            page.recentAccelerationTime.textContent = `${Math.floor(this.earlyAcceleration.timePast / 60)}`;
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.recentSwapMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.recentAccelerationMsg);
            page.recentSwapTime.textContent = `${Math.floor(this.earlyAcceleration.timePast / 60)}`;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.configureAccelerationDiv, page.accelerateErr);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.earlyAccelerationDiv);
    }
    // sendAccelerateRequest makes an accelerate order request to the client
    // backend.
    sendAccelerateRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            const order = this.order;
            const page = this.page;
            const req = {
                orderID: order.id,
                newRate: this.acceleratedRate
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.accelerateMainDiv);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/accelerateorder', req);
            loaded();
            if ((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.accelerateTxID.textContent = res.txID;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.accelerateMainDiv, page.preAccelerateErr, page.accelerateErr);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.accelerateMsgDiv, page.accelerateSuccess);
                this.success();
            }
            else {
                page.accelerateErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ORDER_ACCELERATION_ERR_MSG, { msg: res.msg });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.earlyAccelerationDiv);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.accelerateErr, page.configureAccelerationDiv);
            }
        });
    }
    // submit is called when the submit button is clicked.
    submit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.earlyAcceleration) {
                this.displayEarlyAccelerationMsg();
            }
            else {
                this.sendAccelerateRequest();
            }
        });
    }
    // refresh should be called before the form is displayed. It makes a
    // preaccelerate request to the client backend and sets up the form
    // based on the results.
    refresh(order) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.order = order;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/preaccelerate', order.id);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.preAccelerateErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ORDER_ACCELERATION_ERR_MSG, { msg: res.msg });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.accelerateMainDiv, page.accelerateSuccess);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.accelerateMsgDiv, page.preAccelerateErr);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.accelerateMsgDiv, page.preAccelerateErr, page.accelerateErr, page.feeEstimateDiv, page.earlyAccelerationDiv);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.accelerateMainDiv, page.accelerateSuccess, page.configureAccelerationDiv);
            const preAccelerate = res.preAccelerate;
            this.earlyAcceleration = preAccelerate.earlyAcceleration;
            this.currencyUnit = preAccelerate.suggestedRange.yUnit;
            page.accelerateAvgFeeRate.textContent = `${preAccelerate.swapRate} ${preAccelerate.suggestedRange.yUnit}`;
            page.accelerateCurrentFeeRate.textContent = `${preAccelerate.suggestedRate} ${preAccelerate.suggestedRange.yUnit}`;
            this.acceleratedRate = preAccelerate.suggestedRange.start.y;
            const selected = () => { };
            const roundY = true;
            const updateRate = (_, newY) => { this.acceleratedRate = newY; };
            const rangeHandler = new _opts__WEBPACK_IMPORTED_MODULE_7__.XYRangeHandler(preAccelerate.suggestedRange, preAccelerate.suggestedRange.start.x, {
                updated: updateRate, changed: () => this.updateAccelerationEstimate(), selected, roundY
            });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.sliderContainer);
            page.sliderContainer.appendChild(rangeHandler.control);
            this.updateAccelerationEstimate();
        });
    }
    // updateAccelerationEstimate makes an accelerate estimate request to the
    // client backend using the currently selected rate on the slider, and
    // displays the results.
    updateAccelerationEstimate() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const order = this.order;
            const req = {
                orderID: order.id,
                newRate: this.acceleratedRate
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.sliderContainer);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/accelerationestimate', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.accelerateErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ORDER_ACCELERATION_FEE_ERR_MSG, { msg: res.msg });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.accelerateErr);
                return;
            }
            page.feeRateEstimate.textContent = `${this.acceleratedRate} ${this.currencyUnit}`;
            let assetID;
            let assetSymbol;
            if (order.sell) {
                assetID = order.baseID;
                assetSymbol = order.baseSymbol;
            }
            else {
                assetID = order.quoteID;
                assetSymbol = order.quoteSymbol;
            }
            const unitInfo = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().unitInfo(assetID);
            page.feeEstimate.textContent = `${res.fee / unitInfo.conventional.conversionFactor} ${assetSymbol}`;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.feeEstimateDiv);
        });
    }
}
/* DEXAddressForm accepts a DEX address and performs account discovery. */
class DEXAddressForm {
    constructor(form, success, dexToUpdate) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        this.certPicker = new CertificatePicker(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.skipRegistration, 'change', () => this.showOrHideSubmitBttn());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showCustom, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.showCustom);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.customBox, page.auth);
        });
        this.knownExchanges = Array.from(page.knownXCs.querySelectorAll('.known-exchange'));
        for (const div of this.knownExchanges) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(div, 'click', () => {
                const host = div.dataset.host;
                for (const d of this.knownExchanges)
                    d.classList.remove('selected');
                return this.checkDEX(host);
            });
        }
        bind(form, page.submit, () => this.checkDEX());
        if (dexToUpdate) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.addDexHdr, page.skipRegistrationBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.updateDexHdr);
            this.dexToUpdate = dexToUpdate;
        }
        this.refresh();
    }
    refresh() {
        const page = this.page;
        page.addr.value = '';
        this.certPicker.clearCertFile();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.err);
        if (this.knownExchanges.length === 0 || this.dexToUpdate) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.customBox, page.auth);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.showCustom, page.knownXCs, page.pickServerMsg, page.addCustomMsg);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.customBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.showCustom);
        }
        for (const div of this.knownExchanges)
            div.classList.remove('selected');
        this.showOrHideSubmitBttn();
    }
    /**
     * Show or hide appPWBox depending on if password is required. Show the
     * submit button if connecting a custom server or password is required).
     */
    showOrHideSubmitBttn() {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(page.customBox), page.auth);
    }
    skipRegistration() {
        var _a;
        return (_a = this.page.skipRegistration.checked) !== null && _a !== void 0 ? _a : false;
    }
    /* Just a small size tweak and fade-in. */
    animate() {
        return __awaiter(this, void 0, void 0, function* () {
            const form = this.form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(550, prog => {
                form.style.transform = `scale(${0.9 + 0.1 * prog})`;
                form.style.opacity = String(Math.pow(prog, 4));
            }, 'easeOut');
        });
    }
    checkDEX(addr) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.err);
            addr = addr || page.addr.value;
            if (addr === '') {
                page.err.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_EMPTY_DEX_ADDRESS_MSG);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.err);
                return;
            }
            const cert = yield this.certPicker.file();
            const skipRegistration = this.skipRegistration();
            let endpoint, req;
            if (this.dexToUpdate) {
                endpoint = '/api/updatedexhost';
                req = {
                    newHost: addr,
                    cert: cert,
                    oldHost: this.dexToUpdate
                };
            }
            else {
                endpoint = skipRegistration ? '/api/adddex' : '/api/discoveracct';
                req = {
                    addr: addr,
                    cert: cert
                };
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)(endpoint, req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                if (String(res.msg).includes('certificate required')) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.needCert);
                }
                else {
                    page.err.textContent = res.msg;
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.err);
                }
                return;
            }
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            if (!this.dexToUpdate && (skipRegistration || res.paid || Object.keys(res.xc.auth.pendingBonds).length > 0)) {
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage('markets');
                return;
            }
            this.success(res.xc, cert);
        });
    }
}
/* DiscoverAccountForm performs account discovery for a pre-selected DEX. */
class DiscoverAccountForm {
    constructor(form, addr, success) {
        this.form = form;
        this.addr = addr;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        page.dexHost.textContent = addr;
        bind(form, page.submit, () => this.checkDEX());
    }
    /* Just a small size tweak and fade-in. */
    animate() {
        return __awaiter(this, void 0, void 0, function* () {
            const form = this.form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(550, prog => {
                form.style.transform = `scale(${0.9 + 0.1 * prog})`;
                form.style.opacity = String(Math.pow(prog, 4));
            }, 'easeOut');
        });
    }
    checkDEX() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.err);
            const req = {
                addr: this.addr
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/discoveracct', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.err.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.err);
                return;
            }
            if (res.paid) {
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage('markets');
                return;
            }
            this.success(res.xc);
        });
    }
}
/* LoginForm is used to sign into the app. */
class LoginForm {
    constructor(form, success) {
        this.success = success;
        this.form = form;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        bind(form, page.submit, () => { this.submit(); });
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            login: (note) => { this.handleLoginNote(note); }
        });
    }
    handleLoginNote(n) {
        if (n.details === '')
            return;
        const loginMsg = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idel(this.form, 'loaderMsg');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(loginMsg);
        if (loginMsg)
            loginMsg.textContent = n.details;
    }
    focus() {
        this.page.pw.focus();
    }
    refresh() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.errMsg);
        this.page.pw.value = '';
    }
    submit() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.errMsg);
            const pw = page.pw.value || '';
            if (pw === '') {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.errMsg, _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NO_PASS_ERROR_MSG));
                return;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/login', { pass: pw });
            loaded();
            page.pw.value = '';
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.errMsg, res.msg);
                return;
            }
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            res.notes = res.notes || [];
            res.notes.reverse();
            res.pokes = res.pokes || [];
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loggedIn(res.notes, res.pokes);
            this.success();
        });
    }
    /* Just a small size tweak and fade-in. */
    animate() {
        return __awaiter(this, void 0, void 0, function* () {
            const form = this.form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(550, prog => {
                form.style.transform = `scale(${0.9 + 0.1 * prog})`;
                form.style.opacity = String(Math.pow(prog, 4));
            }, 'easeOut');
        });
    }
}
const traitNewAddresser = 1 << 1;
/*
 * DepositAddress displays a deposit address, a QR code, and a button to
 * generate a new address (if supported).
 */
class DepositAddress {
    constructor(form) {
        this.form = form;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.unifiedReceiverTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.newDepAddrBttn, 'click', () => __awaiter(this, void 0, void 0, function* () { this.newDepositAddress(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.copyAddressBtn, 'click', () => { this.copyAddress(); });
    }
    /* Display a deposit address. */
    setAsset(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.assetID = assetID;
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.depositErr, page.depositTokenMsgBox);
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            page.depositLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(asset.symbol);
            const wallet = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().walletMap[assetID];
            page.depositName.textContent = asset.unitInfo.conventional.unit;
            if (asset.token) {
                const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[asset.token.parentID];
                page.depositTokenParentLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
                page.depositTokenParentName.textContent = parentAsset.name;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.depositTokenMsgBox);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis((wallet.traits & traitNewAddresser) !== 0, page.newDepAddrBttnBox);
            this.setAddress(wallet.address);
        });
    }
    setAddress(addr) {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.unifiedReceivers);
        if (addr.startsWith('unified:')) {
            const receivers = JSON.parse(addr.substring('unified:'.length));
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.unifiedReceivers);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.unifiedReceivers);
            const defaultReceiverType = 'unified';
            for (const [recvType, recv] of Object.entries(receivers)) {
                const div = page.unifiedReceiverTmpl.cloneNode(true);
                page.unifiedReceivers.appendChild(div);
                div.textContent = recvType;
                div.dataset.type = recvType;
                if (recvType === defaultReceiverType)
                    div.classList.add('selected');
                // tmpl.addr.textContent = recv
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(div, 'click', () => {
                    for (const bttn of Array.from(page.unifiedReceivers.children))
                        bttn.classList.toggle('selected', bttn.dataset.type === recvType);
                    this.setCentralAddress(recv);
                });
            }
            addr = receivers.unified;
        }
        this.setCentralAddress(addr);
    }
    setCentralAddress(addr) {
        const page = this.page;
        page.depositAddress.textContent = addr;
        page.qrcode.src = `/generateqrcode?address=${addr}`;
    }
    /* Fetch a new address from the wallet. */
    newDepositAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, assetID, form } = this;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.depositErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/depositaddress', {
                assetID: assetID
            });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.depositErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.depositErr);
                return;
            }
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().walletMap[assetID].address = res.address;
            this.setAddress(res.address);
        });
    }
    copyAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            navigator.clipboard.writeText(page.depositAddress.textContent || '')
                .then(() => {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.copyAlert);
                setTimeout(() => {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.copyAlert);
                }, 800);
            })
                .catch((reason) => {
                console.error('Unable to copy: ', reason);
            });
        });
    }
}
// AppPassResetForm is used to reset the app apssword using the app seed.
class AppPassResetForm {
    constructor(form, success) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        bind(form, page.resetAppPWSubmitBtn, () => this.resetAppPW());
    }
    resetAppPW() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const newAppPW = page.newAppPassword.value || '';
            const confirmNewAppPW = page.confirmNewAppPassword.value;
            if (newAppPW === '') {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.appPWResetErrMsg, _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NO_PASS_ERROR_MSG));
                return;
            }
            if (newAppPW !== confirmNewAppPW) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.appPWResetErrMsg, _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_PASSWORD_NOT_MATCH));
                return;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/resetapppassword', {
                newPass: newAppPW,
                seed: page.seedInput.value
            });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.appPWResetErrMsg, res.msg);
                return;
            }
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(page.appPWResetErrMsg))
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.appPWResetErrMsg);
            page.appPWResetSuccessMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_PASSWORD_RESET_SUCCESS_MSG);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.appPWResetSuccessMsg);
            setTimeout(() => this.success(), 3000); // allow time to view the message
        });
    }
    focus() {
        this.page.newAppPassword.focus();
    }
    refresh() {
        const page = this.page;
        page.newAppPassword.value = '';
        page.confirmNewAppPassword.value = '';
        page.seedInput.value = '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.appPWResetSuccessMsg, page.appPWResetErrMsg);
    }
}
class CertificatePicker {
    constructor(parent) {
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(parent);
        page.selectedCert.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NONE_SELECTED);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.certFile, 'change', () => this.onCertFileChange());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.removeCert, 'click', () => this.clearCertFile());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.addCert, 'click', () => page.certFile.click());
    }
    /**
     * onCertFileChange when the input certFile changed, read the file
     * and setting cert name into text of selectedCert to display on the view
     */
    onCertFileChange() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const files = page.certFile.files;
            if (!files || !files.length)
                return;
            page.selectedCert.textContent = files[0].name;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.removeCert);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.addCert);
        });
    }
    /* clearCertFile cleanup certFile value and selectedCert text */
    clearCertFile() {
        const page = this.page;
        page.certFile.value = '';
        page.selectedCert.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NONE_SELECTED);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.removeCert);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.addCert);
    }
    file() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            if (page.certFile.value) {
                const files = page.certFile.files;
                if (files && files.length) {
                    return yield files[0].text();
                }
            }
            return '';
        });
    }
}
class TokenApprovalForm {
    constructor(parent, success) {
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(parent);
        this.success = success;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.page.submit, 'click', () => { this.approve(); });
    }
    setAsset(assetID, host) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.assetID = assetID;
            this.host = host;
            const tokenAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            const parentID = this.parentID = (_a = tokenAsset.token) === null || _a === void 0 ? void 0 : _a.parentID;
            const { page } = this;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.submissionElements);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txMsg, page.errMsg, page.addressBox, page.balanceBox, page.addressBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.tokenSymbol);
            page.tokenSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(tokenAsset, true));
            const protocolVersion = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().exchanges[host].assets[assetID].version;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/approvetokenfee', {
                assetID: tokenAsset.id,
                version: protocolVersion,
                approving: true
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.errMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.errMsg);
            }
            else {
                const { unitInfo: ui, wallet: { address, balance: { available: avail } }, name: parentName } = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[parentID];
                const txFee = this.txFee = res.txFee;
                let feeText = `${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(txFee, ui)} ${ui.conventional.unit}`;
                const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fiatRatesMap[parentID];
                if (rate) {
                    feeText += ` (${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFiatConversion(txFee, rate, ui)} USD)`;
                }
                page.feeEstimate.textContent = feeText;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.balanceBox);
                page.balance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(avail, ui);
                page.parentTicker.textContent = ui.conventional.unit;
                page.parentName.textContent = parentName;
                if (avail < txFee) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.addressBox);
                    page.address.textContent = address;
                }
            }
        });
    }
    /*
     * approve calls the /api/approvetoken endpoint.
     */
    approve() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, assetID, host, success } = this;
            const path = '/api/approvetoken';
            const tokenAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[assetID];
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)(path, {
                assetID: tokenAsset.id,
                dexAddr: host
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.errMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.errMsg);
                return;
            }
            page.txid.innerText = res.txID;
            const assetExplorer = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[tokenAsset.id];
            if (assetExplorer && assetExplorer[(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().user.net]) {
                page.txid.href = assetExplorer[(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().user.net](res.txID);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.submissionElements, page.balanceBox, page.addressBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txMsg);
            if (success)
                success();
        });
    }
    handleBalanceNote(n) {
        const { page, parentID, txFee } = this;
        if (n.assetID !== parentID)
            return;
        page.balance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(n.balance.available, (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[parentID].unitInfo);
        if (n.balance.available >= txFee) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.addressBox);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.errMsg);
    }
}
class CEXConfigurationForm {
    constructor(form, success) {
        this.form = form;
        this.success = success;
        this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.page.cexSubmit, 'click', () => this.submit());
    }
    setCEX(cexName) {
        this.cexName = cexName;
        (0,_mmutil__WEBPACK_IMPORTED_MODULE_9__.setCexElements)(this.form, cexName);
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.cexConfigPrompt, page.cexConnectErrBox, page.cexFormErr);
        page.cexApiKeyInput.value = '';
        page.cexSecretInput.value = '';
        const cexStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().mmStatus.cexes[cexName];
        const connectErr = cexStatus === null || cexStatus === void 0 ? void 0 : cexStatus.connectErr;
        if (connectErr) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.cexConnectErrBox);
            page.cexConnectErr.textContent = connectErr;
            page.cexApiKeyInput.value = cexStatus.config.apiKey;
            page.cexSecretInput.value = cexStatus.config.apiSecret;
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.cexConfigPrompt);
        }
    }
    /*
    * handleCEXSubmit handles clicks on the CEX configuration submission button.
    */
    submit() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { page, cexName, form } = this;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.cexFormErr);
            const apiKey = page.cexApiKeyInput.value;
            const apiSecret = page.cexSecretInput.value;
            if (!apiKey || !apiSecret) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.cexFormErr);
                page.cexFormErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NO_PASS_ERROR_MSG);
                return;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(form);
            try {
                const res = yield _mmutil__WEBPACK_IMPORTED_MODULE_9__.MM.updateCEXConfig({
                    name: cexName,
                    apiKey: apiKey,
                    apiSecret: apiSecret
                });
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res))
                    throw res;
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchMMStatus();
                this.success(cexName);
            }
            catch (e) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.cexFormErr);
                page.cexFormErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_API_ERROR, { msg: (_a = e.msg) !== null && _a !== void 0 ? _a : String(e) });
                return;
            }
            finally {
                loaded();
            }
        });
    }
}
const animationLength = 300;
/* Swap form1 for form2 with an animation. */
function slideSwap(form1, form2) {
    return __awaiter(this, void 0, void 0, function* () {
        const shift = document.body.offsetWidth / 2;
        yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
            form1.style.right = `${progress * shift}px`;
        }, 'easeInHard');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form1);
        form1.style.right = '0';
        form2.style.right = String(-shift);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(form2);
        if (form2.querySelector('input')) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(form2, 'input').focus();
        }
        yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
            form2.style.right = `${-shift + progress * shift}px`;
        }, 'easeOutHard');
        form2.style.right = '0';
    });
}
function showSuccess(page, msg) {
    page.successMessage.textContent = msg;
    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, page.checkmarkForm);
    page.checkmarkForm.style.right = '0';
    page.checkmark.style.fontSize = '0px';
    const [startR, startG, startB] = _state__WEBPACK_IMPORTED_MODULE_2__["default"].isDark() ? [223, 226, 225] : [51, 51, 51];
    const [endR, endG, endB] = [16, 163, 16];
    const [diffR, diffG, diffB] = [endR - startR, endG - startG, endB - startB];
    return new _doc__WEBPACK_IMPORTED_MODULE_0__.Animation(1200, (prog) => {
        page.checkmark.style.fontSize = `${prog * 80}px`;
        page.checkmark.style.color = `rgb(${startR + prog * diffR}, ${startG + prog * diffG}, ${startB + prog * diffB})`;
    }, 'easeOutElastic');
}
/*
 * bind binds the click and submit events and prevents page reloading on
 * submission.
 */
function bind(form, submitBttn, handler) {
    const wrapper = (e) => {
        if (e.preventDefault)
            e.preventDefault();
        handler(e);
    };
    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(submitBttn, 'click', wrapper);
    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(form, 'submit', wrapper);
}
// isTruthyString will be true if the provided string is recognized as a
// value representing true.
function isTruthyString(s) {
    return s === '1' || s.toLowerCase() === 'true';
}
// toUnixDate converts a javascript date object to a unix date, which is
// the number of *seconds* since the start of the epoch.
function toUnixDate(date) {
    return Math.floor(date.getTime() / 1000);
}
// dateApplyOffset shifts a date by the timezone offset. This is used to make
// UTC dates show the local date. This can be used to prepare a Date so
// toISOString generates a local date string. This is also used to trick an html
// input element to show the local date when setting the valueAsDate field. When
// reading the date back to JS, the value field should be interpreted as local
// using the "T00:00" suffix, or the Date in valueAsDate should be shifted in
// the opposite direction.
function dateApplyOffset(date) {
    return new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);
}
// dateToString converts a javascript date object to a YYYY-MM-DD format string,
// in the local time zone.
function dateToString(date) {
    return dateApplyOffset(date).toISOString().split('T')[0];
    // Another common hack:
    // date.toLocaleString("sv-SE", { year: "numeric", month: "2-digit", day: "2-digit" })
}


/***/ }),

/***/ "./src/js/http.ts":
/*!************************!*\
  !*** ./src/js/http.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Errors": () => (/* binding */ Errors),
/* harmony export */   "getJSON": () => (/* binding */ getJSON),
/* harmony export */   "postJSON": () => (/* binding */ postJSON),
/* harmony export */   "requestJSON": () => (/* binding */ requestJSON)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
 * requestJSON encodes the object and sends the JSON to the specified address.
 */
function requestJSON(method, addr, reqBody) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield window.fetch(addr, {
                method: method,
                headers: new window.Headers({ 'content-type': 'application/json' }),
                // credentials: "same-origin",
                body: reqBody
            });
            if (response.status !== 200) {
                throw response;
            }
            const obj = yield response.json();
            obj.requestSuccessful = true;
            return obj;
        }
        catch (response) {
            response.requestSuccessful = false;
            response.msg = yield response.text();
            return response;
        }
    });
}
/*
 * postJSON sends a POST request with JSON-formatted data and returns the
 * response.
 */
function postJSON(addr, data) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestJSON('POST', addr, JSON.stringify(data));
    });
}
/*
 * getJSON sends a GET request and returns the response.
 */
function getJSON(addr) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestJSON('GET', addr);
    });
}
var Errors;
(function (Errors) {
    Errors[Errors["walletErr"] = 0] = "walletErr";
    Errors[Errors["walletAuthErr"] = 1] = "walletAuthErr";
    Errors[Errors["walletBalanceErr"] = 2] = "walletBalanceErr";
    Errors[Errors["dupeDEXErr"] = 3] = "dupeDEXErr";
    Errors[Errors["assetSupportErr"] = 4] = "assetSupportErr";
    Errors[Errors["registerErr"] = 5] = "registerErr";
    Errors[Errors["signatureErr"] = 6] = "signatureErr";
    Errors[Errors["zeroFeeErr"] = 7] = "zeroFeeErr";
    Errors[Errors["feeMismatchErr"] = 8] = "feeMismatchErr";
    Errors[Errors["feeSendErr"] = 9] = "feeSendErr";
    Errors[Errors["passwordErr"] = 10] = "passwordErr";
    Errors[Errors["emptyHostErr"] = 11] = "emptyHostErr";
    Errors[Errors["connectionErr"] = 12] = "connectionErr";
    Errors[Errors["acctKeyErr"] = 13] = "acctKeyErr";
    Errors[Errors["unknownOrderErr"] = 14] = "unknownOrderErr";
    Errors[Errors["orderParamsErr"] = 15] = "orderParamsErr";
    Errors[Errors["dbErr"] = 16] = "dbErr";
    Errors[Errors["authErr"] = 17] = "authErr";
    Errors[Errors["connectWalletErr"] = 18] = "connectWalletErr";
    Errors[Errors["missingWalletErr"] = 19] = "missingWalletErr";
    Errors[Errors["encryptionErr"] = 20] = "encryptionErr";
    Errors[Errors["decodeErr"] = 21] = "decodeErr";
    Errors[Errors["accountVerificationErr"] = 22] = "accountVerificationErr";
    Errors[Errors["accountProofErr"] = 23] = "accountProofErr";
    Errors[Errors["parseKeyErr"] = 24] = "parseKeyErr";
    Errors[Errors["marketErr"] = 25] = "marketErr";
    Errors[Errors["addressParseErr"] = 26] = "addressParseErr";
    Errors[Errors["addrErr"] = 27] = "addrErr";
    Errors[Errors["fileReadErr"] = 28] = "fileReadErr";
    Errors[Errors["unknownDEXErr"] = 29] = "unknownDEXErr";
    Errors[Errors["accountRetrieveErr"] = 30] = "accountRetrieveErr";
    Errors[Errors["accountDisableErr"] = 31] = "accountDisableErr";
    Errors[Errors["suspendedAcctErr"] = 32] = "suspendedAcctErr";
    Errors[Errors["existenceCheckErr"] = 33] = "existenceCheckErr";
    Errors[Errors["createWalletErr"] = 34] = "createWalletErr";
    Errors[Errors["activeOrdersErr"] = 35] = "activeOrdersErr";
    Errors[Errors["newAddrErr"] = 36] = "newAddrErr";
})(Errors || (Errors = {}));


/***/ }),

/***/ "./src/js/init.ts":
/*!************************!*\
  !*** ./src/js/init.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ InitPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _charts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./charts */ "./src/js/charts.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







/*
 * InitPage is the page handler for the /init view. InitPage is essentially a
 * form handler. There are no non-form elements on /init. InitPage additionally
 * has a role caching the initialization password. A couple of notes about
 * InitPage.
 *   1) There is no going backwards. Once you set a password, you can't go back
 *      to the password form. If you refresh, you won't end up on /init, so
 *      won't have access to the QuickConfigForm or SeedBackupForm . Once you
 *      submit your auto-config choices, you can't change them. This has
 *      implications for coding and UI. There are no "go back" or "close form"
 *      elements.
 *   2) The user can preclude auto-config and seed backup by clicking an
 *      available header link after password init, e.g. Wallets, in the page
 *      header. NOTE: Regardless of what the user does after setting the app
 *      pass, they will receive a notification reminding them to back up their
 *      seed. Perhaps it would be better to somehow delay that message until
 *      they choose to ignore the seed backup dialog, but having more reminders
 *      is also okay.
 */
class InitPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(body) {
        super();
        this.body = body;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(body);
        this.initForm = new AppInitForm(page.appPWForm, (pw, hosts, mnemonic) => { this.appInited(pw, hosts, mnemonic); });
        this.quickConfigForm = new QuickConfigForm(page.quickConfigForm, () => this.quickConfigDone());
        this.seedBackupForm = new SeedBackupForm(page.seedBackupForm, () => this.seedBackedUp());
    }
    appInited(pw, hosts, mnemonic) {
        return __awaiter(this, void 0, void 0, function* () {
            this.mnemonic = mnemonic;
            const page = this.page;
            yield this.quickConfigForm.update(pw, hosts);
            if (mnemonic)
                this.seedBackupForm.update(mnemonic);
            (0,_forms__WEBPACK_IMPORTED_MODULE_4__.slideSwap)(page.appPWForm, page.quickConfigForm);
        });
    }
    quickConfigDone() {
        if (!this.mnemonic)
            (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage('wallets');
        else
            (0,_forms__WEBPACK_IMPORTED_MODULE_4__.slideSwap)(this.page.quickConfigForm, this.page.seedBackupForm);
    }
    seedBackedUp() {
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loadPage('wallets');
    }
}
/*
 * The AppInitForm handles the form that sets the app password, accepts an
 * optional seed, and initializes the app.
 */
class AppInitForm {
    constructor(form, success) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.appPWSubmit, () => this.setAppPass());
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.toggleSeedInput, () => {
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isHidden(page.seedInputBox)) {
                page.toggleSeedInputIcon.classList.remove('ico-plus');
                page.toggleSeedInputIcon.classList.add('ico-minus');
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.seedInputBox);
            }
            else {
                page.toggleSeedInputIcon.classList.remove('ico-minus');
                page.toggleSeedInputIcon.classList.add('ico-plus');
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.seedInputBox);
            }
        });
    }
    /* Set the application password. Attached to form submission. */
    setAppPass() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.appPWErrMsg);
            const pw = page.appPW.value || '';
            const pwAgain = page.appPWAgain.value;
            if (pw === '') {
                page.appPWErrMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NO_PASS_ERROR_MSG);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.appPWErrMsg);
                return;
            }
            if (pw !== pwAgain) {
                page.appPWErrMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_PASSWORD_NOT_MATCH);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.appPWErrMsg);
                return;
            }
            page.appPW.value = '';
            page.appPWAgain.value = '';
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.form);
            // const seed = page.seedInput.value?.replace(/\s+/g, '') // strip whitespace
            const seed = (_a = page.seedInput.value) !== null && _a !== void 0 ? _a : '';
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/init', {
                pass: pw,
                seed: seed
            });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res)) {
                page.appPWErrMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.appPWErrMsg);
                return;
            }
            this.success(pw, res.hosts, res.mnemonic);
        });
    }
}
let rowIDCounter = 0;
/*
 * QuickConfigForm handles the form that allows users to quickly configure
 * view-only servers and native wallets (that don't require any configuration).
 */
class QuickConfigForm {
    constructor(form, success) {
        this.form = form;
        this.success = success;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.qcServerTmpl, page.qcWalletTmpl);
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.quickConfigSubmit, () => { this.submit(); });
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.qcErrAck, () => { this.success(); });
    }
    update(pw, hosts) {
        return __awaiter(this, void 0, void 0, function* () {
            this.pw = pw;
            const page = this.page;
            this.servers = [];
            for (const host of hosts) {
                const row = page.qcServerTmpl.cloneNode(true);
                page.qcServersBox.appendChild(row);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                rowIDCounter++;
                const rowID = `qcsrow${rowIDCounter}`;
                row.htmlFor = rowID;
                tmpl.checkbox.id = rowID;
                tmpl.host.textContent = host;
                this.servers.push({ host, checkbox: tmpl.checkbox });
            }
            const u = yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser();
            this.wallets = [];
            for (const a of Object.values(u.assets)) {
                if (a.token)
                    continue;
                const winfo = a.info;
                let autoConfigurable = null;
                for (const wDef of winfo.availablewallets) {
                    if (!wDef.seeded)
                        continue;
                    if (wDef.configopts && wDef.configopts.some((opt) => opt.required))
                        continue;
                    autoConfigurable = wDef;
                    break;
                }
                if (!autoConfigurable)
                    continue;
                const row = page.qcWalletTmpl.cloneNode(true);
                page.qcWalletsBox.appendChild(row);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                rowIDCounter++;
                const rowID = `qcwrow${rowIDCounter}`;
                row.htmlFor = rowID;
                tmpl.checkbox.id = rowID;
                tmpl.icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(a.symbol);
                tmpl.name.textContent = a.name;
                this.wallets.push({
                    asset: a,
                    type: autoConfigurable.type,
                    checkbox: tmpl.checkbox
                });
            }
        });
    }
    submit() {
        return __awaiter(this, void 0, void 0, function* () {
            const [failedHosts, failedWallets] = [[], []];
            const ani = new _charts__WEBPACK_IMPORTED_MODULE_5__.Wave(this.form, { backgroundColor: true, message: '...' });
            ani.opts.message = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ADDING_SERVERS);
            const connectServer = (srvRow) => __awaiter(this, void 0, void 0, function* () {
                if (!srvRow.checkbox.checked)
                    return;
                const req = {
                    addr: srvRow.host,
                    appPW: this.pw
                };
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/adddex', req); // DRAFT NOTE: ignore errors ok?
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res))
                    failedHosts.push(srvRow.host);
            });
            yield Promise.all(this.servers.map(connectServer));
            ani.opts.message = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_CREATING_WALLETS);
            const createWallet = (walletRow) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const { asset: a, type, checkbox } = walletRow;
                if (!checkbox.checked)
                    return;
                const config = {};
                const walletDef = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().walletDefinition(a.id, type);
                for (const opt of ((_a = walletDef.configopts) !== null && _a !== void 0 ? _a : [])) {
                    if (!opt.default)
                        continue;
                    if (opt.isboolean) {
                        config[opt.key] = opt.default ? '1' : '0';
                        continue;
                    }
                    if (opt.repeatable && config[opt.key])
                        config[opt.key] += opt.repeatable + opt.default;
                    else
                        config[opt.key] = String(opt.default);
                }
                const createForm = {
                    assetID: a.id,
                    appPass: this.pw,
                    config: config,
                    walletType: type
                };
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/newwallet', createForm);
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res))
                    failedWallets.push(a.name);
            });
            yield Promise.all(this.wallets.map(createWallet));
            ani.stop();
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().fetchUser(); // Calls updateMenuItemsDisplay internally
            if (failedWallets.length + failedHosts.length === 0)
                return this.success();
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.qcChoices);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.qcErrors);
            if (failedHosts.length) {
                for (const host of failedHosts) {
                    page.qcServerErrorList.appendChild(document.createTextNode(host));
                    page.qcServerErrorList.appendChild(document.createElement('br'));
                }
            }
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.qcServerErrors);
            if (failedWallets.length) {
                for (const name of failedWallets) {
                    page.qcWalletErrorList.appendChild(document.createTextNode(name));
                    page.qcWalletErrorList.appendChild(document.createElement('br'));
                }
            }
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.qcWalletErrors);
        });
    }
}
/*
 * SeedBackupForm handles the form that allows the user to back up their seed
 * during initialization.
 */
class SeedBackupForm {
    constructor(form, success) {
        this.form = form;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(form);
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.seedAck, () => success());
        (0,_forms__WEBPACK_IMPORTED_MODULE_4__.bind)(form, page.showSeed, () => this.showSeed());
    }
    update(mnemonic) {
        this.mnemonic = mnemonic;
    }
    showSeed() {
        const page = this.page;
        page.mnemonic.textContent = this.mnemonic; // `${words.slice(0, 5).join(' ')}\n${words.slice(5, 10).join(' ')}\n${words.slice(10,15).join(' ')}`
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.sbWanna);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.sbSeed);
    }
}


/***/ }),

/***/ "./src/js/locales.ts":
/*!***************************!*\
  !*** ./src/js/locales.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ID_ACCOUNT_DISABLED_MSG": () => (/* binding */ ID_ACCOUNT_DISABLED_MSG),
/* harmony export */   "ID_ACCOUNT_SUSPENDED": () => (/* binding */ ID_ACCOUNT_SUSPENDED),
/* harmony export */   "ID_ACCT_UNDEFINED": () => (/* binding */ ID_ACCT_UNDEFINED),
/* harmony export */   "ID_ACTIVE_ORDERS_ERR_MSG": () => (/* binding */ ID_ACTIVE_ORDERS_ERR_MSG),
/* harmony export */   "ID_ACTIVE_ORDERS_LOGOUT_ERR_MSG": () => (/* binding */ ID_ACTIVE_ORDERS_LOGOUT_ERR_MSG),
/* harmony export */   "ID_ADD": () => (/* binding */ ID_ADD),
/* harmony export */   "ID_ADDED": () => (/* binding */ ID_ADDED),
/* harmony export */   "ID_ADDING_SERVERS": () => (/* binding */ ID_ADDING_SERVERS),
/* harmony export */   "ID_API_ERROR": () => (/* binding */ ID_API_ERROR),
/* harmony export */   "ID_ARCHIVED_RECORDS_PATH": () => (/* binding */ ID_ARCHIVED_RECORDS_PATH),
/* harmony export */   "ID_ARCHIVED_SETTINGS": () => (/* binding */ ID_ARCHIVED_SETTINGS),
/* harmony export */   "ID_AVAILABLE": () => (/* binding */ ID_AVAILABLE),
/* harmony export */   "ID_AVAILABLE_TITLE": () => (/* binding */ ID_AVAILABLE_TITLE),
/* harmony export */   "ID_BONDED": () => (/* binding */ ID_BONDED),
/* harmony export */   "ID_BOND_RESERVES": () => (/* binding */ ID_BOND_RESERVES),
/* harmony export */   "ID_BOND_RESERVES_MSG": () => (/* binding */ ID_BOND_RESERVES_MSG),
/* harmony export */   "ID_BOOKED": () => (/* binding */ ID_BOOKED),
/* harmony export */   "ID_BOTTYPE_ARB_MM": () => (/* binding */ ID_BOTTYPE_ARB_MM),
/* harmony export */   "ID_BOTTYPE_BASIC_MM": () => (/* binding */ ID_BOTTYPE_BASIC_MM),
/* harmony export */   "ID_BOTTYPE_SIMPLE_ARB": () => (/* binding */ ID_BOTTYPE_SIMPLE_ARB),
/* harmony export */   "ID_BROWSER_NTFN_BONDS": () => (/* binding */ ID_BROWSER_NTFN_BONDS),
/* harmony export */   "ID_BROWSER_NTFN_CONNECTIONS": () => (/* binding */ ID_BROWSER_NTFN_CONNECTIONS),
/* harmony export */   "ID_BROWSER_NTFN_ENABLED": () => (/* binding */ ID_BROWSER_NTFN_ENABLED),
/* harmony export */   "ID_BROWSER_NTFN_MATCHES": () => (/* binding */ ID_BROWSER_NTFN_MATCHES),
/* harmony export */   "ID_BROWSER_NTFN_ORDERS": () => (/* binding */ ID_BROWSER_NTFN_ORDERS),
/* harmony export */   "ID_BUY": () => (/* binding */ ID_BUY),
/* harmony export */   "ID_BUYING": () => (/* binding */ ID_BUYING),
/* harmony export */   "ID_CALCULATING": () => (/* binding */ ID_CALCULATING),
/* harmony export */   "ID_CANCELED": () => (/* binding */ ID_CANCELED),
/* harmony export */   "ID_CANCELING": () => (/* binding */ ID_CANCELING),
/* harmony export */   "ID_CANCEL_ORDER": () => (/* binding */ ID_CANCEL_ORDER),
/* harmony export */   "ID_CANDLES_LOADING": () => (/* binding */ ID_CANDLES_LOADING),
/* harmony export */   "ID_CAUSES_SELF_MATCH": () => (/* binding */ ID_CAUSES_SELF_MATCH),
/* harmony export */   "ID_CEXBALANCE_ERR": () => (/* binding */ ID_CEXBALANCE_ERR),
/* harmony export */   "ID_CEX_BALANCES": () => (/* binding */ ID_CEX_BALANCES),
/* harmony export */   "ID_CEX_ORDERBOOK_UNSYNCED": () => (/* binding */ ID_CEX_ORDERBOOK_UNSYNCED),
/* harmony export */   "ID_CEX_TOO_SHALLOW": () => (/* binding */ ID_CEX_TOO_SHALLOW),
/* harmony export */   "ID_CEX_TRADE_ERROR": () => (/* binding */ ID_CEX_TRADE_ERROR),
/* harmony export */   "ID_CEX_UNDERFUNDED": () => (/* binding */ ID_CEX_UNDERFUNDED),
/* harmony export */   "ID_CHANGE_WALLET_TYPE": () => (/* binding */ ID_CHANGE_WALLET_TYPE),
/* harmony export */   "ID_COMPLETE": () => (/* binding */ ID_COMPLETE),
/* harmony export */   "ID_CONFIRMATIONS": () => (/* binding */ ID_CONFIRMATIONS),
/* harmony export */   "ID_CONNECTED": () => (/* binding */ ID_CONNECTED),
/* harmony export */   "ID_CONNECTION_FAILED": () => (/* binding */ ID_CONNECTION_FAILED),
/* harmony export */   "ID_CONNECT_WALLET_ERR_MSG": () => (/* binding */ ID_CONNECT_WALLET_ERR_MSG),
/* harmony export */   "ID_CREATE": () => (/* binding */ ID_CREATE),
/* harmony export */   "ID_CREATE_ASSET_WALLET_MSG": () => (/* binding */ ID_CREATE_ASSET_WALLET_MSG),
/* harmony export */   "ID_CREATING_WALLETS": () => (/* binding */ ID_CREATING_WALLETS),
/* harmony export */   "ID_DEFAULT": () => (/* binding */ ID_DEFAULT),
/* harmony export */   "ID_DELETE_ARCHIVED_RECORDS_RESULT": () => (/* binding */ ID_DELETE_ARCHIVED_RECORDS_RESULT),
/* harmony export */   "ID_DEPOSIT_ERROR": () => (/* binding */ ID_DEPOSIT_ERROR),
/* harmony export */   "ID_DEPTH_LOADING": () => (/* binding */ ID_DEPTH_LOADING),
/* harmony export */   "ID_DETERMINE_PLACEMENTS_ERROR": () => (/* binding */ ID_DETERMINE_PLACEMENTS_ERROR),
/* harmony export */   "ID_DEX_DISABLED_MSG": () => (/* binding */ ID_DEX_DISABLED_MSG),
/* harmony export */   "ID_DEX_UNDERFUNDED": () => (/* binding */ ID_DEX_UNDERFUNDED),
/* harmony export */   "ID_DISABLED_MSG": () => (/* binding */ ID_DISABLED_MSG),
/* harmony export */   "ID_DISABLE_ACCOUNT": () => (/* binding */ ID_DISABLE_ACCOUNT),
/* harmony export */   "ID_DISCONNECTED": () => (/* binding */ ID_DISCONNECTED),
/* harmony export */   "ID_DISCOVERED": () => (/* binding */ ID_DISCOVERED),
/* harmony export */   "ID_EMPTY_DEX_ADDRESS_MSG": () => (/* binding */ ID_EMPTY_DEX_ADDRESS_MSG),
/* harmony export */   "ID_ENABLE_ACCOUNT": () => (/* binding */ ID_ENABLE_ACCOUNT),
/* harmony export */   "ID_EPOCH": () => (/* binding */ ID_EPOCH),
/* harmony export */   "ID_ESTIMATE_UNAVAILABLE": () => (/* binding */ ID_ESTIMATE_UNAVAILABLE),
/* harmony export */   "ID_EXECUTED": () => (/* binding */ ID_EXECUTED),
/* harmony export */   "ID_FEE_BALANCE": () => (/* binding */ ID_FEE_BALANCE),
/* harmony export */   "ID_HIDE_ADDITIONAL_SETTINGS": () => (/* binding */ ID_HIDE_ADDITIONAL_SETTINGS),
/* harmony export */   "ID_IMMATURE": () => (/* binding */ ID_IMMATURE),
/* harmony export */   "ID_IMMATURE_BAL_MSG": () => (/* binding */ ID_IMMATURE_BAL_MSG),
/* harmony export */   "ID_IMMATURE_TITLE": () => (/* binding */ ID_IMMATURE_TITLE),
/* harmony export */   "ID_INVALID_ADDRESS_MSG": () => (/* binding */ ID_INVALID_ADDRESS_MSG),
/* harmony export */   "ID_INVALID_CERTIFICATE": () => (/* binding */ ID_INVALID_CERTIFICATE),
/* harmony export */   "ID_INVALID_COMPS_VALUE": () => (/* binding */ ID_INVALID_COMPS_VALUE),
/* harmony export */   "ID_INVALID_DATE_ERR_MSG": () => (/* binding */ ID_INVALID_DATE_ERR_MSG),
/* harmony export */   "ID_INVALID_TIER_VALUE": () => (/* binding */ ID_INVALID_TIER_VALUE),
/* harmony export */   "ID_INVALID_VALUE": () => (/* binding */ ID_INVALID_VALUE),
/* harmony export */   "ID_KEEP_WALLET_PASS": () => (/* binding */ ID_KEEP_WALLET_PASS),
/* harmony export */   "ID_KEEP_WALLET_TYPE": () => (/* binding */ ID_KEEP_WALLET_TYPE),
/* harmony export */   "ID_LIMIT_ORDER": () => (/* binding */ ID_LIMIT_ORDER),
/* harmony export */   "ID_LIMIT_ORDER_IMMEDIATE_TIF": () => (/* binding */ ID_LIMIT_ORDER_IMMEDIATE_TIF),
/* harmony export */   "ID_LOCKED": () => (/* binding */ ID_LOCKED),
/* harmony export */   "ID_LOCKED_BAL_MSG": () => (/* binding */ ID_LOCKED_BAL_MSG),
/* harmony export */   "ID_LOCKED_BOND_BAL_MSG": () => (/* binding */ ID_LOCKED_BOND_BAL_MSG),
/* harmony export */   "ID_LOCKED_ORDER_BAL_MSG": () => (/* binding */ ID_LOCKED_ORDER_BAL_MSG),
/* harmony export */   "ID_LOCKED_SWAPPING_BAL_MSG": () => (/* binding */ ID_LOCKED_SWAPPING_BAL_MSG),
/* harmony export */   "ID_LOCKED_TITLE": () => (/* binding */ ID_LOCKED_TITLE),
/* harmony export */   "ID_LOT": () => (/* binding */ ID_LOT),
/* harmony export */   "ID_LOTS": () => (/* binding */ ID_LOTS),
/* harmony export */   "ID_MAKER": () => (/* binding */ ID_MAKER),
/* harmony export */   "ID_MARKET_ORDER": () => (/* binding */ ID_MARKET_ORDER),
/* harmony export */   "ID_MATCH_BUFFER": () => (/* binding */ ID_MATCH_BUFFER),
/* harmony export */   "ID_MATCH_STATUS_COMPLETE": () => (/* binding */ ID_MATCH_STATUS_COMPLETE),
/* harmony export */   "ID_MATCH_STATUS_MAKER_REDEEMED": () => (/* binding */ ID_MATCH_STATUS_MAKER_REDEEMED),
/* harmony export */   "ID_MATCH_STATUS_MAKER_SWAP_CAST": () => (/* binding */ ID_MATCH_STATUS_MAKER_SWAP_CAST),
/* harmony export */   "ID_MATCH_STATUS_NEWLY_MATCHED": () => (/* binding */ ID_MATCH_STATUS_NEWLY_MATCHED),
/* harmony export */   "ID_MATCH_STATUS_REDEEM_PENDING": () => (/* binding */ ID_MATCH_STATUS_REDEEM_PENDING),
/* harmony export */   "ID_MATCH_STATUS_REDEMPTION_CONFIRMED": () => (/* binding */ ID_MATCH_STATUS_REDEMPTION_CONFIRMED),
/* harmony export */   "ID_MATCH_STATUS_REDEMPTION_SENT": () => (/* binding */ ID_MATCH_STATUS_REDEMPTION_SENT),
/* harmony export */   "ID_MATCH_STATUS_REFUNDED": () => (/* binding */ ID_MATCH_STATUS_REFUNDED),
/* harmony export */   "ID_MATCH_STATUS_REFUND_PENDING": () => (/* binding */ ID_MATCH_STATUS_REFUND_PENDING),
/* harmony export */   "ID_MATCH_STATUS_REVOKED": () => (/* binding */ ID_MATCH_STATUS_REVOKED),
/* harmony export */   "ID_MATCH_STATUS_TAKER_SWAP_CAST": () => (/* binding */ ID_MATCH_STATUS_TAKER_SWAP_CAST),
/* harmony export */   "ID_MAX": () => (/* binding */ ID_MAX),
/* harmony export */   "ID_MISSING_CEX_CREDS": () => (/* binding */ ID_MISSING_CEX_CREDS),
/* harmony export */   "ID_NEW_WALLET_PASS": () => (/* binding */ ID_NEW_WALLET_PASS),
/* harmony export */   "ID_NEW_WALLET_SUCCESS": () => (/* binding */ ID_NEW_WALLET_SUCCESS),
/* harmony export */   "ID_NONE_SELECTED": () => (/* binding */ ID_NONE_SELECTED),
/* harmony export */   "ID_NOT_SUPPORTED": () => (/* binding */ ID_NOT_SUPPORTED),
/* harmony export */   "ID_NO_APP_PASS_ERROR_MSG": () => (/* binding */ ID_NO_APP_PASS_ERROR_MSG),
/* harmony export */   "ID_NO_ARCHIVED_RECORDS": () => (/* binding */ ID_NO_ARCHIVED_RECORDS),
/* harmony export */   "ID_NO_ASSET_WALLET": () => (/* binding */ ID_NO_ASSET_WALLET),
/* harmony export */   "ID_NO_BOTTYPE": () => (/* binding */ ID_NO_BOTTYPE),
/* harmony export */   "ID_NO_CEX": () => (/* binding */ ID_NO_CEX),
/* harmony export */   "ID_NO_CODE_PROVIDED": () => (/* binding */ ID_NO_CODE_PROVIDED),
/* harmony export */   "ID_NO_MATCH": () => (/* binding */ ID_NO_MATCH),
/* harmony export */   "ID_NO_PASS_ERROR_MSG": () => (/* binding */ ID_NO_PASS_ERROR_MSG),
/* harmony export */   "ID_NO_PLACEMENTS": () => (/* binding */ ID_NO_PLACEMENTS),
/* harmony export */   "ID_NO_PRICE_SOURCE": () => (/* binding */ ID_NO_PRICE_SOURCE),
/* harmony export */   "ID_NO_WALLET": () => (/* binding */ ID_NO_WALLET),
/* harmony export */   "ID_NO_WALLET_MSG": () => (/* binding */ ID_NO_WALLET_MSG),
/* harmony export */   "ID_NO_ZERO": () => (/* binding */ ID_NO_ZERO),
/* harmony export */   "ID_NO_ZERO_QUANTITY": () => (/* binding */ ID_NO_ZERO_QUANTITY),
/* harmony export */   "ID_NO_ZERO_RATE": () => (/* binding */ ID_NO_ZERO_RATE),
/* harmony export */   "ID_OFF": () => (/* binding */ ID_OFF),
/* harmony export */   "ID_OPEN_WALLET_ERR_MSG": () => (/* binding */ ID_OPEN_WALLET_ERR_MSG),
/* harmony export */   "ID_ORDER": () => (/* binding */ ID_ORDER),
/* harmony export */   "ID_ORDER_ACCELERATION_ERR_MSG": () => (/* binding */ ID_ORDER_ACCELERATION_ERR_MSG),
/* harmony export */   "ID_ORDER_ACCELERATION_FEE_ERR_MSG": () => (/* binding */ ID_ORDER_ACCELERATION_FEE_ERR_MSG),
/* harmony export */   "ID_ORDER_BUTTON_BUY_BALANCE_ERROR": () => (/* binding */ ID_ORDER_BUTTON_BUY_BALANCE_ERROR),
/* harmony export */   "ID_ORDER_BUTTON_QTY_ERROR": () => (/* binding */ ID_ORDER_BUTTON_QTY_ERROR),
/* harmony export */   "ID_ORDER_BUTTON_QTY_RATE_ERROR": () => (/* binding */ ID_ORDER_BUTTON_QTY_RATE_ERROR),
/* harmony export */   "ID_ORDER_BUTTON_SELL_BALANCE_ERROR": () => (/* binding */ ID_ORDER_BUTTON_SELL_BALANCE_ERROR),
/* harmony export */   "ID_ORDER_PREVIEW": () => (/* binding */ ID_ORDER_PREVIEW),
/* harmony export */   "ID_ORDER_REPORT_TITLE": () => (/* binding */ ID_ORDER_REPORT_TITLE),
/* harmony export */   "ID_ORDER_SUBMITTING": () => (/* binding */ ID_ORDER_SUBMITTING),
/* harmony export */   "ID_PASSWORD_NOT_MATCH": () => (/* binding */ ID_PASSWORD_NOT_MATCH),
/* harmony export */   "ID_PASSWORD_RESET_SUCCESS_MSG": () => (/* binding */ ID_PASSWORD_RESET_SUCCESS_MSG),
/* harmony export */   "ID_PENDING": () => (/* binding */ ID_PENDING),
/* harmony export */   "ID_PLACE_BUY_ORDERS_ERROR": () => (/* binding */ ID_PLACE_BUY_ORDERS_ERROR),
/* harmony export */   "ID_PLACE_SELL_ORDERS_ERROR": () => (/* binding */ ID_PLACE_SELL_ORDERS_ERROR),
/* harmony export */   "ID_READY": () => (/* binding */ ID_READY),
/* harmony export */   "ID_RECONFIG_SUCCESS": () => (/* binding */ ID_RECONFIG_SUCCESS),
/* harmony export */   "ID_REFUND_IMMINENT": () => (/* binding */ ID_REFUND_IMMINENT),
/* harmony export */   "ID_REFUND_WILL_HAPPEN_AFTER": () => (/* binding */ ID_REFUND_WILL_HAPPEN_AFTER),
/* harmony export */   "ID_REGISTRATION_FEE_SUCCESS": () => (/* binding */ ID_REGISTRATION_FEE_SUCCESS),
/* harmony export */   "ID_RESCAN_STARTED": () => (/* binding */ ID_RESCAN_STARTED),
/* harmony export */   "ID_RESERVES_DEFICIT": () => (/* binding */ ID_RESERVES_DEFICIT),
/* harmony export */   "ID_RESERVES_DEFICIT_MSG": () => (/* binding */ ID_RESERVES_DEFICIT_MSG),
/* harmony export */   "ID_REVOKED": () => (/* binding */ ID_REVOKED),
/* harmony export */   "ID_SELECT_WALLET_FOR_FEE_PAYMENT": () => (/* binding */ ID_SELECT_WALLET_FOR_FEE_PAYMENT),
/* harmony export */   "ID_SELL": () => (/* binding */ ID_SELL),
/* harmony export */   "ID_SELLING": () => (/* binding */ ID_SELLING),
/* harmony export */   "ID_SEND_SUCCESS": () => (/* binding */ ID_SEND_SUCCESS),
/* harmony export */   "ID_SETTLING": () => (/* binding */ ID_SETTLING),
/* harmony export */   "ID_SETUP_NEEDED": () => (/* binding */ ID_SETUP_NEEDED),
/* harmony export */   "ID_SETUP_WALLET": () => (/* binding */ ID_SETUP_WALLET),
/* harmony export */   "ID_SET_BUTTON_BUY": () => (/* binding */ ID_SET_BUTTON_BUY),
/* harmony export */   "ID_SET_BUTTON_SELL": () => (/* binding */ ID_SET_BUTTON_SELL),
/* harmony export */   "ID_SHIELDED": () => (/* binding */ ID_SHIELDED),
/* harmony export */   "ID_SHIELDED_MSG": () => (/* binding */ ID_SHIELDED_MSG),
/* harmony export */   "ID_SHOW_ADDITIONAL_SETTINGS": () => (/* binding */ ID_SHOW_ADDITIONAL_SETTINGS),
/* harmony export */   "ID_SWAPPING": () => (/* binding */ ID_SWAPPING),
/* harmony export */   "ID_SWAP_OR_SEND_TOOLTIP": () => (/* binding */ ID_SWAP_OR_SEND_TOOLTIP),
/* harmony export */   "ID_TAKER": () => (/* binding */ ID_TAKER),
/* harmony export */   "ID_TAKER_FOUND_MAKER_REDEMPTION": () => (/* binding */ ID_TAKER_FOUND_MAKER_REDEMPTION),
/* harmony export */   "ID_TICKETS_PURCHASED": () => (/* binding */ ID_TICKETS_PURCHASED),
/* harmony export */   "ID_TICKET_STATUS_EXPIRED": () => (/* binding */ ID_TICKET_STATUS_EXPIRED),
/* harmony export */   "ID_TICKET_STATUS_IMMATURE": () => (/* binding */ ID_TICKET_STATUS_IMMATURE),
/* harmony export */   "ID_TICKET_STATUS_LIVE": () => (/* binding */ ID_TICKET_STATUS_LIVE),
/* harmony export */   "ID_TICKET_STATUS_MISSED": () => (/* binding */ ID_TICKET_STATUS_MISSED),
/* harmony export */   "ID_TICKET_STATUS_REVOKED": () => (/* binding */ ID_TICKET_STATUS_REVOKED),
/* harmony export */   "ID_TICKET_STATUS_UNKNOWN": () => (/* binding */ ID_TICKET_STATUS_UNKNOWN),
/* harmony export */   "ID_TICKET_STATUS_UNMINED": () => (/* binding */ ID_TICKET_STATUS_UNMINED),
/* harmony export */   "ID_TICKET_STATUS_UNSPENT": () => (/* binding */ ID_TICKET_STATUS_UNSPENT),
/* harmony export */   "ID_TICKET_STATUS_VOTED": () => (/* binding */ ID_TICKET_STATUS_VOTED),
/* harmony export */   "ID_TRADE": () => (/* binding */ ID_TRADE),
/* harmony export */   "ID_TRADING_TIER_UPDATED": () => (/* binding */ ID_TRADING_TIER_UPDATED),
/* harmony export */   "ID_TRANSPARENT": () => (/* binding */ ID_TRANSPARENT),
/* harmony export */   "ID_TXFEE_ERR_MSG": () => (/* binding */ ID_TXFEE_ERR_MSG),
/* harmony export */   "ID_TXFEE_UNSUPPORTED": () => (/* binding */ ID_TXFEE_UNSUPPORTED),
/* harmony export */   "ID_TX_TYPE_ACCELERATION": () => (/* binding */ ID_TX_TYPE_ACCELERATION),
/* harmony export */   "ID_TX_TYPE_APPROVE_TOKEN": () => (/* binding */ ID_TX_TYPE_APPROVE_TOKEN),
/* harmony export */   "ID_TX_TYPE_CREATE_BOND": () => (/* binding */ ID_TX_TYPE_CREATE_BOND),
/* harmony export */   "ID_TX_TYPE_MIX": () => (/* binding */ ID_TX_TYPE_MIX),
/* harmony export */   "ID_TX_TYPE_RECEIVE": () => (/* binding */ ID_TX_TYPE_RECEIVE),
/* harmony export */   "ID_TX_TYPE_REDEEM": () => (/* binding */ ID_TX_TYPE_REDEEM),
/* harmony export */   "ID_TX_TYPE_REDEEM_BOND": () => (/* binding */ ID_TX_TYPE_REDEEM_BOND),
/* harmony export */   "ID_TX_TYPE_REFUND": () => (/* binding */ ID_TX_TYPE_REFUND),
/* harmony export */   "ID_TX_TYPE_REVOKE_TOKEN_APPROVAL": () => (/* binding */ ID_TX_TYPE_REVOKE_TOKEN_APPROVAL),
/* harmony export */   "ID_TX_TYPE_SELF_TRANSFER": () => (/* binding */ ID_TX_TYPE_SELF_TRANSFER),
/* harmony export */   "ID_TX_TYPE_SEND": () => (/* binding */ ID_TX_TYPE_SEND),
/* harmony export */   "ID_TX_TYPE_SPLIT": () => (/* binding */ ID_TX_TYPE_SPLIT),
/* harmony export */   "ID_TX_TYPE_SWAP": () => (/* binding */ ID_TX_TYPE_SWAP),
/* harmony export */   "ID_TX_TYPE_SWAP_OR_SEND": () => (/* binding */ ID_TX_TYPE_SWAP_OR_SEND),
/* harmony export */   "ID_TX_TYPE_TICKET_PURCHASE": () => (/* binding */ ID_TX_TYPE_TICKET_PURCHASE),
/* harmony export */   "ID_TX_TYPE_TICKET_REVOCATION": () => (/* binding */ ID_TX_TYPE_TICKET_REVOCATION),
/* harmony export */   "ID_TX_TYPE_TICKET_VOTE": () => (/* binding */ ID_TX_TYPE_TICKET_VOTE),
/* harmony export */   "ID_TX_TYPE_UNKNOWN": () => (/* binding */ ID_TX_TYPE_UNKNOWN),
/* harmony export */   "ID_UNAVAILABLE": () => (/* binding */ ID_UNAVAILABLE),
/* harmony export */   "ID_UNKNOWN": () => (/* binding */ ID_UNKNOWN),
/* harmony export */   "ID_UNSUPPORTED_ASSET_INFO_ERR_MSG": () => (/* binding */ ID_UNSUPPORTED_ASSET_INFO_ERR_MSG),
/* harmony export */   "ID_USER_LIMIT_TOO_LOW": () => (/* binding */ ID_USER_LIMIT_TOO_LOW),
/* harmony export */   "ID_VERSION_NOT_SUPPORTED": () => (/* binding */ ID_VERSION_NOT_SUPPORTED),
/* harmony export */   "ID_WAITING_FOR_CONFS": () => (/* binding */ ID_WAITING_FOR_CONFS),
/* harmony export */   "ID_WALLET_DISABLED_MSG": () => (/* binding */ ID_WALLET_DISABLED_MSG),
/* harmony export */   "ID_WALLET_ENABLED_MSG": () => (/* binding */ ID_WALLET_ENABLED_MSG),
/* harmony export */   "ID_WALLET_NOT_SYNCED": () => (/* binding */ ID_WALLET_NOT_SYNCED),
/* harmony export */   "ID_WALLET_NO_PEERS": () => (/* binding */ ID_WALLET_NO_PEERS),
/* harmony export */   "ID_WALLET_PENDING": () => (/* binding */ ID_WALLET_PENDING),
/* harmony export */   "ID_WALLET_READY": () => (/* binding */ ID_WALLET_READY),
/* harmony export */   "ID_WALLET_RECOVERY_SUPPORT_MSG": () => (/* binding */ ID_WALLET_RECOVERY_SUPPORT_MSG),
/* harmony export */   "ID_WALLET_SYNC_FINISHING_UP": () => (/* binding */ ID_WALLET_SYNC_FINISHING_UP),
/* harmony export */   "ID_WALLET_SYNC_PROGRESS": () => (/* binding */ ID_WALLET_SYNC_PROGRESS),
/* harmony export */   "ID_WALLET_UNLOCKED": () => (/* binding */ ID_WALLET_UNLOCKED),
/* harmony export */   "ID_WITHDRAW_ERROR": () => (/* binding */ ID_WITHDRAW_ERROR),
/* harmony export */   "loadLocale": () => (/* binding */ loadLocale),
/* harmony export */   "prep": () => (/* binding */ prep)
/* harmony export */ });
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const ID_NO_PASS_ERROR_MSG = 'NO_PASS_ERROR_MSG';
const ID_NO_APP_PASS_ERROR_MSG = 'NO_APP_PASS_ERROR_MSG';
const ID_SET_BUTTON_BUY = 'SET_BUTTON_BUY';
const ID_SET_BUTTON_SELL = 'SET_BUTTON_SELL';
const ID_OFF = 'OFF';
const ID_MAX = 'MAX';
const ID_READY = 'READY';
const ID_NO_WALLET = 'NO_WALLET';
const ID_DISABLED_MSG = 'DISABLED_MSG';
const ID_WALLET_SYNC_PROGRESS = 'WALLET_SYNC_PROGRESS';
const ID_HIDE_ADDITIONAL_SETTINGS = 'HIDE_ADDITIONAL_SETTINGS';
const ID_SHOW_ADDITIONAL_SETTINGS = 'SHOW_ADDITIONAL_SETTINGS';
const ID_BUY = 'BUY';
const ID_SELL = 'SELL';
const ID_NOT_SUPPORTED = 'NOT_SUPPORTED';
const ID_VERSION_NOT_SUPPORTED = 'VERSION_NOT_SUPPORTED';
const ID_CONNECTION_FAILED = 'CONNECTION_FAILED';
const ID_ORDER_PREVIEW = 'ORDER_PREVIEW';
const ID_CALCULATING = 'CALCULATING';
const ID_ESTIMATE_UNAVAILABLE = 'ESTIMATE_UNAVAILABLE';
const ID_NO_ZERO_RATE = 'NO_ZERO_RATE';
const ID_NO_ZERO_QUANTITY = 'NO_ZERO_QUANTITY';
const ID_TRADE = 'TRADE';
const ID_NO_ASSET_WALLET = 'NO_ASSET_WALLET';
const ID_EXECUTED = 'EXECUTED';
const ID_BOOKED = 'BOOKED';
const ID_CANCELING = 'CANCELING';
const ID_PASSWORD_NOT_MATCH = 'PASSWORD_NOT_MATCH';
const ID_ACCT_UNDEFINED = 'ACCT_UNDEFINED';
const ID_KEEP_WALLET_PASS = 'KEEP_WALLET_PASS';
const ID_NEW_WALLET_PASS = 'NEW_WALLET_PASS';
const ID_LOT = 'LOT';
const ID_LOTS = 'LOTS';
const ID_UNKNOWN = 'UNKNOWN';
const ID_EPOCH = 'EPOCH';
const ID_ORDER_SUBMITTING = 'ORDER_SUBMITTING';
const ID_SETTLING = 'SETTLING';
const ID_NO_MATCH = 'NO_MATCH';
const ID_CANCELED = 'CANCELED';
const ID_REVOKED = 'REVOKED';
const ID_WAITING_FOR_CONFS = 'WAITING_FOR_CONFS';
const ID_NONE_SELECTED = 'NONE_SELECTED';
const ID_REGISTRATION_FEE_SUCCESS = 'REGISTRATION_FEE_SUCCESS';
const ID_API_ERROR = 'API_ERROR';
const ID_ADD = 'ADD';
const ID_CREATE = 'CREATE';
const ID_SETUP_WALLET = 'SETUP_WALLET';
const ID_WALLET_READY = 'WALLET_READY';
const ID_CHANGE_WALLET_TYPE = 'CHANGE_WALLET_TYPE';
const ID_KEEP_WALLET_TYPE = 'KEEP_WALLET_TYPE';
const ID_WALLET_PENDING = 'WALLET_PENDING';
const ID_SETUP_NEEDED = 'SETUP_NEEDED';
const ID_SEND_SUCCESS = 'SEND_SUCCESS';
const ID_RECONFIG_SUCCESS = 'RECONFIG_SUCCESS';
const ID_RESCAN_STARTED = 'RESCAN_STARTED';
const ID_NEW_WALLET_SUCCESS = 'NEW_WALLET_SUCCESS';
const ID_WALLET_UNLOCKED = 'WALLET_UNLOCKED';
const ID_SELLING = 'SELLING';
const ID_BUYING = 'BUYING';
const ID_WALLET_DISABLED_MSG = 'WALLET_DISABLED';
const ID_WALLET_ENABLED_MSG = 'WALLET_ENABLED';
const ID_ACTIVE_ORDERS_ERR_MSG = 'ACTIVE_ORDERS_ERR_MSG';
const ID_AVAILABLE = 'AVAILABLE';
const ID_LOCKED = 'LOCKED';
const ID_IMMATURE = 'IMMATURE';
const ID_FEE_BALANCE = 'FEE_BALANCE';
const ID_CANDLES_LOADING = 'CANDLES_LOADING';
const ID_DEPTH_LOADING = 'DEPTH_LOADING';
const ID_INVALID_ADDRESS_MSG = 'INVALID_ADDRESS_MSG';
const ID_TXFEE_UNSUPPORTED = 'TXFEE_UNSUPPORTED';
const ID_TXFEE_ERR_MSG = 'TXFEE_ERR_MSG';
const ID_ACTIVE_ORDERS_LOGOUT_ERR_MSG = 'ACTIVE_ORDERS_LOGOUT_ERR_MSG';
const ID_INVALID_DATE_ERR_MSG = 'INVALID_DATE_ERR_MSG';
const ID_NO_ARCHIVED_RECORDS = 'NO_ARCHIVED_RECORDS';
const ID_DELETE_ARCHIVED_RECORDS_RESULT = 'DELETE_ARCHIVED_RECORDS_RESULT';
const ID_ARCHIVED_RECORDS_PATH = 'ARCHIVED_RECORDS_PATH';
const ID_DEFAULT = 'DEFAULT';
const ID_ADDED = 'ADDED';
const ID_DISCOVERED = 'DISCOVERED';
const ID_UNSUPPORTED_ASSET_INFO_ERR_MSG = 'UNSUPPORTED_ASSET_INFO_ERR_MSG';
const ID_LIMIT_ORDER = 'LIMIT_ORDER';
const ID_LIMIT_ORDER_IMMEDIATE_TIF = 'LIMIT_ORDER_IMMEDIATE_TIF';
const ID_MARKET_ORDER = 'MARKET_ORDER';
const ID_CANCEL_ORDER = 'CANCEL_ORDER';
const ID_MATCH_STATUS_NEWLY_MATCHED = 'MATCH_STATUS_NEWLY_MATCHED';
const ID_MATCH_STATUS_MAKER_SWAP_CAST = 'MATCH_STATUS_MAKER_SWAP_CAST';
const ID_MATCH_STATUS_TAKER_SWAP_CAST = 'MATCH_STATUS_TAKER_SWAP_CAST';
const ID_MATCH_STATUS_MAKER_REDEEMED = 'MATCH_STATUS_MAKER_REDEEMED';
const ID_MATCH_STATUS_REDEMPTION_SENT = 'MATCH_STATUS_REDEMPTION_SENT';
const ID_MATCH_STATUS_REDEMPTION_CONFIRMED = 'MATCH_REDEMPTION_CONFIRMED';
const ID_MATCH_STATUS_REVOKED = 'MATCH_STATUS_REVOKED';
const ID_MATCH_STATUS_REFUNDED = 'MATCH_STATUS_REFUNDED';
const ID_MATCH_STATUS_REFUND_PENDING = 'MATCH_STATUS_REFUND_PENDING';
const ID_MATCH_STATUS_REDEEM_PENDING = 'MATCH_STATUS_REDEEM_PENDING';
const ID_MATCH_STATUS_COMPLETE = 'MATCH_STATUS_COMPLETE';
const ID_TAKER_FOUND_MAKER_REDEMPTION = 'TAKER_FOUND_MAKER_REDEMPTION';
const ID_OPEN_WALLET_ERR_MSG = 'OPEN_WALLET_ERR_MSG';
const ID_ORDER_ACCELERATION_FEE_ERR_MSG = 'ORDER_ACCELERATION_FEE_ERR_MSG';
const ID_ORDER_ACCELERATION_ERR_MSG = 'ORDER_ACCELERATION_ERR_MSG';
const ID_CONNECTED = 'CONNECTED';
const ID_DISCONNECTED = 'DISCONNECTED';
const ID_INVALID_CERTIFICATE = 'INVALID_CERTIFICATE';
const ID_CONFIRMATIONS = 'CONFIRMATIONS';
const ID_TAKER = 'TAKER';
const ID_MAKER = 'MAKER';
const ID_EMPTY_DEX_ADDRESS_MSG = 'EMPTY_DEX_ADDRESS_MSG';
const ID_SELECT_WALLET_FOR_FEE_PAYMENT = 'SELECT_WALLET_FOR_FEE_PAYMENT';
const ID_UNAVAILABLE = 'UNAVAILABLE';
const ID_WALLET_SYNC_FINISHING_UP = 'WALLET_SYNC_FINISHING_UP';
const ID_CONNECT_WALLET_ERR_MSG = 'CONNECTING_WALLET_ERR_MSG';
const ID_REFUND_IMMINENT = 'REFUND_IMMINENT';
const ID_REFUND_WILL_HAPPEN_AFTER = 'REFUND_WILL_HAPPEN_AFTER';
const ID_AVAILABLE_TITLE = 'AVAILABLE_TITLE';
const ID_LOCKED_TITLE = 'LOCKED_TITLE';
const ID_IMMATURE_TITLE = 'IMMATURE_TITLE';
const ID_SWAPPING = 'SWAPPING';
const ID_BONDED = 'BONDED';
const ID_LOCKED_BAL_MSG = 'LOCKED_BAL_MSG';
const ID_IMMATURE_BAL_MSG = 'IMMATURE_BAL_MSG';
const ID_LOCKED_SWAPPING_BAL_MSG = 'LOCKED_SWAPPING_BAL_MSG';
const ID_LOCKED_BOND_BAL_MSG = 'LOCKED_BOND_BAL_MSG';
const ID_RESERVES_DEFICIT = 'RESERVES_DEFICIT';
const ID_RESERVES_DEFICIT_MSG = 'RESERVES_DEFICIT_MSG';
const ID_BOND_RESERVES = 'BOND_RESERVES';
const ID_BOND_RESERVES_MSG = 'BOND_RESERVES_MSG';
const ID_SHIELDED = 'SHIELDED';
const ID_TRANSPARENT = 'TRANSPARENT';
const ID_SHIELDED_MSG = 'SHIELDED_MSG';
const ID_ORDER = 'ORDER';
const ID_LOCKED_ORDER_BAL_MSG = 'LOCKED_ORDER_BAL_MSG';
const ID_CREATING_WALLETS = 'CREATING_WALLETS';
const ID_ADDING_SERVERS = 'ADDING_SERVER';
const ID_WALLET_RECOVERY_SUPPORT_MSG = 'WALLET_RECOVERY_SUPPORT_MSG';
const ID_TICKETS_PURCHASED = 'TICKETS_PURCHASED';
const ID_TICKET_STATUS_UNKNOWN = 'TICKET_STATUS_UNKNOWN';
const ID_TICKET_STATUS_UNMINED = 'TICKET_STATUS_UNMINED';
const ID_TICKET_STATUS_IMMATURE = 'TICKET_STATUS_IMMATURE';
const ID_TICKET_STATUS_LIVE = 'TICKET_STATUS_LIVE';
const ID_TICKET_STATUS_VOTED = 'TICKET_STATUS_VOTED';
const ID_TICKET_STATUS_MISSED = 'TICKET_STATUS_MISSED';
const ID_TICKET_STATUS_EXPIRED = 'TICKET_STATUS_EXPIRED';
const ID_TICKET_STATUS_UNSPENT = 'TICKET_STATUS_UNSPENT';
const ID_TICKET_STATUS_REVOKED = 'TICKET_STATUS_REVOKED';
const ID_PASSWORD_RESET_SUCCESS_MSG = 'PASSWORD_RESET_SUCCESS_MSG';
const ID_BROWSER_NTFN_ENABLED = 'BROWSER_NTFN_ENABLED';
const ID_BROWSER_NTFN_ORDERS = 'BROWSER_NTFN_ORDERS';
const ID_BROWSER_NTFN_MATCHES = 'BROWSER_NTFN_MATCHES';
const ID_BROWSER_NTFN_BONDS = 'BROWSER_NTFN_BONDS';
const ID_BROWSER_NTFN_CONNECTIONS = 'BROWSER_NTFN_CONNECTIONS';
const ID_ORDER_BUTTON_BUY_BALANCE_ERROR = 'ORDER_BUTTON_BUY_BALANCE_ERROR';
const ID_ORDER_BUTTON_SELL_BALANCE_ERROR = 'ORDER_BUTTON_SELL_BALANCE_ERROR';
const ID_ORDER_BUTTON_QTY_ERROR = 'ORDER_BUTTON_QTY_ERROR';
const ID_ORDER_BUTTON_QTY_RATE_ERROR = 'ORDER_BUTTON_QTY_RATE_ERROR';
const ID_CREATE_ASSET_WALLET_MSG = 'CREATE_ASSET_WALLET_MSG';
const ID_NO_WALLET_MSG = 'NO_WALLET_MSG';
const ID_TRADING_TIER_UPDATED = 'TRADING_TIER_UPDATED';
const ID_INVALID_TIER_VALUE = 'INVALID_TIER_VALUE';
const ID_INVALID_COMPS_VALUE = 'INVALID_COMPS_VALUE';
const ID_TX_TYPE_UNKNOWN = 'TX_TYPE_UNKNOWN';
const ID_TX_TYPE_SEND = 'TX_TYPE_SEND';
const ID_TX_TYPE_RECEIVE = 'TX_TYPE_RECEIVE';
const ID_TX_TYPE_SWAP = 'TX_TYPE_SWAP';
const ID_TX_TYPE_REDEEM = 'TX_TYPE_REDEEM';
const ID_TX_TYPE_REFUND = 'TX_TYPE_REFUND';
const ID_TX_TYPE_SPLIT = 'TX_TYPE_SPLIT';
const ID_TX_TYPE_CREATE_BOND = 'TX_TYPE_CREATE_BOND';
const ID_TX_TYPE_REDEEM_BOND = 'TX_TYPE_REDEEM_BOND';
const ID_TX_TYPE_APPROVE_TOKEN = 'TX_TYPE_APPROVE_TOKEN';
const ID_TX_TYPE_ACCELERATION = 'TX_TYPE_ACCELERATION';
const ID_TX_TYPE_SELF_TRANSFER = 'TX_TYPE_SELF_TRANSFER';
const ID_TX_TYPE_REVOKE_TOKEN_APPROVAL = 'TX_TYPE_REVOKE_TOKEN_APPROVAL';
const ID_TX_TYPE_TICKET_PURCHASE = 'TX_TYPE_TICKET_PURCHASE';
const ID_TX_TYPE_TICKET_VOTE = 'TX_TYPE_TICKET_VOTE';
const ID_TX_TYPE_TICKET_REVOCATION = 'TX_TYPE_TICKET_REVOCATION';
const ID_TX_TYPE_SWAP_OR_SEND = 'TX_TYPE_SWAP_OR_SEND';
const ID_TX_TYPE_MIX = 'TX_TYPE_MIX';
const ID_SWAP_OR_SEND_TOOLTIP = 'SWAP_OR_SEND_TOOLTIP';
const ID_MISSING_CEX_CREDS = 'MISSING_CEX_CREDS';
const ID_MATCH_BUFFER = 'MATCH_BUFFER';
const ID_NO_PLACEMENTS = 'NO_PLACEMENTS';
const ID_INVALID_VALUE = 'INVALID_VALUE';
const ID_NO_ZERO = 'NO_ZERO';
const ID_BOTTYPE_BASIC_MM = 'BOTTYPE_BASIC_MM';
const ID_BOTTYPE_ARB_MM = 'BOTTYPE_ARB_MM';
const ID_BOTTYPE_SIMPLE_ARB = 'BOTTYPE_SIMPLE_ARB';
const ID_NO_BOTTYPE = 'NO_BOTTYPE';
const ID_NO_CEX = 'NO_CEX';
const ID_CEXBALANCE_ERR = 'CEXBALANCE_ERR';
const ID_PENDING = 'PENDING';
const ID_COMPLETE = 'COMPLETE';
const ID_ARCHIVED_SETTINGS = 'ARCHIVED_SETTINGS';
const ID_NO_CODE_PROVIDED = 'NO_CODE_PROVIDED';
const ID_ENABLE_ACCOUNT = 'ENABLE_ACCOUNT';
const ID_DISABLE_ACCOUNT = 'DISABLE_ACCOUNT';
const ID_ACCOUNT_DISABLED_MSG = 'ACCOUNT_DISABLED_MSG';
const ID_DEX_DISABLED_MSG = 'DEX_DISABLED_MSG';
const ID_WALLET_NOT_SYNCED = 'WALLET_NOT_SYNCED';
const ID_WALLET_NO_PEERS = 'WALLET_NO_PEERS';
const ID_DEPOSIT_ERROR = 'DEPOSIT_ERROR';
const ID_WITHDRAW_ERROR = 'WITHDRAW_ERROR';
const ID_DEX_UNDERFUNDED = 'DEX_UNDERFUNDED';
const ID_CEX_UNDERFUNDED = 'CEX_UNDERFUNDED';
const ID_CEX_TOO_SHALLOW = 'CEX_TOO_SHALLOW';
const ID_ACCOUNT_SUSPENDED = 'ACCOUNT_SUSPENDED';
const ID_USER_LIMIT_TOO_LOW = 'USER_LIMIT_TOO_LOW';
const ID_NO_PRICE_SOURCE = 'NO_PRICE_SOURCE';
const ID_CEX_ORDERBOOK_UNSYNCED = 'CEX_ORDERBOOK_UNSYNCED';
const ID_DETERMINE_PLACEMENTS_ERROR = 'DETERMINE_PLACEMENTS_ERROR';
const ID_PLACE_BUY_ORDERS_ERROR = 'PLACE_BUY_ORDERS_ERROR';
const ID_PLACE_SELL_ORDERS_ERROR = 'PLACE_SELL_ORDERS_ERROR';
const ID_CEX_TRADE_ERROR = 'CEX_TRADE_ERROR';
const ID_ORDER_REPORT_TITLE = 'ORDER_REPORT_TITLE';
const ID_CEX_BALANCES = 'CEX_BALANCES';
const ID_CAUSES_SELF_MATCH = 'CAUSES_SELF_MATCH';
let locale;
function loadLocale(lang, commitHash, skipCache) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!skipCache) {
            const specs = _state__WEBPACK_IMPORTED_MODULE_0__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeSpecsKey);
            if (specs && specs.lang === lang && specs.commitHash === commitHash) {
                locale = _state__WEBPACK_IMPORTED_MODULE_0__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeKey);
                return;
            }
        }
        locale = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/locale', lang);
        _state__WEBPACK_IMPORTED_MODULE_0__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeSpecsKey, { lang, commitHash });
        _state__WEBPACK_IMPORTED_MODULE_0__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeKey, locale);
    });
}
/* prep will format the message to the current locale. */
function prep(k, args) {
    return stringTemplateParser(locale[k], args || {});
}
window.clearLocale = () => {
    _state__WEBPACK_IMPORTED_MODULE_0__["default"].removeLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeSpecsKey);
    _state__WEBPACK_IMPORTED_MODULE_0__["default"].removeLocal(_state__WEBPACK_IMPORTED_MODULE_0__["default"].localeKey);
};
/*
 * stringTemplateParser is a template string matcher, where expression is any
 * text. It switches what is inside double brackets (e.g. 'buy {{ asset }}')
 * for the value described into args. args is an object with keys
 * equal to the placeholder keys. (e.g. {"asset": "dcr"}).
 * So that will be switched for: 'asset dcr'.
 */
function stringTemplateParser(expression, args) {
    // templateMatcher matches any text which:
    // is some {{ text }} between two brackets, and a space between them.
    // It is global, therefore it will change all occurrences found.
    // text can be anything, but brackets '{}' and space '\s'
    const templateMatcher = /{{\s?([^{}\s]*)\s?}}/g;
    return expression.replace(templateMatcher, (_, value) => args[value]);
}


/***/ }),

/***/ "./src/js/login.ts":
/*!*************************!*\
  !*** ./src/js/login.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LoginPage)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/*
  LoginPage holds the form for login and password reset.
*/
class LoginPage extends _basepage__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(body) {
        super();
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].idDescendants(body);
        this.loginForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.LoginForm(page.loginForm, () => { this.loggedIn(); });
        const prepAndDisplayLoginForm = () => {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.resetAppPWForm);
            this.loginForm.refresh();
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.loginForm);
            this.loginForm.focus();
        };
        prepAndDisplayLoginForm();
        this.appPassResetForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.AppPassResetForm(page.resetAppPWForm, () => { prepAndDisplayLoginForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.forgotPassBtn, 'click', () => {
            this.appPassResetForm.refresh();
            (0,_forms__WEBPACK_IMPORTED_MODULE_3__.slideSwap)(page.loginForm, page.resetAppPWForm);
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.resetPassFormCloser, 'click', () => { prepAndDisplayLoginForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_1__["default"].mouseInElement(e, page.resetAppPWForm) && _doc__WEBPACK_IMPORTED_MODULE_1__["default"].isDisplayed(page.resetAppPWForm)) {
                prepAndDisplayLoginForm();
            }
        });
    }
    /* login submits the sign-in form and parses the result. */
    loggedIn() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('wallets');
        });
    }
}


/***/ }),

/***/ "./src/js/markets.ts":
/*!***************************!*\
  !*** ./src/js/markets.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MarketsPage),
/* harmony export */   "marketID": () => (/* binding */ marketID)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _orderbook__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./orderbook */ "./src/js/orderbook.ts");
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./account */ "./src/js/account.ts");
/* harmony import */ var _charts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./charts */ "./src/js/charts.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _ws__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ws */ "./src/js/ws.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _opts__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./opts */ "./src/js/opts.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














const bind = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind;
const bookRoute = 'book';
const bookOrderRoute = 'book_order';
const unbookOrderRoute = 'unbook_order';
const updateRemainingRoute = 'update_remaining';
const epochOrderRoute = 'epoch_order';
const candlesRoute = 'candles';
const candleUpdateRoute = 'candle_update';
const unmarketRoute = 'unmarket';
const epochMatchSummaryRoute = 'epoch_match_summary';
const anHour = 60 * 60 * 1000; // milliseconds
const maxUserOrdersShown = 10;
const buyBtnClass = 'buygreen-bg';
const sellBtnClass = 'sellred-bg';
const fiveMinBinKey = '5m';
const oneHrBinKey = '1h';
const percentFormatter = new Intl.NumberFormat(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].languages(), {
    minimumFractionDigits: 1,
    maximumFractionDigits: 2
});
const parentIDNone = 0xFFFFFFFF;
class MarketsPage extends _basepage__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(main, pageParams) {
        super();
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(main);
        this.main = main;
        if (!this.main.parentElement)
            return; // Not gonna happen, but TypeScript cares.
        // There may be multiple pending updates to the max order. This makes sure
        // that the screen is updated with the most recent one.
        this.maxOrderUpdateCounter = 0;
        this.metaOrders = {};
        this.recentMatches = [];
        this.preorderCache = {};
        this.depthLines = {
            hover: [],
            input: []
        };
        this.hovers = [];
        // 'Recent Matches' list sort key and direction.
        this.recentMatchesSortKey = 'age';
        this.recentMatchesSortDirection = -1;
        // store original title so we can re-append it when updating market value.
        this.ogTitle = document.title;
        this.forms = new _forms__WEBPACK_IMPORTED_MODULE_7__.Forms(page.forms);
        const depthReporters = {
            click: (x) => { this.reportDepthClick(x); },
            volume: (r) => { this.reportDepthVolume(r); },
            mouse: (r) => { this.reportDepthMouse(r); },
            zoom: (z) => { this.reportDepthZoom(z); }
        };
        this.depthChart = new _charts__WEBPACK_IMPORTED_MODULE_5__.DepthChart(page.depthChart, depthReporters, _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].depthZoomLK));
        const candleReporters = {
            mouse: c => { this.reportMouseCandle(c); }
        };
        this.candleChart = new _charts__WEBPACK_IMPORTED_MODULE_5__.CandleChart(page.candlesChart, candleReporters);
        const success = () => { };
        // Do not call cleanTemplates before creating the AccelerateOrderForm
        this.accelerateOrderForm = new _forms__WEBPACK_IMPORTED_MODULE_7__.AccelerateOrderForm(page.accelerateForm, success);
        this.approveTokenForm = new _forms__WEBPACK_IMPORTED_MODULE_7__.TokenApprovalForm(page.approveTokenForm);
        // Set user's last known candle duration.
        this.candleDur = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].lastCandleDurationLK) || oneHrBinKey;
        // Setup the register to trade button.
        // TODO: Use dexsettings page?
        const registerBttn = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(page.notRegistered, 'registerBttn');
        bind(registerBttn, 'click', () => {
            (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loadPage('register', { host: this.market.dex.host });
        });
        // Set up the BalanceWidget.
        {
            page.walletInfoTmpl.removeAttribute('id');
            const bWidget = page.walletInfoTmpl;
            const qWidget = page.walletInfoTmpl.cloneNode(true);
            bWidget.after(qWidget);
            const wgt = this.balanceWgt = new BalanceWidget(bWidget, qWidget);
            const baseIcons = wgt.base.stateIcons.icons;
            const quoteIcons = wgt.quote.stateIcons.icons;
            bind(wgt.base.tmpl.connect, 'click', () => { this.unlockWallet(this.market.base.id); });
            bind(wgt.quote.tmpl.connect, 'click', () => { this.unlockWallet(this.market.quote.id); });
            bind(wgt.base.tmpl.expired, 'click', () => { this.unlockWallet(this.market.base.id); });
            bind(wgt.quote.tmpl.expired, 'click', () => { this.unlockWallet(this.market.quote.id); });
            bind(baseIcons.sleeping, 'click', () => { this.unlockWallet(this.market.base.id); });
            bind(quoteIcons.sleeping, 'click', () => { this.unlockWallet(this.market.quote.id); });
            bind(baseIcons.locked, 'click', () => { this.unlockWallet(this.market.base.id); });
            bind(quoteIcons.locked, 'click', () => { this.unlockWallet(this.market.quote.id); });
            bind(baseIcons.disabled, 'click', () => { this.showToggleWalletStatus(this.market.base); });
            bind(quoteIcons.disabled, 'click', () => { this.showToggleWalletStatus(this.market.quote); });
            bind(wgt.base.tmpl.newWalletBttn, 'click', () => { this.showCreate(this.market.base); });
            bind(wgt.quote.tmpl.newWalletBttn, 'click', () => { this.showCreate(this.market.quote); });
            bind(wgt.base.tmpl.walletAddr, 'click', () => { this.showDeposit(this.market.base.id); });
            bind(wgt.quote.tmpl.walletAddr, 'click', () => { this.showDeposit(this.market.quote.id); });
            bind(wgt.base.tmpl.wantProviders, 'click', () => { this.showCustomProviderDialog(this.market.base.id); });
            bind(wgt.quote.tmpl.wantProviders, 'click', () => { this.showCustomProviderDialog(this.market.quote.id); });
            this.depositAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_7__.DepositAddress(page.deposit);
        }
        this.mm = new _mmutil__WEBPACK_IMPORTED_MODULE_13__.RunningMarketMakerDisplay(page.mmRunning, this.forms, page.orderReportForm, 'markets');
        this.reputationMeter = new _account__WEBPACK_IMPORTED_MODULE_4__.ReputationMeter(page.reputationMeter);
        // Bind toggle wallet status form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_7__.bind)(page.toggleWalletStatusConfirm, page.toggleWalletStatusSubmit, () => __awaiter(this, void 0, void 0, function* () { this.toggleWalletStatus(); }));
        // Prepare templates for the buy and sell tables and the user's order table.
        (0,_opts__WEBPACK_IMPORTED_MODULE_12__.setOptionTemplates)(page);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.orderRowTmpl, page.durBttnTemplate, page.booleanOptTmpl, page.rangeOptTmpl, page.orderOptTmpl, page.userOrderTmpl, page.recentMatchesTemplate);
        // Buttons to show token approval form
        bind(page.approveBaseBttn, 'click', () => { this.showTokenApprovalForm(true); });
        bind(page.approveQuoteBttn, 'click', () => { this.showTokenApprovalForm(false); });
        const toggleTradingTier = (show) => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!show, page.showTradingTier);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(show, page.tradingLimits, page.hideTradingTier);
        };
        bind(page.showTradingTier, 'click', () => { toggleTradingTier(true); });
        bind(page.hideTradingTier, 'click', () => { toggleTradingTier(false); });
        const toggleTradingReputation = (show) => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!show, page.showTradingReputation);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(show, page.reputationMeter, page.hideTradingReputation);
        };
        bind(page.showTradingReputation, 'click', () => { toggleTradingReputation(true); });
        bind(page.hideTradingReputation, 'click', () => { toggleTradingReputation(false); });
        // Buttons to set order type and side.
        bind(page.buyBttn, 'click', () => { this.setBuy(); });
        bind(page.sellBttn, 'click', () => { this.setSell(); });
        bind(page.limitBttn, 'click', () => {
            swapBttns(page.marketBttn, page.limitBttn);
            this.setOrderVisibility();
            if (!page.rateField.value)
                return;
            this.depthLines.input = [{
                    rate: (0,_doc__WEBPACK_IMPORTED_MODULE_0__.parseFloatDefault)(page.rateField.value, 0),
                    color: this.isSell() ? this.depthChart.theme.sellLine : this.depthChart.theme.buyLine
                }];
            this.drawChartLines();
        });
        bind(page.marketBttn, 'click', () => {
            swapBttns(page.limitBttn, page.marketBttn);
            this.setOrderVisibility();
            this.setMarketBuyOrderEstimate();
            this.depthLines.input = [];
            this.drawChartLines();
        });
        bind(page.maxOrd, 'click', () => {
            if (this.isSell()) {
                const maxSell = this.market.maxSell;
                if (!maxSell)
                    return;
                page.lotField.value = String(maxSell.swap.lots);
            }
            else {
                const maxBuy = this.market.maxBuys[this.adjustedRate()];
                if (!maxBuy)
                    return;
                page.lotField.value = String(maxBuy.swap.lots);
            }
            this.lotChanged();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].disableMouseWheel(page.rateField, page.lotField, page.qtyField, page.mktBuyField);
        // Handle the full orderbook sent on the 'book' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(bookRoute, (data) => { this.handleBookRoute(data); });
        // Handle the new order for the order book on the 'book_order' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(bookOrderRoute, (data) => { this.handleBookOrderRoute(data); });
        // Remove the order sent on the 'unbook_order' route from the orderbook.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(unbookOrderRoute, (data) => { this.handleUnbookOrderRoute(data); });
        // Update the remaining quantity on a booked order.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(updateRemainingRoute, (data) => { this.handleUpdateRemainingRoute(data); });
        // Handle the new order for the order book on the 'epoch_order' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(epochOrderRoute, (data) => { this.handleEpochOrderRoute(data); });
        // Handle the initial candlestick data on the 'candles' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(candlesRoute, (data) => { this.handleCandlesRoute(data); });
        // Handle the candles update on the 'candles' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(candleUpdateRoute, (data) => { this.handleCandleUpdateRoute(data); });
        // Handle the recent matches update on the 'epoch_report' route.
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].registerRoute(epochMatchSummaryRoute, (data) => { this.handleEpochMatchSummary(data); });
        // Create a wallet
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_7__.NewWalletForm(page.newWalletForm, () => __awaiter(this, void 0, void 0, function* () { this.createWallet(); }));
        // Main order form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_7__.bind)(page.orderForm, page.submitBttn, () => __awaiter(this, void 0, void 0, function* () { this.stepSubmit(); }));
        // Order verification form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_7__.bind)(page.verifyForm, page.vSubmit, () => __awaiter(this, void 0, void 0, function* () { this.submitOrder(); }));
        // Cancel order form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_7__.bind)(page.cancelForm, page.cancelSubmit, () => __awaiter(this, void 0, void 0, function* () { this.submitCancel(); }));
        // Order detail view.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.vFeeDetails, 'click', () => this.forms.show(page.vDetailPane));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.closeDetailPane, 'click', () => this.showVerifyForm());
        // // Bind active orders list's header sort events.
        page.recentMatchesTable.querySelectorAll('[data-ordercol]')
            .forEach((th) => bind(th, 'click', () => setRecentMatchesSortCol(th.dataset.ordercol || '')));
        const setRecentMatchesSortCol = (key) => {
            // First unset header's current sorted col classes.
            unsetRecentMatchesSortColClasses();
            if (this.recentMatchesSortKey === key) {
                this.recentMatchesSortDirection *= -1;
            }
            else {
                this.recentMatchesSortKey = key;
                this.recentMatchesSortDirection = 1;
            }
            this.refreshRecentMatchesTable();
            setRecentMatchesSortColClasses();
        };
        // sortClassByDirection receives a sort direction and return a class based on it.
        const sortClassByDirection = (element) => {
            if (element === 1)
                return 'sorted-asc';
            return 'sorted-dsc';
        };
        const unsetRecentMatchesSortColClasses = () => {
            page.recentMatchesTable.querySelectorAll('[data-ordercol]')
                .forEach(th => th.classList.remove('sorted-asc', 'sorted-dsc'));
        };
        const setRecentMatchesSortColClasses = () => {
            const key = this.recentMatchesSortKey;
            const sortCls = sortClassByDirection(this.recentMatchesSortDirection);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(page.recentMatchesTable, `[data-ordercol=${key}]`).classList.add(sortCls);
        };
        // Set default's sorted col header classes.
        setRecentMatchesSortColClasses();
        const closePopups = () => {
            this.forms.close();
        };
        // If the user clicks outside of a form, it should close the page overlay.
        bind(page.forms, 'mousedown', (e) => {
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(page.vDetailPane) && !_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, page.vDetailPane))
                return this.showVerifyForm();
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                closePopups();
            }
        });
        this.keyup = (e) => {
            if (e.key === 'Escape') {
                closePopups();
            }
        };
        bind(document, 'keyup', this.keyup);
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => { closePopups(); });
        });
        // Event listeners for interactions with the various input fields.
        bind(page.lotField, ['change', 'keyup'], () => { this.lotChanged(); });
        bind(page.qtyField, 'change', () => { this.quantityChanged(true); });
        bind(page.qtyField, 'keyup', () => { this.quantityChanged(false); });
        bind(page.mktBuyField, ['change', 'keyup'], () => { this.marketBuyChanged(); });
        bind(page.rateField, 'change', () => { this.rateFieldChanged(); });
        bind(page.rateField, 'keyup', () => { this.previewQuoteAmt(true); });
        // Market search input bindings.
        bind(page.marketSearchV1, ['change', 'keyup'], () => { this.filterMarkets(); });
        // Acknowledge the order disclaimer.
        const setDisclaimerAckViz = (acked) => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!acked, page.disclaimer, page.disclaimerAck);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(acked, page.showDisclaimer);
        };
        bind(page.disclaimerAck, 'click', () => {
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].orderDisclaimerAckedLK, true);
            setDisclaimerAckViz(true);
        });
        bind(page.showDisclaimer, 'click', () => {
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].orderDisclaimerAckedLK, false);
            setDisclaimerAckViz(false);
        });
        setDisclaimerAckViz(_state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].orderDisclaimerAckedLK));
        const clearChartLines = () => {
            this.depthLines.hover = [];
            this.drawChartLines();
        };
        bind(page.buyRows, 'mouseleave', clearChartLines);
        bind(page.sellRows, 'mouseleave', clearChartLines);
        bind(page.userOrders, 'mouseleave', () => {
            this.activeMarkerRate = null;
            this.setDepthMarkers();
        });
        const stats0 = page.marketStats;
        const stats1 = stats0.cloneNode(true);
        stats1.classList.add('listopen');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(stats0, stats1);
        stats1.removeAttribute('id');
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().headerSpace.appendChild(stats1);
        this.stats = [{ row: stats0, tmpl: _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(stats0) }, { row: stats1, tmpl: _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(stats1) }];
        const closeMarketsList = () => {
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].leftMarketDockLK, '0');
            page.leftMarketDock.classList.remove('default');
            page.leftMarketDock.classList.add('stashed');
            for (const s of this.stats)
                s.row.classList.remove('listopen');
        };
        const openMarketsList = () => {
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].leftMarketDockLK, '1');
            page.leftMarketDock.classList.remove('default', 'stashed');
            for (const s of this.stats)
                s.row.classList.add('listopen');
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.leftHider, 'click', () => closeMarketsList());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.marketReopener, 'click', () => openMarketsList());
        for (const s of this.stats) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(s.tmpl.marketSelect, 'click', () => {
                if (page.leftMarketDock.clientWidth === 0)
                    openMarketsList();
                else
                    closeMarketsList();
            });
        }
        this.marketList = new MarketList(page.marketListV1);
        // Prepare the list of markets.
        for (const row of this.marketList.markets) {
            bind(row.node, 'click', () => {
                var _a, _b, _c, _d;
                // return early if the market is already set
                const { quoteid: quoteID, baseid: baseID, xc: { host } } = row.mkt;
                if (((_b = (_a = this.market) === null || _a === void 0 ? void 0 : _a.base) === null || _b === void 0 ? void 0 : _b.id) === baseID && ((_d = (_c = this.market) === null || _c === void 0 ? void 0 : _c.quote) === null || _d === void 0 ? void 0 : _d.id) === quoteID)
                    return;
                this.startLoadingAnimations();
                this.setMarket(host, baseID, quoteID);
            });
        }
        if (_state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].leftMarketDockLK) !== '1') { // It is shown by default, hiding if necessary.
            closeMarketsList();
        }
        // Notification filters.
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().registerNoteFeeder({
            order: (note) => { this.handleOrderNote(note); },
            match: (note) => { this.handleMatchNote(note); },
            epoch: (note) => { this.handleEpochNote(note); },
            conn: (note) => { this.handleConnNote(note); },
            balance: (note) => { this.handleBalanceNote(note); },
            bondpost: (note) => { this.handleBondUpdate(note); },
            spots: (note) => { this.handlePriceUpdate(note); },
            walletstate: (note) => { this.handleWalletState(note); },
            reputation: () => { this.updateReputation(); },
            feepayment: () => { this.updateReputation(); },
            runstats: (note) => {
                this.mm.update();
                if (note.baseID !== this.market.base.id || note.quoteID !== this.market.quote.id || note.host !== this.market.dex.host)
                    return;
                if (Boolean(this.mmRunning) !== Boolean(note.stats)) {
                    this.mmRunning = Boolean(note.stats);
                    this.resolveOrderFormVisibility();
                }
            },
            epochreport: (note) => {
                if (note.baseID !== this.market.base.id || note.quoteID !== this.market.quote.id || note.host !== this.market.dex.host)
                    return;
                this.mm.handleEpochReportNote(note);
            },
            cexproblems: (note) => {
                if (note.baseID !== this.market.base.id || note.quoteID !== this.market.quote.id || note.host !== this.market.dex.host)
                    return;
                this.mm.handleCexProblemsNote(note);
            },
            runevent: (note) => {
                if (note.baseID !== this.market.base.id || note.quoteID !== this.market.quote.id || note.host !== this.market.dex.host)
                    return;
                this.mm.update();
            }
        });
        this.loadingAnimations = {};
        this.startLoadingAnimations();
        // Start a ticker to update time-since values.
        this.secondTicker = window.setInterval(() => {
            var _a;
            for (const mord of Object.values(this.metaOrders)) {
                mord.details.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(mord.ord.submitTime);
            }
            for (const td of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.recentMatchesLiveList, '[data-tmpl=age]')) {
                td.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(parseFloat((_a = td.dataset.sinceStamp) !== null && _a !== void 0 ? _a : '0'));
            }
        }, 1000);
        this.init(pageParams);
    }
    init(pageParams) {
        return __awaiter(this, void 0, void 0, function* () {
            // Fetch the first market in the list, or the users last selected market, if
            // it exists.
            let selected;
            if (pageParams === null || pageParams === void 0 ? void 0 : pageParams.host) {
                selected = makeMarket(pageParams.host, parseInt(pageParams.baseID), parseInt(pageParams.quoteID));
            }
            else {
                selected = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].lastMarketLK);
            }
            if (!selected || !this.marketList.exists(selected.host, selected.base, selected.quote)) {
                const first = this.marketList.first();
                if (first)
                    selected = { host: first.mkt.xc.host, base: first.mkt.baseid, quote: first.mkt.quoteid };
            }
            if (selected)
                this.setMarket(selected.host, selected.base, selected.quote);
            else
                this.balanceWgt.setBalanceVisibility(false); // no market to display balance widget for.
            // set the initial state for the registration status
            this.setRegistrationStatusVisibility();
        });
    }
    startLoadingAnimations() {
        const { page, loadingAnimations: anis, depthChart, candleChart } = this;
        depthChart.canvas.classList.add('invisible');
        candleChart.canvas.classList.add('invisible');
        if (anis.candles)
            anis.candles.stop();
        anis.candles = new _charts__WEBPACK_IMPORTED_MODULE_5__.Wave(page.candlesChart, { message: _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_CANDLES_LOADING) });
        if (anis.depth)
            anis.depth.stop();
        anis.depth = new _charts__WEBPACK_IMPORTED_MODULE_5__.Wave(page.depthChart, { message: _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_DEPTH_LOADING) });
    }
    /* isSell is true if the user has selected sell in the order options. */
    isSell() {
        return this.page.sellBttn.classList.contains('selected');
    }
    /* isLimit is true if the user has selected the "limit order" tab. */
    isLimit() {
        return this.page.limitBttn.classList.contains('selected');
    }
    setBuy() {
        const { page } = this;
        swapBttns(page.sellBttn, page.buyBttn);
        page.submitBttn.classList.remove(sellBtnClass);
        page.submitBttn.classList.add(buyBtnClass);
        page.maxLbl.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_BUY);
        this.setOrderBttnText();
        this.setOrderVisibility();
        this.drawChartLines();
        if (!this.isLimit()) {
            this.marketBuyChanged();
        }
        else {
            this.currentOrder = this.parseOrder();
            this.updateOrderBttnState();
        }
    }
    setSell() {
        const { page } = this;
        swapBttns(page.buyBttn, page.sellBttn);
        page.submitBttn.classList.add(sellBtnClass);
        page.submitBttn.classList.remove(buyBtnClass);
        page.maxLbl.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_SELL);
        this.setOrderBttnText();
        this.setOrderVisibility();
        this.drawChartLines();
        this.currentOrder = this.parseOrder();
        this.updateOrderBttnState();
    }
    /* hasPendingBonds is true if there are pending bonds */
    hasPendingBonds() {
        return Object.keys(this.market.dex.auth.pendingBonds || []).length > 0;
    }
    /* setCurrMarketPrice updates the current market price on the stats displays
       and the orderbook display. */
    setCurrMarketPrice() {
        const selected = this.market;
        if (!selected)
            return;
        // Get an up-to-date Market.
        const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges[selected.dex.host];
        const mkt = xc.markets[selected.cfg.name];
        if (!mkt.spot)
            return;
        for (const s of this.stats) {
            const { unitInfo: { conventional: { conversionFactor: cFactor, unit } } } = xc.assets[mkt.baseid];
            const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[mkt.baseid];
            if (fiatRate) {
                s.tmpl.volume.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(mkt.spot.vol24 / cFactor * fiatRate);
                s.tmpl.volUnit.textContent = 'USD';
            }
            else {
                s.tmpl.volume.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(mkt.spot.vol24 / cFactor);
                s.tmpl.volUnit.textContent = unit;
            }
            setPriceAndChange(s.tmpl, xc, mkt);
        }
        this.page.obPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(mkt.spot.rate / this.market.rateConversionFactor);
        this.page.obPrice.classList.remove('sellcolor', 'buycolor');
        this.page.obPrice.classList.add(mkt.spot.change24 >= 0 ? 'buycolor' : 'sellcolor');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(mkt.spot.change24 >= 0, this.page.obUp);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(mkt.spot.change24 < 0, this.page.obDown);
    }
    /* setMarketDetails updates the currency names on the stats displays. */
    setMarketDetails() {
        if (!this.market)
            return;
        for (const s of this.stats) {
            const { baseCfg: ba, quoteCfg: qa } = this.market;
            s.tmpl.baseIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(ba.symbol);
            s.tmpl.quoteIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(qa.symbol);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(s.tmpl.baseSymbol, s.tmpl.quoteSymbol);
            s.tmpl.baseSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(ba, true));
            s.tmpl.quoteSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(qa, true));
        }
    }
    /* setHighLow calculates the high and low rates over the last 24 hours. */
    setHighLow() {
        var _a;
        let [high, low] = [0, 0];
        const spot = this.market.cfg.spot;
        // Use spot values for 24 hours high and low rates if it is available. We
        // will default to setting it from candles if it's not.
        if (spot && spot.low24 && spot.high24) {
            high = spot.high24;
            low = spot.low24;
        }
        else {
            const cache = (_a = this.market) === null || _a === void 0 ? void 0 : _a.candleCaches[fiveMinBinKey];
            if (!cache) {
                if (this.candleDur !== fiveMinBinKey) {
                    this.requestCandles(fiveMinBinKey);
                    return;
                }
                for (const s of this.stats) {
                    s.tmpl.high.textContent = '-';
                    s.tmpl.low.textContent = '-';
                }
                return;
            }
            // Set high and low rates from candles.
            const aDayAgo = new Date().getTime() - 86400000;
            for (let i = cache.candles.length - 1; i >= 0; i--) {
                const c = cache.candles[i];
                if (c.endStamp < aDayAgo)
                    break;
                if (low === 0 || (c.lowRate > 0 && c.lowRate < low))
                    low = c.lowRate;
                if (c.highRate > high)
                    high = c.highRate;
            }
        }
        const baseID = this.market.base.id;
        const quoteID = this.market.quote.id;
        const dex = this.market.dex;
        for (const s of this.stats) {
            s.tmpl.high.textContent = high > 0 ? _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().conventionalRate(baseID, quoteID, high, dex)) : '-';
            s.tmpl.low.textContent = low > 0 ? _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().conventionalRate(baseID, quoteID, low, dex)) : '-';
        }
    }
    /* assetsAreSupported is true if all the assets of the current market are
     * supported
     */
    assetsAreSupported() {
        var _a, _b, _c, _d;
        const { market: { base, quote, baseCfg, quoteCfg } } = this;
        if (!base || !quote) {
            const symbol = base ? quoteCfg.symbol : baseCfg.symbol;
            return {
                isSupported: false,
                text: _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NOT_SUPPORTED, { asset: symbol.toUpperCase() })
            };
        }
        // check if versions are supported. If asset is a token, we check if its
        // parent supports the version.
        const bVers = (base.token ? (_a = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[base.token.parentID].info) === null || _a === void 0 ? void 0 : _a.versions : (_b = base.info) === null || _b === void 0 ? void 0 : _b.versions);
        const qVers = (quote.token ? (_c = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[quote.token.parentID].info) === null || _c === void 0 ? void 0 : _c.versions : (_d = quote.info) === null || _d === void 0 ? void 0 : _d.versions);
        // if none them are token, just check if own asset is supported.
        let text = '';
        if (!bVers.includes(baseCfg.version)) {
            text = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_VERSION_NOT_SUPPORTED, { asset: base.symbol.toUpperCase(), version: baseCfg.version + '' });
        }
        else if (!qVers.includes(quoteCfg.version)) {
            text = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_VERSION_NOT_SUPPORTED, { asset: quote.symbol.toUpperCase(), version: quoteCfg.version + '' });
        }
        return {
            isSupported: bVers.includes(baseCfg.version) && qVers.includes(quoteCfg.version),
            text
        };
    }
    /*
     * setOrderVisibility sets which form is visible based on the specified
     * options.
     */
    setOrderVisibility() {
        const page = this.page;
        if (this.isLimit()) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.priceBox, page.tifBox, page.qtyBox, page.maxBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mktBuyBox);
            this.previewQuoteAmt(true);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.tifBox, page.maxBox, page.priceBox);
            if (this.isSell()) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mktBuyBox);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.qtyBox);
                this.previewQuoteAmt(true);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mktBuyBox);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.qtyBox);
                this.previewQuoteAmt(false);
            }
        }
        this.updateOrderBttnState();
    }
    /* resolveOrderFormVisibility displays or hides the 'orderForm' based on
     * a set of conditions to be met.
     */
    resolveOrderFormVisibility() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const showOrderForm = () => __awaiter(this, void 0, void 0, function* () {
                if (!this.assetsAreSupported().isSupported)
                    return false; // assets not supported
                if (!this.market || this.market.dex.auth.effectiveTier < 1)
                    return false; // acct suspended or not registered
                const { baseAssetApprovalStatus, quoteAssetApprovalStatus } = this.tokenAssetApprovalStatuses();
                if (baseAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved || quoteAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved)
                    return false;
                const { base, quote } = this.market;
                const hasWallets = base && (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[base.id].wallet && quote && (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[quote.id].wallet;
                if (!hasWallets)
                    return false;
                if (this.mmRunning)
                    return false;
                return true;
            });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(yield showOrderForm(), page.orderForm, page.orderTypeBttns);
            if (this.market) {
                const { auth: { effectiveTier, pendingStrength } } = this.market.dex;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(effectiveTier > 0 || pendingStrength > 0, page.reputationAndTradingTierBox);
            }
            const mmStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().mmStatus;
            if (mmStatus && this.mmRunning === undefined && this.market.base && this.market.quote) {
                const { base: { id: baseID }, quote: { id: quoteID }, dex: { host } } = this.market;
                const botStatus = mmStatus.bots.find(({ config: cfg }) => cfg.baseID === baseID && cfg.quoteID === quoteID && cfg.host === host);
                this.mmRunning = Boolean(botStatus === null || botStatus === void 0 ? void 0 : botStatus.running);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(this.mmRunning, page.mmRunning);
            if (this.mmRunning)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.orderForm, page.orderTypeBttns);
        });
    }
    /* setLoaderMsgVisibility displays a message in case a dex asset is not
     * supported
     */
    setLoaderMsgVisibility() {
        const { page } = this;
        const { isSupported, text } = this.assetsAreSupported();
        if (isSupported) {
            // make sure to hide the loader msg
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.loaderMsg);
            return;
        }
        page.loaderMsg.textContent = text;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.loaderMsg);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.notRegistered);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noWallet);
    }
    /*
     * showTokenApprovalForm displays the form used to give allowance to the
     * swap contract of a token.
     */
    showTokenApprovalForm(isBase) {
        return __awaiter(this, void 0, void 0, function* () {
            const assetID = isBase ? this.market.base.id : this.market.quote.id;
            this.approveTokenForm.setAsset(assetID, this.market.dex.host);
            this.forms.show(this.page.approveTokenForm);
        });
    }
    /*
     * tokenAssetApprovalStatuses returns the approval status of the base and
     * quote assets. If the asset is not a token, it is considered approved.
     */
    tokenAssetApprovalStatuses() {
        var _a, _b;
        const { market: { base, quote } } = this;
        let baseAssetApprovalStatus = _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved;
        let quoteAssetApprovalStatus = _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved;
        if (base === null || base === void 0 ? void 0 : base.token) {
            const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[base.id];
            const baseVersion = this.market.dex.assets[base.id].version;
            if (((_a = baseAsset === null || baseAsset === void 0 ? void 0 : baseAsset.wallet) === null || _a === void 0 ? void 0 : _a.approved) && baseAsset.wallet.approved[baseVersion] !== undefined) {
                baseAssetApprovalStatus = baseAsset.wallet.approved[baseVersion];
            }
        }
        if (quote === null || quote === void 0 ? void 0 : quote.token) {
            const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[quote.id];
            const quoteVersion = this.market.dex.assets[quote.id].version;
            if (((_b = quoteAsset === null || quoteAsset === void 0 ? void 0 : quoteAsset.wallet) === null || _b === void 0 ? void 0 : _b.approved) && quoteAsset.wallet.approved[quoteVersion] !== undefined) {
                quoteAssetApprovalStatus = quoteAsset.wallet.approved[quoteVersion];
            }
        }
        return {
            baseAssetApprovalStatus,
            quoteAssetApprovalStatus
        };
    }
    /*
     * setTokenApprovalVisibility sets the visibility of the token approval
     * panel elements.
     */
    setTokenApprovalVisibility() {
        const { page } = this;
        const { baseAssetApprovalStatus, quoteAssetApprovalStatus } = this.tokenAssetApprovalStatuses();
        if (baseAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved && quoteAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.tokenApproval);
            page.sellBttn.removeAttribute('disabled');
            page.buyBttn.removeAttribute('disabled');
            return;
        }
        if (baseAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved && quoteAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved) {
            page.sellBttn.setAttribute('disabled', 'disabled');
            page.buyBttn.removeAttribute('disabled');
            this.setBuy();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.approvalRequiredSell);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.approvalRequiredBuy, page.approvalRequiredBoth);
        }
        if (baseAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved && quoteAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved) {
            page.buyBttn.setAttribute('disabled', 'disabled');
            page.sellBttn.removeAttribute('disabled');
            this.setSell();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.approvalRequiredBuy);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.approvalRequiredSell, page.approvalRequiredBoth);
        }
        // If they are both unapproved tokens, the order form will not be shown.
        if (baseAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved && quoteAssetApprovalStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Approved) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.approvalRequiredBoth);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.approvalRequiredSell, page.approvalRequiredBuy);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.tokenApproval);
        page.approvalPendingBaseSymbol.textContent = page.baseTokenAsset.textContent = this.market.base.symbol.toUpperCase();
        page.approvalPendingQuoteSymbol.textContent = page.quoteTokenAsset.textContent = this.market.quote.symbol.toUpperCase();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(baseAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.NotApproved, page.approveBaseBttn);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(quoteAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.NotApproved, page.approveQuoteBttn);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(baseAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Pending, page.approvalPendingBase);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(quoteAssetApprovalStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ApprovalStatus.Pending, page.approvalPendingQuote);
    }
    /* setRegistrationStatusView sets the text content and class for the
     * registration status view
     */
    setRegistrationStatusView(titleContent, confStatusMsg, titleClass) {
        const page = this.page;
        page.regStatusTitle.textContent = titleContent;
        page.regStatusConfsDisplay.textContent = confStatusMsg;
        page.registrationStatus.classList.remove('completed', 'error', 'waiting');
        page.registrationStatus.classList.add(titleClass);
    }
    /*
     * updateRegistrationStatusView updates the view based on the current
     * registration status
     */
    updateRegistrationStatusView() {
        const { page, market: { dex } } = this;
        page.regStatusDex.textContent = dex.host;
        page.postingBondsDex.textContent = dex.host;
        if (dex.auth.effectiveTier >= 1) {
            this.setRegistrationStatusView(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_REGISTRATION_FEE_SUCCESS), '', 'completed');
            return;
        }
        const confStatuses = (dex.auth.pendingBonds || []).map(pending => {
            const confirmationsRequired = dex.bondAssets[pending.symbol].confs;
            return `${pending.confs} / ${confirmationsRequired}`;
        });
        const confStatusMsg = confStatuses.join(', ');
        this.setRegistrationStatusView(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_WAITING_FOR_CONFS), confStatusMsg, 'waiting');
    }
    /*
     * setRegistrationStatusVisibility toggles the registration status view based
     * on the dex data.
     */
    setRegistrationStatusVisibility() {
        const { page, market } = this;
        if (!market || !market.dex)
            return;
        // If dex is not connected to server, is not possible to know the
        // registration status.
        if (market.dex.connectionStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected)
            return;
        this.updateRegistrationStatusView();
        const showSection = (section) => {
            const elements = [page.registrationStatus, page.bondRequired, page.bondCreationPending, page.notRegistered];
            for (const el of elements) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(el === section, el);
            }
        };
        if (market.dex.auth.effectiveTier >= 1) {
            const toggle = () => __awaiter(this, void 0, void 0, function* () {
                showSection(undefined);
                this.resolveOrderFormVisibility();
            });
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isHidden(page.orderForm)) {
                // wait a couple of seconds before showing the form so the success
                // message is shown to the user
                setTimeout(toggle, 5000);
                return;
            }
            toggle();
        }
        else if (market.dex.viewOnly) {
            page.unregisteredDex.textContent = market.dex.host;
            showSection(page.notRegistered);
        }
        else if (this.hasPendingBonds()) {
            showSection(page.registrationStatus);
        }
        else if (market.dex.auth.targetTier > 0) {
            showSection(page.bondCreationPending);
        }
        else {
            page.acctTier.textContent = `${market.dex.auth.effectiveTier}`;
            page.dexSettingsLink.href = `/dexsettings/${market.dex.host}`;
            showSection(page.bondRequired);
        }
    }
    setOrderBttnText() {
        if (this.isSell()) {
            this.page.submitBttn.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_SET_BUTTON_SELL, { asset: _doc__WEBPACK_IMPORTED_MODULE_0__["default"].shortSymbol(this.market.baseCfg.unitInfo.conventional.unit) });
        }
        else
            this.page.submitBttn.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_SET_BUTTON_BUY, { asset: _doc__WEBPACK_IMPORTED_MODULE_0__["default"].shortSymbol(this.market.baseCfg.unitInfo.conventional.unit) });
    }
    setOrderBttnEnabled(isEnabled, disabledTooltipMsg) {
        const btn = this.page.submitBttn;
        if (isEnabled) {
            btn.removeAttribute('disabled');
            btn.removeAttribute('title');
        }
        else {
            btn.setAttribute('disabled', 'true');
            if (disabledTooltipMsg)
                btn.setAttribute('title', disabledTooltipMsg);
        }
    }
    updateOrderBttnState() {
        const { market: mkt, currentOrder: { qty: orderQty, rate: orderRate, isLimit, sell } } = this;
        const baseWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[this.market.base.id].wallet;
        const quoteWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[mkt.quote.id].wallet;
        if (!baseWallet || !quoteWallet)
            return;
        if (orderQty <= 0 || orderQty < mkt.cfg.lotsize) {
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_QTY_ERROR));
            return;
        }
        // Market orders
        if (!isLimit) {
            if (sell) {
                this.setOrderBttnEnabled(orderQty <= baseWallet.balance.available, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_SELL_BALANCE_ERROR));
            }
            else {
                this.setOrderBttnEnabled(orderQty <= quoteWallet.balance.available, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_BUY_BALANCE_ERROR));
            }
            return;
        }
        if (!orderRate) {
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_QTY_RATE_ERROR));
            return;
        }
        // Limit sell
        if (sell) {
            if (baseWallet.balance.available < mkt.cfg.lotsize) {
                this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_SELL_BALANCE_ERROR));
                return;
            }
            if (mkt.maxSell) {
                this.setOrderBttnEnabled(orderQty <= mkt.maxSell.swap.value, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_SELL_BALANCE_ERROR));
            }
            return;
        }
        // Limit buy
        const rate = this.adjustedRate();
        const aLot = mkt.cfg.lotsize * (rate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor);
        if (quoteWallet.balance.available < aLot) {
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_BUY_BALANCE_ERROR));
            return;
        }
        if (mkt.maxBuys[rate]) {
            const enable = orderQty <= mkt.maxBuys[rate].swap.lots * mkt.cfg.lotsize;
            this.setOrderBttnEnabled(enable, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_BUY_BALANCE_ERROR));
        }
    }
    setCandleDurBttns() {
        const { page, market } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.durBttnBox);
        for (const dur of market.dex.candleDurs) {
            const bttn = page.durBttnTemplate.cloneNode(true);
            bttn.textContent = dur;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(bttn, 'click', () => this.candleDurationSelected(dur));
            page.durBttnBox.appendChild(bttn);
        }
        // load candlesticks here since we are resetting page.durBttnBox above.
        this.loadCandles();
    }
    /* setMarket sets the currently displayed market. */
    setMarket(host, baseID, quoteID) {
        return __awaiter(this, void 0, void 0, function* () {
            const dex = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().user.exchanges[host];
            const page = this.page;
            window.cexBook = () => __awaiter(this, void 0, void 0, function* () {
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/cexbook', { host, baseID, quoteID });
                console.log(res.book);
            });
            // reset form inputs
            page.lotField.value = '';
            page.qtyField.value = '';
            page.rateField.value = '';
            // clear depth chart and orderbook.
            this.depthChart.clear();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.buyRows);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.sellRows);
            // Clear recent matches for the previous market. This will be set when we
            // receive the order book subscription response.
            this.recentMatches = [];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.recentMatchesLiveList);
            // Hide the balance widget
            this.balanceWgt.setBalanceVisibility(false);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.notRegistered, page.bondRequired, page.noWallet);
            // If we have not yet connected, there is no dex.assets or any other
            // exchange data, so just put up a message and wait for the connection to be
            // established, at which time handleConnNote will refresh and reload.
            if (!dex || !dex.markets || dex.connectionStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected) {
                let errMsg = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_CONNECTION_FAILED);
                if (dex.disabled)
                    errMsg = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_DEX_DISABLED_MSG);
                page.chartErrMsg.textContent = errMsg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.chartErrMsg);
                return;
            }
            for (const s of this.stats)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(s.row);
            const baseCfg = dex.assets[baseID];
            const quoteCfg = dex.assets[quoteID];
            const [bui, qui] = [(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(baseID, dex), (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(quoteID, dex)];
            const rateConversionFactor = _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor / bui.conventional.conversionFactor * qui.conventional.conversionFactor;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.maxOrd, page.chartErrMsg);
            if (this.maxEstimateTimer) {
                window.clearTimeout(this.maxEstimateTimer);
                this.maxEstimateTimer = null;
            }
            const mktId = marketID(baseCfg.symbol, quoteCfg.symbol);
            const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[baseID];
            const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[quoteID];
            const mkt = {
                dex: dex,
                sid: mktId,
                cfg: dex.markets[mktId],
                // app().assets is a map of core.SupportedAsset type, which can be found at
                // client/core/types.go.
                base: baseAsset,
                quote: quoteAsset,
                baseUnitInfo: bui,
                quoteUnitInfo: qui,
                maxSell: null,
                maxBuys: {},
                maxSellRequested: false,
                candleCaches: {},
                baseCfg,
                quoteCfg,
                rateConversionFactor,
                sellBalance: 0,
                buyBalance: 0,
                bookLoaded: false
            };
            this.market = mkt;
            this.mm.setMarket(host, baseID, quoteID);
            this.mmRunning = undefined;
            page.lotSize.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(mkt.cfg.lotsize, mkt.baseUnitInfo);
            page.rateStep.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(mkt.cfg.ratestep / rateConversionFactor);
            this.displayMessageIfMissingWallet();
            this.balanceWgt.setWallets(host, baseID, quoteID);
            this.setMarketDetails();
            this.setCurrMarketPrice();
            // if (!dex.candleDurs || dex.candleDurs.length === 0) this.currentChart = depthChart
            // depth chart
            _ws__WEBPACK_IMPORTED_MODULE_9__["default"].request('loadmarket', makeMarket(host, baseID, quoteID));
            _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].lastMarketLK, {
                host: host,
                base: baseID,
                quote: quoteID
            });
            (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().updateMarketElements(this.main, baseID, quoteID, dex);
            this.marketList.select(host, baseID, quoteID);
            this.setLoaderMsgVisibility();
            this.setTokenApprovalVisibility();
            this.setRegistrationStatusVisibility();
            this.resolveOrderFormVisibility();
            this.setOrderBttnText();
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_QTY_RATE_ERROR));
            this.setCandleDurBttns();
            this.previewQuoteAmt(false);
            this.updateTitle();
            this.reputationMeter.setHost(dex.host);
            this.updateReputation();
            this.loadUserOrders();
        });
    }
    /*
      displayMessageForMissingWallet displays a custom message on the market's
      view if one or more of the selected market's wallet is missing.
    */
    displayMessageIfMissingWallet() {
        var _a, _b, _c, _d;
        const page = this.page;
        const mkt = this.market;
        const baseSym = mkt.baseCfg.symbol.toLocaleUpperCase();
        const quoteSym = mkt.quoteCfg.symbol.toLocaleUpperCase();
        let noWalletMsg = '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noWallet);
        if (!((_a = mkt.base) === null || _a === void 0 ? void 0 : _a.wallet) && !((_b = mkt.quote) === null || _b === void 0 ? void 0 : _b.wallet))
            noWalletMsg = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NO_WALLET_MSG, { asset1: baseSym, asset2: quoteSym });
        else if (!((_c = mkt.base) === null || _c === void 0 ? void 0 : _c.wallet))
            noWalletMsg = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_CREATE_ASSET_WALLET_MSG, { asset: baseSym });
        else if (!((_d = mkt.quote) === null || _d === void 0 ? void 0 : _d.wallet))
            noWalletMsg = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_CREATE_ASSET_WALLET_MSG, { asset: quoteSym });
        else
            return;
        page.noWallet.textContent = noWalletMsg;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noWallet);
    }
    /*
     * reportDepthClick is a callback used by the DepthChart when the user clicks
     * on the chart area. The rate field is set to the x-value of the click.
     */
    reportDepthClick(r) {
        this.page.rateField.value = String(r);
        this.rateFieldChanged();
    }
    /*
     * reportDepthVolume accepts a volume report from the DepthChart and sets the
     * values in the chart legend.
     */
    reportDepthVolume(r) {
        const page = this.page;
        const { baseUnitInfo: b, quoteUnitInfo: q } = this.market;
        // DepthChart reports volumes in conventional units. We'll still use
        // formatCoinValue for formatting though.
        page.sellBookedBase.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.sellBase * b.conventional.conversionFactor, b);
        page.sellBookedQuote.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.sellQuote * q.conventional.conversionFactor, q);
        page.buyBookedBase.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.buyBase * b.conventional.conversionFactor, b);
        page.buyBookedQuote.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.buyQuote * q.conventional.conversionFactor, q);
    }
    /*
     * reportDepthMouse accepts information about the mouse position on the chart
     * area.
     */
    reportDepthMouse(r) {
        while (this.hovers.length)
            this.hovers.shift().classList.remove('hover');
        const page = this.page;
        if (!r) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.depthLegend);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.depthLegend);
        // If the user is hovered to within a small percent (based on chart width)
        // of a user order, highlight that order's row.
        for (const { div, ord } of Object.values(this.metaOrders)) {
            if (ord.status !== _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked)
                continue;
            if (r.hoverMarkers.indexOf(ord.rate) > -1) {
                div.classList.add('hover');
                this.hovers.push(div);
            }
        }
        page.hoverPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.rate);
        page.hoverVolume.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(r.depth);
        page.hoverVolume.style.color = r.dotColor;
    }
    /*
     * reportDepthZoom accepts information about the current depth chart zoom
     * level. This information is saved to disk so that the zoom level can be
     * maintained across reloads.
     */
    reportDepthZoom(zoom) {
        _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].depthZoomLK, zoom);
    }
    reportMouseCandle(candle) {
        const page = this.page;
        if (!candle) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.candlesLegend);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.candlesLegend);
        page.candleStart.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(candle.startRate / this.market.rateConversionFactor);
        page.candleEnd.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(candle.endRate / this.market.rateConversionFactor);
        page.candleHigh.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(candle.highRate / this.market.rateConversionFactor);
        page.candleLow.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(candle.lowRate / this.market.rateConversionFactor);
        page.candleVol.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(candle.matchVolume, this.market.baseUnitInfo);
    }
    /*
     * parseOrder pulls the order information from the form fields. Data is not
     * validated in any way.
     */
    parseOrder() {
        const page = this.page;
        let qtyField = page.qtyField;
        const limit = this.isLimit();
        const sell = this.isSell();
        const market = this.market;
        let qtyConv = market.baseUnitInfo.conventional.conversionFactor;
        if (!limit && !sell) {
            qtyField = page.mktBuyField;
            qtyConv = market.quoteUnitInfo.conventional.conversionFactor;
        }
        return {
            host: market.dex.host,
            isLimit: limit,
            sell: sell,
            base: market.base.id,
            quote: market.quote.id,
            qty: convertToAtoms(qtyField.value || '', qtyConv),
            rate: convertToAtoms(page.rateField.value || '', market.rateConversionFactor),
            tifnow: page.tifNow.checked || false,
            options: {}
        };
    }
    /**
     * previewQuoteAmt shows quote amount when rate or quantity input are changed
     */
    previewQuoteAmt(show) {
        const page = this.page;
        if (!this.market.base || !this.market.quote)
            return; // Not a supported asset
        const order = this.currentOrder = this.parseOrder();
        const adjusted = this.adjustedRate();
        page.orderErr.textContent = '';
        if (adjusted) {
            if (order.sell)
                this.preSell();
            else
                this.preBuy();
        }
        this.depthLines.input = [];
        if (adjusted && this.isLimit()) {
            this.depthLines.input = [{
                    rate: order.rate / this.market.rateConversionFactor,
                    color: order.sell ? this.depthChart.theme.sellLine : this.depthChart.theme.buyLine
                }];
        }
        this.drawChartLines();
        if (!show || !adjusted || !order.qty) {
            page.orderPreview.textContent = '';
            this.drawChartLines();
            return;
        }
        const { unitInfo: { conventional: { unit } } } = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[order.quote];
        const quoteQty = order.qty * order.rate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor;
        const total = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(quoteQty, this.market.quoteUnitInfo);
        page.orderPreview.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_PREVIEW, { total, asset: unit });
        if (this.isSell())
            this.preSell();
        else
            this.preBuy();
    }
    /**
     * preSell populates the max order message for the largest available sell.
     */
    preSell() {
        const mkt = this.market;
        const baseWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[mkt.base.id].wallet;
        if (baseWallet.balance.available < mkt.cfg.lotsize) {
            this.setMaxOrder(null);
            this.updateOrderBttnState();
            return;
        }
        if (mkt.maxSell) {
            this.setMaxOrder(mkt.maxSell.swap);
            this.updateOrderBttnState();
            return;
        }
        if (mkt.maxSellRequested)
            return;
        mkt.maxSellRequested = true;
        // We only fetch pre-sell once per balance update, so don't delay.
        this.scheduleMaxEstimate('/api/maxsell', {}, 0, (res) => {
            mkt.maxSellRequested = false;
            mkt.maxSell = res.maxSell;
            mkt.sellBalance = baseWallet.balance.available;
            this.setMaxOrder(res.maxSell.swap);
            this.updateOrderBttnState();
        });
    }
    /**
     * preBuy populates the max order message for the largest available buy.
     */
    preBuy() {
        const mkt = this.market;
        const rate = this.adjustedRate();
        const quoteWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[mkt.quote.id].wallet;
        if (!quoteWallet)
            return;
        const aLot = mkt.cfg.lotsize * (rate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor);
        if (quoteWallet.balance.available < aLot) {
            this.setMaxOrder(null);
            this.updateOrderBttnState();
            return;
        }
        if (mkt.maxBuys[rate]) {
            this.setMaxOrder(mkt.maxBuys[rate].swap);
            this.updateOrderBttnState();
            return;
        }
        // 0 delay for first fetch after balance update or market change, otherwise
        // meter these at 1 / sec.
        const delay = Object.keys(mkt.maxBuys).length ? 350 : 0;
        this.scheduleMaxEstimate('/api/maxbuy', { rate }, delay, (res) => {
            mkt.maxBuys[rate] = res.maxBuy;
            mkt.buyBalance = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[mkt.quote.id].wallet.balance.available;
            this.setMaxOrder(res.maxBuy.swap);
            this.updateOrderBttnState();
        });
    }
    /**
     * scheduleMaxEstimate shows the loading icon and schedules a call to an order
     * estimate api endpoint. If another call to scheduleMaxEstimate is made before
     * this one is fired (after delay), this call will be canceled.
     */
    scheduleMaxEstimate(path, args, delay, success) {
        const page = this.page;
        if (!this.maxLoaded)
            this.maxLoaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(page.maxOrd);
        const [bid, qid] = [this.market.base.id, this.market.quote.id];
        const [bWallet, qWallet] = [(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[bid].wallet, (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[qid].wallet];
        if (!bWallet || !bWallet.running || !qWallet || !qWallet.running)
            return;
        if (this.maxEstimateTimer)
            window.clearTimeout(this.maxEstimateTimer);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxOrd, page.maxLotBox);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.maxAboveZero, page.maxZeroNoFees, page.maxZeroNoBal);
        page.maxFromLots.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_CALCULATING);
        page.maxFromLotsLbl.textContent = '';
        this.maxOrderUpdateCounter++;
        const counter = this.maxOrderUpdateCounter;
        this.maxEstimateTimer = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            this.maxEstimateTimer = null;
            if (counter !== this.maxOrderUpdateCounter)
                return;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)(path, Object.assign({ host: this.market.dex.host, base: bid, quote: qid }, args));
            if (counter !== this.maxOrderUpdateCounter)
                return;
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res)) {
                console.warn('max order estimate not available:', res);
                page.maxFromLots.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ESTIMATE_UNAVAILABLE);
                if (this.maxLoaded) {
                    this.maxLoaded();
                    this.maxLoaded = null;
                }
                return;
            }
            success(res);
        }), delay);
    }
    /* setMaxOrder sets the max order text. */
    setMaxOrder(maxOrder) {
        const page = this.page;
        if (this.maxLoaded) {
            this.maxLoaded();
            this.maxLoaded = null;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxOrd, page.maxLotBox);
        const sell = this.isSell();
        let lots = 0;
        if (maxOrder)
            lots = maxOrder.lots;
        page.maxFromLots.textContent = lots.toString();
        // XXX add plural into format details, so we don't need this
        page.maxFromLotsLbl.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(lots === 1 ? _locales__WEBPACK_IMPORTED_MODULE_10__.ID_LOT : _locales__WEBPACK_IMPORTED_MODULE_10__.ID_LOTS);
        if (!maxOrder)
            return;
        const fromAsset = sell ? this.market.base : this.market.quote;
        if (lots === 0) {
            // If we have a maxOrder, see if we can guess why we have no lots.
            let lotSize = this.market.cfg.lotsize;
            if (!sell) {
                const conversionRate = this.anyRate()[1];
                if (conversionRate === 0)
                    return;
                lotSize = lotSize * conversionRate;
            }
            const haveQty = fromAsset.wallet.balance.available / lotSize > 0;
            if (haveQty) {
                if (fromAsset.token) {
                    const { wallet: { balance: { available: feeAvail } }, unitInfo } = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[fromAsset.token.parentID];
                    if (feeAvail < maxOrder.feeReservesPerLot) {
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxZeroNoFees);
                        page.maxZeroNoFeesTicker.textContent = unitInfo.conventional.unit;
                        page.maxZeroMinFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(maxOrder.feeReservesPerLot, unitInfo);
                    }
                    // It looks like we should be able to afford it, but maybe some fees we're not seeing.
                    // Show nothing.
                    return;
                }
                // Not a token. Maybe we have enough for the swap but not for fees.
                const fundedLots = fromAsset.wallet.balance.available / (lotSize + maxOrder.feeReservesPerLot);
                if (fundedLots > 0)
                    return; // Not sure why. Could be split txs or utxos. Just show nothing.
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxZeroNoBal);
            page.maxZeroNoBalTicker.textContent = fromAsset.unitInfo.conventional.unit;
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxAboveZero);
        page.maxFromAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(maxOrder.value || 0, fromAsset.unitInfo);
        page.maxFromTicker.textContent = fromAsset.unitInfo.conventional.unit;
        // Could subtract the maxOrder.redemptionFees here.
        // The qty conversion doesn't fit well with the new design.
        // TODO: Make this work somehow?
        // const toConversion = sell ? this.adjustedRate() / OrderUtil.RateEncodingFactor : OrderUtil.RateEncodingFactor / this.adjustedRate()
        // page.maxToAmt.textContent = Doc.formatCoinValue((maxOrder.value || 0) * toConversion, toAsset.unitInfo)
        // page.maxToTicker.textContent = toAsset.symbol.toUpperCase()
    }
    /*
     * validateOrder performs some basic order sanity checks, returning boolean
     * true if the order appears valid.
     */
    validateOrder(order) {
        const { page, market: { cfg: { minimumRate }, rateConversionFactor } } = this;
        if (order.isLimit) {
            if (!order.rate) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderErr);
                page.orderErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NO_ZERO_RATE);
                return false;
            }
            if (order.rate < minimumRate) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderErr);
                const [r, minRate] = [order.rate / rateConversionFactor, minimumRate / rateConversionFactor];
                page.orderErr.textContent = `rate is lower than the market's minimum rate. ${r} < ${minRate}`;
                return false;
            }
        }
        if (!order.qty) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderErr);
            page.orderErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NO_ZERO_QUANTITY);
            return false;
        }
        return true;
    }
    /* handleBook accepts the data sent in the 'book' notification. */
    handleBook(data) {
        var _a;
        const { cfg, baseUnitInfo, quoteUnitInfo, baseCfg, quoteCfg } = this.market;
        this.book = new _orderbook__WEBPACK_IMPORTED_MODULE_3__["default"](data, baseCfg.symbol, quoteCfg.symbol);
        this.loadTable();
        for (const order of (data.book.epoch || [])) {
            if (order.rate > 0)
                this.book.add(order);
            this.addTableOrder(order);
        }
        if (!this.book) {
            this.depthChart.clear();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.buyRows);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.sellRows);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.epochLine);
        if (this.loadingAnimations.depth)
            this.loadingAnimations.depth.stop();
        this.depthChart.canvas.classList.remove('invisible');
        this.depthChart.set(this.book, cfg.lotsize, cfg.ratestep, baseUnitInfo, quoteUnitInfo);
        this.recentMatches = (_a = data.book.recentMatches) !== null && _a !== void 0 ? _a : [];
        this.refreshRecentMatchesTable();
    }
    /*
     * midGapConventional is the same as midGap, but returns the mid-gap rate as
     * the conventional ratio. This is used to convert from a conventional
     * quantity from base to quote or vice-versa, or for display purposes.
     */
    midGapConventional() {
        const gap = this.midGap();
        if (!gap)
            return gap;
        const { baseUnitInfo: b, quoteUnitInfo: q } = this.market;
        return gap * b.conventional.conversionFactor / q.conventional.conversionFactor;
    }
    /*
     * midGap returns the value in the middle of the best buy and best sell. If
     * either one of the buy or sell sides are empty, midGap returns the best rate
     * from the other side. If both sides are empty, midGap returns the value
     * null. The rate returned is the atomic ratio, used for conversion. For a
     * conventional rate for display or to convert conventional units, use
     * midGapConventional
     */
    midGap() {
        const book = this.book;
        if (!book)
            return;
        if (book.buys && book.buys.length) {
            if (book.sells && book.sells.length) {
                return (book.buys[0].msgRate + book.sells[0].msgRate) / 2 / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor;
            }
            return book.buys[0].msgRate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor;
        }
        if (book.sells && book.sells.length) {
            return book.sells[0].msgRate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor;
        }
        return null;
    }
    /*
     * setMarketBuyOrderEstimate sets the "min. buy" display for the current
     * market.
     */
    setMarketBuyOrderEstimate() {
        const market = this.market;
        const lotSize = market.cfg.lotsize;
        const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().user.exchanges[market.dex.host];
        const buffer = xc.markets[market.sid].buybuffer;
        const gap = this.midGapConventional();
        if (gap) {
            this.page.minMktBuy.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(lotSize * buffer * gap, market.baseUnitInfo);
        }
    }
    maxUserOrderCount() {
        const { dex: { host }, cfg: { name: mktID } } = this.market;
        return Math.max(maxUserOrdersShown, (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().orders(host, mktID).length);
    }
    loadUserOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            const { base: b, quote: q, dex: { host }, cfg: { name: mktID } } = this.market;
            for (const oid in this.metaOrders)
                delete this.metaOrders[oid];
            if (!b || !q)
                return this.resolveUserOrders([]); // unsupported asset
            const activeOrders = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().orders(host, mktID);
            if (activeOrders.length >= maxUserOrdersShown)
                return this.resolveUserOrders(activeOrders);
            const filter = {
                hosts: [host],
                market: { baseID: b.id, quoteID: q.id },
                n: this.maxUserOrderCount()
            };
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/orders', filter);
            const orders = res.orders || [];
            // Make sure all active orders are in there. The /orders API sorts by time,
            // so if there is are 10 cancelled/executed orders newer than an old active
            // order, the active order wouldn't be included in the result.
            for (const activeOrd of activeOrders)
                if (!orders.some((dbOrd) => dbOrd.id === activeOrd.id))
                    orders.push(activeOrd);
            return this.resolveUserOrders(res.orders || []);
        });
    }
    /* refreshActiveOrders refreshes the user's active order list. */
    refreshActiveOrders() {
        const orders = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().orders(this.market.dex.host, marketID(this.market.baseCfg.symbol, this.market.quoteCfg.symbol));
        return this.resolveUserOrders(orders);
    }
    resolveUserOrders(orders) {
        const { page, metaOrders, market } = this;
        const cfg = market.cfg;
        const orderIsActive = (ord) => ord.status < _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusExecuted || _orderutil__WEBPACK_IMPORTED_MODULE_8__.hasActiveMatches(ord);
        for (const ord of orders)
            metaOrders[ord.id] = { ord: ord };
        let sortedOrders = Object.keys(metaOrders).map((oid) => metaOrders[oid]);
        sortedOrders.sort((a, b) => {
            const [aActive, bActive] = [orderIsActive(a.ord), orderIsActive(b.ord)];
            if (aActive && !bActive)
                return -1;
            else if (!aActive && bActive)
                return 1;
            return b.ord.submitTime - a.ord.submitTime;
        });
        const n = this.maxUserOrderCount();
        if (sortedOrders.length > n) {
            sortedOrders = sortedOrders.slice(0, n);
        }
        for (const oid in metaOrders)
            delete metaOrders[oid];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.userOrders);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(sortedOrders === null || sortedOrders === void 0 ? void 0 : sortedOrders.length, page.userOrders);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!(sortedOrders === null || sortedOrders === void 0 ? void 0 : sortedOrders.length), page.userNoOrders);
        let unreadyOrders = false;
        for (const mord of sortedOrders) {
            const div = page.userOrderTmpl.cloneNode(true);
            page.userOrders.appendChild(div);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
            const header = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tmpl.header);
            const details = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tmpl.details);
            mord.div = div;
            mord.header = header;
            mord.details = details;
            const ord = mord.ord;
            const orderID = ord.id;
            const isActive = orderIsActive(ord);
            // No need to track in-flight orders here. We've already added it to
            // display.
            if (orderID)
                metaOrders[orderID] = mord;
            if (!ord.readyToTick && _orderutil__WEBPACK_IMPORTED_MODULE_8__.hasActiveMatches(ord)) {
                tmpl.header.classList.add('unready-user-order');
                unreadyOrders = true;
            }
            header.sideLight.classList.add(ord.sell ? 'sell' : 'buy');
            if (!isActive)
                header.sideLight.classList.add('inactive');
            details.side.textContent = mord.header.side.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_8__.sellString(ord);
            details.side.classList.add(ord.sell ? 'sellcolor' : 'buycolor');
            header.side.classList.add(ord.sell ? 'sellcolor' : 'buycolor');
            details.qty.textContent = mord.header.qty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, market.baseUnitInfo);
            let rateStr;
            if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_8__.Market)
                rateStr = this.marketOrderRateString(ord, market);
            else
                rateStr = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatRateFullPrecision(ord.rate, market.baseUnitInfo, market.quoteUnitInfo, cfg.ratestep);
            details.rate.textContent = mord.header.rate.textContent = rateStr;
            header.baseSymbol.textContent = market.baseUnitInfo.conventional.unit;
            details.type.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_8__.orderTypeText(ord.type);
            this.updateMetaOrder(mord);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(div, 'mouseenter', () => {
                this.activeMarkerRate = ord.rate;
                this.setDepthMarkers();
            });
            const showCancel = (e) => {
                e.stopPropagation();
                this.showCancel(div, orderID);
            };
            const showAccelerate = (e) => {
                e.stopPropagation();
                this.showAccelerate(ord);
            };
            if (!orderID) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(details.accelerateBttn);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(details.cancelBttn);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(details.link);
            }
            else {
                if (_orderutil__WEBPACK_IMPORTED_MODULE_8__.isCancellable(ord)) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(details.cancelBttn);
                    bind(details.cancelBttn, 'click', (e) => { showCancel(e); });
                }
                bind(details.accelerateBttn, 'click', (e) => { showAccelerate(e); });
                if ((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().canAccelerateOrder(ord)) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(details.accelerateBttn);
                }
                details.link.href = `order/${orderID}`;
                (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindInternalNavigation(div);
            }
            let currentFloater;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.header, 'click', () => {
                if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(tmpl.details)) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.details);
                    header.expander.classList.add('ico-arrowdown');
                    header.expander.classList.remove('ico-arrowup');
                    return;
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.details);
                header.expander.classList.remove('ico-arrowdown');
                header.expander.classList.add('ico-arrowup');
                if (currentFloater)
                    currentFloater.remove();
            });
            /**
             * We'll show the button menu when they hover over the header. To avoid
             * pushing the layout around, we'll show the buttons as an absolutely
             * positioned copy of the button menu.
             */
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.header, 'mouseenter', () => {
                // Don't show the copy if the details are already displayed.
                if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(tmpl.details))
                    return;
                if (currentFloater)
                    currentFloater.remove();
                // Create and position the element based on the position of the header.
                const floater = document.createElement('div');
                currentFloater = floater;
                document.body.appendChild(floater);
                floater.className = 'user-order-floaty-menu';
                const m = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].layoutMetrics(tmpl.header);
                const y = m.bodyTop + m.height;
                floater.style.top = `${y - 1}px`; // - 1 to hide border on header div
                floater.style.left = `${m.bodyLeft}px`;
                // Get the updated version of the order
                const mord = this.metaOrders[orderID];
                const ord = mord.ord;
                const addButton = (baseBttn, cb) => {
                    const icon = baseBttn.cloneNode(true);
                    floater.appendChild(icon);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(icon);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(icon, 'click', (e) => { cb(e); });
                };
                if (_orderutil__WEBPACK_IMPORTED_MODULE_8__.isCancellable(ord))
                    addButton(details.cancelBttn, (e) => { showCancel(e); });
                if ((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().canAccelerateOrder(ord))
                    addButton(details.accelerateBttn, (e) => { showAccelerate(e); });
                floater.appendChild(details.link.cloneNode(true));
                const ogScrollY = page.orderScroller.scrollTop;
                // Set up the hover interactions.
                const moved = (e) => {
                    // If the user scrolled, reposition the float menu. This keeps the
                    // menu from following us around, which can prevent removal below.
                    const yShift = page.orderScroller.scrollTop - ogScrollY;
                    floater.style.top = `${y + yShift}px`;
                    if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, floater) || _doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, div))
                        return;
                    floater.remove();
                    currentFloater = null;
                    document.removeEventListener('mousemove', moved);
                    page.orderScroller.removeEventListener('scroll', moved);
                };
                document.addEventListener('mousemove', moved);
                page.orderScroller.addEventListener('scroll', moved);
            });
            (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindTooltips(div);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(unreadyOrders, page.unreadyOrdersMsg);
        this.setDepthMarkers();
    }
    /*
     marketOrderRateString uses the market config rate step to format the average
     market order rate.
    */
    marketOrderRateString(ord, mkt) {
        var _a;
        if (!((_a = ord.matches) === null || _a === void 0 ? void 0 : _a.length))
            return _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_MARKET_ORDER);
        let rateStr = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatRateFullPrecision(_orderutil__WEBPACK_IMPORTED_MODULE_8__.averageRate(ord), mkt.baseUnitInfo, mkt.quoteUnitInfo, mkt.cfg.ratestep);
        if (ord.matches.length > 1)
            rateStr = '~ ' + rateStr; // ~ only makes sense if the order has more than one match
        return rateStr;
    }
    /*
    * updateMetaOrder sets the td contents of the user's order table row.
    */
    updateMetaOrder(mord) {
        const { header, details, ord } = mord;
        if (ord.status <= _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked || _orderutil__WEBPACK_IMPORTED_MODULE_8__.hasActiveMatches(ord))
            header.activeLight.classList.add('active');
        else
            header.activeLight.classList.remove('active');
        details.status.textContent = header.status.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_8__.statusString(ord);
        details.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(ord.submitTime);
        details.filled.textContent = `${(_orderutil__WEBPACK_IMPORTED_MODULE_8__.filled(ord) / ord.qty * 100).toFixed(1)}%`;
        details.settled.textContent = `${(_orderutil__WEBPACK_IMPORTED_MODULE_8__.settled(ord) / ord.qty * 100).toFixed(1)}%`;
    }
    /* setMarkers sets the depth chart markers for booked orders. */
    setDepthMarkers() {
        const markers = {
            buys: [],
            sells: []
        };
        const rateFactor = this.market.rateConversionFactor;
        for (const { ord } of Object.values(this.metaOrders)) {
            if (ord.rate && ord.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked) {
                if (ord.sell) {
                    markers.sells.push({
                        rate: ord.rate / rateFactor,
                        active: ord.rate === this.activeMarkerRate
                    });
                }
                else {
                    markers.buys.push({
                        rate: ord.rate / rateFactor,
                        active: ord.rate === this.activeMarkerRate
                    });
                }
            }
        }
        this.depthChart.setMarkers(markers);
        if (this.book)
            this.depthChart.draw();
    }
    /* updateTitle update the browser title based on the midgap value and the
     * selected assets.
     */
    updateTitle() {
        // gets first price value from buy or from sell, so we can show it on
        // title.
        const midGapValue = this.midGapConventional();
        const { baseUnitInfo: { conventional: { unit: bUnit } }, quoteUnitInfo: { conventional: { unit: qUnit } } } = this.market;
        if (!midGapValue)
            document.title = `${bUnit}${qUnit} | ${this.ogTitle}`;
        else
            document.title = `${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(midGapValue)} | ${bUnit}${qUnit} | ${this.ogTitle}`; // more than 6 numbers it gets too big for the title.
    }
    /* handleBookRoute is the handler for the 'book' notification, which is sent
     * in response to a new market subscription. The data received will contain
     * the entire order book.
     */
    handleBookRoute(note) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleBookRoute:', note);
        const mktBook = note.payload;
        const { baseCfg: b, quoteCfg: q, dex: { host } } = this.market;
        if (mktBook.base !== b.id || mktBook.quote !== q.id || note.host !== host)
            return; // user already changed markets
        this.handleBook(mktBook);
        this.market.bookLoaded = true;
        this.updateTitle();
        this.setMarketBuyOrderEstimate();
    }
    /* handleBookOrderRoute is the handler for 'book_order' notifications. */
    handleBookOrderRoute(data) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleBookOrderRoute:', data);
        if (data.host !== this.market.dex.host || data.marketID !== this.market.sid)
            return;
        const order = data.payload;
        if (order.rate > 0)
            this.book.add(order);
        this.addTableOrder(order);
        this.updateTitle();
        this.depthChart.draw();
    }
    /* handleUnbookOrderRoute is the handler for 'unbook_order' notifications. */
    handleUnbookOrderRoute(data) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleUnbookOrderRoute:', data);
        if (data.host !== this.market.dex.host || data.marketID !== this.market.sid)
            return;
        const order = data.payload;
        this.book.remove(order.token);
        this.removeTableOrder(order);
        this.updateTitle();
        this.depthChart.draw();
    }
    /*
     * handleUpdateRemainingRoute is the handler for 'update_remaining'
     * notifications.
     */
    handleUpdateRemainingRoute(data) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleUpdateRemainingRoute:', data);
        if (data.host !== this.market.dex.host || data.marketID !== this.market.sid)
            return;
        const update = data.payload;
        this.book.updateRemaining(update.token, update.qty, update.qtyAtomic);
        this.updateTableOrder(update);
        this.depthChart.draw();
    }
    /* handleEpochOrderRoute is the handler for 'epoch_order' notifications. */
    handleEpochOrderRoute(data) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleEpochOrderRoute:', data);
        if (data.host !== this.market.dex.host || data.marketID !== this.market.sid)
            return;
        const order = data.payload;
        if (order.msgRate > 0)
            this.book.add(order); // No cancels or market orders
        if (order.qtyAtomic > 0)
            this.addTableOrder(order); // No cancel orders
        this.depthChart.draw();
    }
    /* handleCandlesRoute is the handler for 'candles' notifications. */
    handleCandlesRoute(data) {
        if (this.candlesLoading) {
            clearTimeout(this.candlesLoading.timer);
            this.candlesLoading.loaded();
            this.candlesLoading = null;
        }
        if (data.host !== this.market.dex.host || data.marketID !== this.market.cfg.name)
            return;
        const dur = data.payload.dur;
        this.market.candleCaches[dur] = data.payload;
        this.setHighLow();
        if (this.candleDur !== dur)
            return;
        if (this.loadingAnimations.candles)
            this.loadingAnimations.candles.stop();
        this.candleChart.canvas.classList.remove('invisible');
        this.candleChart.setCandles(data.payload, this.market.cfg, this.market.baseUnitInfo, this.market.quoteUnitInfo);
    }
    handleEpochMatchSummary(data) {
        this.addRecentMatches(data.payload.matchSummaries);
        this.refreshRecentMatchesTable();
    }
    /* handleCandleUpdateRoute is the handler for 'candle_update' notifications. */
    handleCandleUpdateRoute(data) {
        if (data.host !== this.market.dex.host)
            return;
        const { dur, candle } = data.payload;
        const cache = this.market.candleCaches[dur];
        if (!cache)
            return; // must not have seen the 'candles' notification yet?
        const candles = cache.candles;
        if (candles.length === 0)
            candles.push(candle);
        else {
            const last = candles[candles.length - 1];
            if (last.startStamp === candle.startStamp)
                candles[candles.length - 1] = candle;
            else
                candles.push(candle);
        }
        if (this.candleDur !== dur)
            return;
        this.candleChart.draw();
    }
    /*
     * showToggleWalletStatus displays the toggleWalletStatusConfirm form to
     * enable a wallet.
     */
    showToggleWalletStatus(asset) {
        const page = this.page;
        this.openAsset = asset;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.toggleWalletStatusErr, page.walletStatusDisable, page.disableWalletMsg);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.walletStatusEnable, page.enableWalletMsg);
        this.forms.show(page.toggleWalletStatusConfirm);
    }
    /*
     * toggleWalletStatus toggle wallets status to enabled.
     */
    toggleWalletStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.toggleWalletStatusErr);
            const url = '/api/togglewalletstatus';
            const req = {
                assetID: this.openAsset.id,
                disable: false
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(page.toggleWalletStatusConfirm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)(url, req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res)) {
                page.toggleWalletStatusErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.toggleWalletStatusErr);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.forms);
            this.balanceWgt.updateAsset(this.openAsset.id);
        });
    }
    /* showVerify shows the form to accept the currently parsed order information
     * and confirm submission of the order to the dex.
     */
    showVerify() {
        this.preorderCache = {};
        const page = this.page;
        const order = this.currentOrder = this.parseOrder();
        const isSell = order.sell;
        const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[order.base];
        const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[order.quote];
        const toAsset = isSell ? quoteAsset : baseAsset;
        const fromAsset = isSell ? baseAsset : quoteAsset;
        const setIcon = (icon) => {
            switch (icon.dataset.icon) {
                case 'from':
                    if (fromAsset.token) {
                        const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[fromAsset.token.parentID];
                        icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
                    }
                    else {
                        icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(fromAsset.symbol);
                    }
                    break;
                case 'to':
                    if (toAsset.token) {
                        const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[toAsset.token.parentID];
                        icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
                    }
                    else {
                        icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(toAsset.symbol);
                    }
            }
        };
        // Set the to and from icons in the fee details pane.
        for (const icon of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.vDetailPane, '[data-icon]')) {
            setIcon(icon);
        }
        // Set the to and from icons in the fee summary pane.
        for (const icon of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.vFeeSummary, '[data-icon]')) {
            setIcon(icon);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorderErr);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vPreorder);
        page.vBuySell.textContent = isSell ? _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_SELLING) : _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_BUYING);
        const buySellStr = isSell ? _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_SELL) : _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_BUY);
        page.vSideSubmit.textContent = buySellStr;
        page.vOrderHost.textContent = order.host;
        if (order.isLimit) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.verifyLimit);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.verifyMarket);
            const orderDesc = `Limit ${buySellStr} Order`;
            page.vOrderType.textContent = order.tifnow ? orderDesc + ' (immediate)' : orderDesc;
            page.vRate.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(order.rate / this.market.rateConversionFactor);
            page.vQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(order.qty, baseAsset.unitInfo);
            const total = order.rate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor * order.qty;
            page.vTotal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(total, quoteAsset.unitInfo);
            // Format total fiat value.
            this.showFiatValue(quoteAsset.id, total, page.vFiatTotal);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.verifyLimit);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.verifyMarket);
            page.vOrderType.textContent = `Market ${buySellStr} Order`;
            const ui = order.sell ? this.market.baseUnitInfo : this.market.quoteUnitInfo;
            page.vmFromTotal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(order.qty, ui);
            page.vmFromAsset.textContent = fromAsset.symbol.toUpperCase();
            // Format fromAsset fiat value.
            this.showFiatValue(fromAsset.id, order.qty, page.vmFromTotalFiat);
            const gap = this.midGap();
            if (gap) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vMarketEstimate);
                const received = order.sell ? order.qty * gap : order.qty / gap;
                page.vmToTotal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(received, toAsset.unitInfo);
                page.vmToAsset.textContent = toAsset.symbol.toUpperCase();
                // Format received value to fiat equivalent.
                this.showFiatValue(toAsset.id, received, page.vmTotalFiat);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vMarketEstimate);
            }
        }
        // Visually differentiate between buy/sell orders.
        if (isSell) {
            page.vHeader.classList.add(sellBtnClass);
            page.vHeader.classList.remove(buyBtnClass);
            page.vSubmit.classList.add(sellBtnClass);
            page.vSubmit.classList.remove(buyBtnClass);
        }
        else {
            page.vHeader.classList.add(buyBtnClass);
            page.vHeader.classList.remove(sellBtnClass);
            page.vSubmit.classList.add(buyBtnClass);
            page.vSubmit.classList.remove(sellBtnClass);
        }
        this.showVerifyForm();
        if (baseAsset.wallet.open && quoteAsset.wallet.open)
            this.preOrder(order);
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorder);
            this.unlockWalletsForEstimates();
        }
    }
    // showFiatValue displays the fiat equivalent for an order quantity.
    showFiatValue(assetID, qty, display) {
        if (display) {
            const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[assetID];
            display.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFiatConversion(qty, rate, (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(assetID));
            if (rate)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(display.parentElement);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(display.parentElement);
        }
    }
    /* showVerifyForm displays form to verify an order */
    showVerifyForm() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vErr);
            this.forms.show(page.verifyForm);
        });
    }
    /*
     * unlockWalletsForEstimates unlocks any locked wallets with the provided
     * password.
     */
    unlockWalletsForEstimates() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(page.verifyForm);
            yield this.unlockMarketWallets();
            loaded();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vPreorder);
            this.preOrder(this.parseOrder());
        });
    }
    unlockWallet(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/openwallet', { assetID });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res)) {
                throw Error('error unlocking wallet ' + res.msg);
            }
            this.balanceWgt.updateAsset(assetID);
        });
    }
    /*
     * unlockMarketWallets unlocks both the base and quote wallets for the current
     * market, if locked.
     */
    unlockMarketWallets() {
        return __awaiter(this, void 0, void 0, function* () {
            const { base, quote } = this.market;
            const assetIDs = [];
            if (!base.wallet.open)
                assetIDs.push(base.id);
            if (!quote.wallet.open)
                assetIDs.push(quote.id);
            for (const assetID of assetIDs) {
                this.unlockWallet(assetID);
            }
        });
    }
    /* fetchPreorder fetches the pre-order estimates and options. */
    fetchPreorder(order) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const cacheKey = JSON.stringify(order.options);
            const cached = this.preorderCache[cacheKey];
            if (cached)
                return cached;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorderErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(page.verifyForm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/preorder', wireOrder(order));
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res))
                return { err: res.msg };
            this.preorderCache[cacheKey] = res.estimate;
            return res.estimate;
        });
    }
    /*
     * setPreorderErr sets and displays the pre-order error message and hides the
     * pre-order details box.
     */
    setPreorderErr(msg) {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorder);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vPreorderErr);
        page.vPreorderErrTip.dataset.tooltip = msg;
    }
    showPreOrderAdvancedOptions() {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.showAdvancedOptions);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.hideAdvancedOptions, page.vOtherOrderOpts);
    }
    hidePreOrderAdvancedOptions() {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.hideAdvancedOptions, page.vOtherOrderOpts);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.showAdvancedOptions);
    }
    reloadOrderOpts(order, swap, redeem, changed) {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.vDefaultOrderOpts, page.vOtherOrderOpts);
        const addOption = (opt, isSwap) => {
            const el = _orderutil__WEBPACK_IMPORTED_MODULE_8__.optionElement(opt, order, changed, isSwap);
            if (opt.showByDefault)
                page.vDefaultOrderOpts.appendChild(el);
            else
                page.vOtherOrderOpts.appendChild(el);
        };
        for (const opt of swap.options || [])
            addOption(opt, true);
        for (const opt of redeem.options || [])
            addOption(opt, false);
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindTooltips(page.vDefaultOrderOpts);
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindTooltips(page.vOtherOrderOpts);
    }
    /* preOrder loads the options and fetches pre-order estimates */
    preOrder(order) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            // Add swap options.
            const refreshPreorder = () => __awaiter(this, void 0, void 0, function* () {
                const res = yield this.fetchPreorder(order);
                if (res.err)
                    return this.setPreorderErr(res.err);
                const est = res;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorderErr);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vPreorder);
                const { swap, redeem } = est;
                swap.options = swap.options || [];
                redeem.options = redeem.options || [];
                this.setFeeEstimates(swap, redeem, order);
                const changed = () => __awaiter(this, void 0, void 0, function* () {
                    yield refreshPreorder();
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(400, progress => {
                        page.vFeeSummary.style.backgroundColor = `rgba(128, 128, 128, ${0.5 - 0.5 * progress})`;
                    });
                });
                // bind show or hide advanced pre order options.
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showAdvancedOptions, 'click', () => { this.showPreOrderAdvancedOptions(); });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.hideAdvancedOptions, 'click', () => { this.hidePreOrderAdvancedOptions(); });
                this.reloadOrderOpts(order, swap, redeem, changed);
            });
            refreshPreorder();
        });
    }
    /* setFeeEstimates sets all of the pre-order estimate fields */
    setFeeEstimates(swap, redeem, order) {
        const { page, market } = this;
        if (!swap.estimate || !redeem.estimate) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vPreorderEstimates);
            return; // preOrder may return just options, no fee estimates
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vPreorderEstimates);
        const { baseUnitInfo, quoteUnitInfo, rateConversionFactor } = market;
        const fmtPct = (value) => {
            if (value < 0.05)
                return '< 0.1';
            return percentFormatter.format(value);
        };
        // If the asset is a token, in order to calculate the fee as a percentage
        // of the total order, we try to  use the fiat rates to find out the
        // exchange rate between the token and parent assets.
        // Initially these are set to 1, which we would use if the asset is not a
        // token and no conversion is needed.
        let baseExchangeRate = 1;
        let quoteExchangeRate = 1;
        let baseFeeAssetUI = baseUnitInfo;
        let quoteFeeAssetUI = quoteUnitInfo;
        if (market.base.token) {
            const parent = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[market.base.token.parentID];
            baseFeeAssetUI = parent.unitInfo;
            const tokenFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[market.base.id];
            const parentFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[parent.id];
            if (tokenFiatRate && parentFiatRate) {
                const conventionalRate = parentFiatRate / tokenFiatRate;
                baseExchangeRate = conventionalRate * baseUnitInfo.conventional.conversionFactor / parent.unitInfo.conventional.conversionFactor;
            }
            else {
                baseExchangeRate = 0;
            }
        }
        if (market.quote.token) {
            const parent = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[market.quote.token.parentID];
            quoteFeeAssetUI = parent.unitInfo;
            const tokenFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[market.quote.id];
            const parentFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[parent.id];
            if (tokenFiatRate && parentFiatRate) {
                const conventionalRate = parentFiatRate / tokenFiatRate;
                quoteExchangeRate = conventionalRate * quoteUnitInfo.conventional.conversionFactor / parent.unitInfo.conventional.conversionFactor;
            }
            else {
                quoteExchangeRate = 0;
            }
        }
        let [toFeeAssetUI, fromFeeAssetUI] = [baseFeeAssetUI, quoteFeeAssetUI];
        let [toExchangeRate, fromExchangeRate] = [baseExchangeRate, quoteExchangeRate];
        if (this.currentOrder.sell) {
            [fromFeeAssetUI, toFeeAssetUI] = [toFeeAssetUI, fromFeeAssetUI];
            [fromExchangeRate, toExchangeRate] = [toExchangeRate, fromExchangeRate];
        }
        const swapped = swap.estimate.value || 0;
        const swappedInParentUnits = fromExchangeRate > 0 ? swapped / fromExchangeRate : swapped;
        // Set swap fee estimates in the details pane.
        const bestSwapPct = swap.estimate.realisticBestCase / swappedInParentUnits * 100;
        page.vSwapFeesLowPct.textContent = fromExchangeRate <= 0 ? '' : `(${fmtPct(bestSwapPct)}%)`;
        page.vSwapFeesLow.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(swap.estimate.realisticBestCase, fromFeeAssetUI);
        const worstSwapPct = swap.estimate.realisticWorstCase / swappedInParentUnits * 100;
        page.vSwapFeesHighPct.textContent = fromExchangeRate <= 0 ? '' : `(${fmtPct(worstSwapPct)}%)`;
        page.vSwapFeesHigh.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(swap.estimate.realisticWorstCase, fromFeeAssetUI);
        const swapFeesMaxPct = swap.estimate.maxFees / swappedInParentUnits * 100;
        page.vSwapFeesMaxPct.textContent = fromExchangeRate <= 0 ? '' : `(${fmtPct(swapFeesMaxPct)}%)`;
        page.vSwapFeesMax.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(swap.estimate.maxFees, fromFeeAssetUI);
        // Set redemption fee estimates in the details pane.
        const midGap = this.midGap();
        const estRate = midGap || order.rate / rateConversionFactor;
        const received = order.sell ? swapped * estRate : swapped / estRate;
        const receivedInParentUnits = toExchangeRate > 0 ? received / toExchangeRate : received;
        const bestRedeemPct = redeem.estimate.realisticBestCase / receivedInParentUnits * 100;
        page.vRedeemFeesLowPct.textContent = toExchangeRate <= 0 ? '' : `(${fmtPct(bestRedeemPct)}%)`;
        page.vRedeemFeesLow.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(redeem.estimate.realisticBestCase, toFeeAssetUI);
        const worstRedeemPct = redeem.estimate.realisticWorstCase / receivedInParentUnits * 100;
        page.vRedeemFeesHighPct.textContent = toExchangeRate <= 0 ? '' : `(${fmtPct(worstRedeemPct)}%)`;
        page.vRedeemFeesHigh.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(redeem.estimate.realisticWorstCase, toFeeAssetUI);
        if (baseExchangeRate && quoteExchangeRate) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vFeeSummaryPct);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vFeeSummary);
            page.vFeeSummaryLow.textContent = fmtPct(bestSwapPct + bestRedeemPct);
            page.vFeeSummaryHigh.textContent = fmtPct(worstSwapPct + worstRedeemPct);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vFeeSummaryPct);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vFeeSummary);
            page.summarySwapFeesLow.textContent = page.vSwapFeesLow.textContent;
            page.summarySwapFeesHigh.textContent = page.vSwapFeesHigh.textContent;
            page.summaryRedeemFeesLow.textContent = page.vRedeemFeesLow.textContent;
            page.summaryRedeemFeesHigh.textContent = page.vRedeemFeesHigh.textContent;
        }
    }
    submitCancel() {
        return __awaiter(this, void 0, void 0, function* () {
            // this will be the page.cancelSubmit button (evt.currentTarget)
            const page = this.page;
            const cancelData = this.cancelData;
            const order = cancelData.order;
            const req = {
                orderID: order.id
            };
            // Toggle the loader and submit button.
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(page.cancelSubmit);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/cancel', req);
            loaded();
            // Display error on confirmation modal.
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res)) {
                page.cancelErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.cancelErr);
                return;
            }
            // Hide confirmation modal only on success.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(cancelData.bttn, page.forms);
            order.cancelling = true;
        });
    }
    /* showCancel shows a form to confirm submission of a cancel order. */
    showCancel(row, orderID) {
        const ord = this.metaOrders[orderID].ord;
        const page = this.page;
        const remaining = ord.qty - ord.filled;
        const asset = _orderutil__WEBPACK_IMPORTED_MODULE_8__.isMarketBuy(ord) ? this.market.quote : this.market.base;
        page.cancelRemain.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(remaining, asset.unitInfo);
        page.cancelUnit.textContent = asset.symbol.toUpperCase();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.cancelErr);
        this.forms.show(page.cancelForm);
        this.cancelData = {
            bttn: _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(row, 'cancelBttn'),
            order: ord
        };
    }
    /* showAccelerate shows the accelerate order form. */
    showAccelerate(order) {
        const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loading(this.main);
        this.accelerateOrderForm.refresh(order);
        loaded();
        this.forms.show(this.page.accelerateForm);
    }
    /* showCreate shows the new wallet creation form. */
    showCreate(asset) {
        const page = this.page;
        this.currentCreate = asset;
        this.newWalletForm.setAsset(asset.id);
        this.forms.show(page.newWalletForm);
    }
    /*
     * stepSubmit will examine the current state of wallets and step the user
     * through the process of order submission.
     * NOTE: I expect this process will be streamlined soon such that the wallets
     * will attempt to be unlocked in the order submission process, negating the
     * need to unlock ahead of time.
     */
    stepSubmit() {
        const page = this.page;
        const market = this.market;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.orderErr);
        if (!this.validateOrder(this.parseOrder()))
            return;
        const baseWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().walletMap[market.base.id];
        const quoteWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().walletMap[market.quote.id];
        if (!baseWallet) {
            page.orderErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NO_ASSET_WALLET, { asset: market.base.symbol });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderErr);
            return;
        }
        if (!quoteWallet) {
            page.orderErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_NO_ASSET_WALLET, { asset: market.quote.symbol });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderErr);
            return;
        }
        this.showVerify();
    }
    /* Display a deposit address. */
    showDeposit(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.depositAddrForm.setAsset(assetID);
            this.forms.show(this.page.deposit);
        });
    }
    showCustomProviderDialog(assetID) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loadPage('wallets', { promptProvider: assetID, goBack: 'markets' });
    }
    /*
     * handlePriceUpdate is the handler for the 'spots' notification.
     */
    handlePriceUpdate(note) {
        if (!this.market)
            return; // This note can arrive before the market is set.
        if (note.host === this.market.dex.host && note.spots[this.market.cfg.name]) {
            this.setCurrMarketPrice();
        }
        this.marketList.updateSpots(note);
    }
    handleWalletState(note) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.market)
                return; // This note can arrive before the market is set.
            // if (note.topic !== 'TokenApproval') return
            if (note.wallet.assetID !== ((_a = this.market.base) === null || _a === void 0 ? void 0 : _a.id) && note.wallet.assetID !== ((_b = this.market.quote) === null || _b === void 0 ? void 0 : _b.id))
                return;
            this.setTokenApprovalVisibility();
            this.resolveOrderFormVisibility();
        });
    }
    /*
     * handleBondUpdate is the handler for the 'bondpost' notification type.
     * This is used to update the registration status of the current exchange.
     */
    handleBondUpdate(note) {
        return __awaiter(this, void 0, void 0, function* () {
            const dexAddr = note.dex;
            if (!this.market)
                return; // This note can arrive before the market is set.
            if (dexAddr !== this.market.dex.host)
                return;
            // If we just finished legacy registration, we need to update the Exchange.
            // TODO: Use tier change notification once available.
            if (note.topic === 'AccountRegistered')
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fetchUser();
            // Update local copy of Exchange.
            this.market.dex = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges[dexAddr];
            this.setRegistrationStatusVisibility();
            this.updateReputation();
        });
    }
    updateReputation() {
        const { page, market: { dex: { host }, cfg: mkt, baseCfg: { unitInfo: bui }, quoteCfg: { unitInfo: qui } } } = this;
        const { auth } = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges[host];
        page.parcelSizeLots.textContent = String(mkt.parcelsize);
        page.marketLimitBase.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(mkt.parcelsize * mkt.lotsize / bui.conventional.conversionFactor);
        page.marketLimitBaseUnit.textContent = bui.conventional.unit;
        page.marketLimitQuoteUnit.textContent = qui.conventional.unit;
        const conversionRate = this.anyRate()[1];
        if (conversionRate) {
            const quoteLot = mkt.lotsize * conversionRate;
            page.marketLimitQuote.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(mkt.parcelsize * quoteLot / qui.conventional.conversionFactor);
        }
        else
            page.marketLimitQuote.textContent = '-';
        const tier = (0,_account__WEBPACK_IMPORTED_MODULE_4__.strongTier)(auth);
        page.tradingTier.textContent = String(tier);
        const [usedParcels, parcelLimit] = (0,_account__WEBPACK_IMPORTED_MODULE_4__.tradingLimits)(host);
        page.tradingLimit.textContent = (parcelLimit * mkt.parcelsize).toFixed(2);
        page.limitUsage.textContent = parcelLimit > 0 ? (usedParcels / parcelLimit * 100).toFixed(1) : '0';
        page.orderLimitRemain.textContent = ((parcelLimit - usedParcels) * mkt.parcelsize).toFixed(1);
        page.orderTradingTier.textContent = String(tier);
        this.reputationMeter.update();
    }
    /*
     * anyRate finds the best rate from any of, in order of priority, the order
     * book, the server's reported spot rate, or the fiat exchange rates. A
     * 3-tuple of message-rate encoding, a conversion rate, and a conventional
     * rate is generated.
     */
    anyRate() {
        const { cfg: { spot }, baseCfg: { id: baseID }, quoteCfg: { id: quoteID }, rateConversionFactor, bookLoaded } = this.market;
        if (bookLoaded) {
            const midGap = this.midGap();
            if (midGap)
                return [midGap * _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor, midGap, this.midGapConventional() || 0];
        }
        if (spot && spot.rate)
            return [spot.rate, spot.rate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor, spot.rate / rateConversionFactor];
        const [baseUSD, quoteUSD] = [(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fiatRatesMap[quoteID]];
        if (baseUSD && quoteUSD) {
            const conventionalRate = baseUSD / quoteUSD;
            const msgRate = conventionalRate * rateConversionFactor;
            const conversionRate = msgRate / _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor;
            return [msgRate, conversionRate, conventionalRate];
        }
        return [0, 0, 0];
    }
    handleMatchNote(note) {
        const mord = this.metaOrders[note.orderID];
        const match = note.match;
        if (!mord)
            return this.refreshActiveOrders();
        else if (mord.ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_8__.Market && match.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.NewlyMatched) { // Update the average market rate display.
            // Fetch and use the updated order.
            const ord = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().order(note.orderID);
            if (ord)
                mord.details.rate.textContent = mord.header.rate.textContent = this.marketOrderRateString(ord, this.market);
        }
        if ((match.side === _orderutil__WEBPACK_IMPORTED_MODULE_8__.MatchSideMaker && match.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.MakerRedeemed) ||
            (match.side === _orderutil__WEBPACK_IMPORTED_MODULE_8__.MatchSideTaker && match.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.MatchComplete))
            this.updateReputation();
        if ((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().canAccelerateOrder(mord.ord))
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(mord.details.accelerateBttn);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(mord.details.accelerateBttn);
    }
    /*
     * handleOrderNote is the handler for the 'order'-type notification, which are
     * used to update a user's order's status.
     */
    handleOrderNote(note) {
        const ord = note.order;
        const mord = this.metaOrders[ord.id];
        // - If metaOrder doesn't exist for the given order it means it was created
        //  via bwctl and the GUI isn't aware of it or it was an inflight order.
        //  refreshActiveOrders must be called to grab this order.
        // - If an OrderLoaded notification is recieved, it means an order that was
        //   previously not "ready to tick" (due to its wallets not being connected
        //   and unlocked) has now become ready to tick. The active orders section
        //   needs to be refreshed.
        const wasInflight = note.topic === 'AsyncOrderFailure' || note.topic === 'AsyncOrderSubmitted';
        if (!mord || wasInflight || (note.topic === 'OrderLoaded' && ord.readyToTick)) {
            return this.refreshActiveOrders();
        }
        const oldStatus = mord.ord.status;
        mord.ord = ord;
        if (note.topic === 'MissedCancel')
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(mord.details.cancelBttn);
        if (ord.filled === ord.qty)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(mord.details.cancelBttn);
        if ((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().canAccelerateOrder(ord))
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(mord.details.accelerateBttn);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(mord.details.accelerateBttn);
        this.updateMetaOrder(mord);
        // Only reset markers if there is a change, since the chart is redrawn.
        if ((oldStatus === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusEpoch && ord.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked) ||
            (oldStatus === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked && ord.status > _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked)) {
            this.setDepthMarkers();
            this.updateReputation();
            this.mm.readBook();
        }
    }
    /*
     * handleEpochNote handles notifications signalling the start of a new epoch.
     */
    handleEpochNote(note) {
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().log('book', 'handleEpochNote:', note);
        if (!this.market)
            return; // This note can arrive before the market is set.
        if (note.host !== this.market.dex.host || note.marketID !== this.market.sid)
            return;
        if (this.book) {
            this.book.setEpoch(note.epoch);
            this.depthChart.draw();
        }
        this.clearOrderTableEpochs();
        for (const { ord, details, header } of Object.values(this.metaOrders)) {
            const alreadyMatched = note.epoch > ord.epoch;
            switch (true) {
                case ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_8__.Limit && ord.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusEpoch && alreadyMatched: {
                    const status = ord.tif === _orderutil__WEBPACK_IMPORTED_MODULE_8__.ImmediateTiF ? _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_EXECUTED) : _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_BOOKED);
                    details.status.textContent = header.status.textContent = status;
                    ord.status = ord.tif === _orderutil__WEBPACK_IMPORTED_MODULE_8__.ImmediateTiF ? _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusExecuted : _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusBooked;
                    break;
                }
                case ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_8__.Market && ord.status === _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusEpoch:
                    // Technically don't know if this should be 'executed' or 'settling'.
                    details.status.textContent = header.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_EXECUTED);
                    ord.status = _orderutil__WEBPACK_IMPORTED_MODULE_8__.StatusExecuted;
                    break;
            }
        }
    }
    /*
     * recentMatchesSortCompare returns sort compare function according to the active
     * sort key and direction.
     */
    recentMatchesSortCompare() {
        switch (this.recentMatchesSortKey) {
            case 'rate':
                return (a, b) => this.recentMatchesSortDirection * (a.rate - b.rate);
            case 'qty':
                return (a, b) => this.recentMatchesSortDirection * (a.qty - b.qty);
            case 'age':
                return (a, b) => this.recentMatchesSortDirection * (a.stamp - b.stamp);
        }
    }
    refreshRecentMatchesTable() {
        const page = this.page;
        const recentMatches = this.recentMatches;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.recentMatchesLiveList);
        if (!recentMatches)
            return;
        const compare = this.recentMatchesSortCompare();
        recentMatches.sort(compare);
        for (const match of recentMatches) {
            const row = page.recentMatchesTemplate.cloneNode(true);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
            (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindTooltips(row);
            tmpl.rate.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(match.rate / this.market.rateConversionFactor);
            tmpl.qty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(match.qty, this.market.baseUnitInfo);
            tmpl.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(match.stamp);
            tmpl.age.dataset.sinceStamp = String(match.stamp);
            row.classList.add(match.sell ? 'sellcolor' : 'buycolor');
            page.recentMatchesLiveList.append(row);
        }
    }
    addRecentMatches(matches) {
        this.recentMatches = [...matches, ...this.recentMatches].slice(0, 100);
    }
    /* handleBalanceNote handles notifications updating a wallet's balance. */
    handleBalanceNote(note) {
        this.approveTokenForm.handleBalanceNote(note);
        this.preorderCache = {}; // invalidate previous preorder results
        // if connection to dex server fails, it is not possible to retrieve
        // markets.
        const mkt = this.market;
        if (!mkt || !mkt.dex || mkt.dex.connectionStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected)
            return;
        this.mm.handleBalanceNote(note);
        const wgt = this.balanceWgt;
        // Display the widget if the balance note is for its base or quote wallet.
        if ((note.assetID === wgt.base.id || note.assetID === wgt.quote.id))
            wgt.setBalanceVisibility(true);
        // If there's a balance update, refresh the max order section.
        const avail = note.balance.available;
        switch (note.assetID) {
            case mkt.baseCfg.id:
                // If we're not showing the max order panel yet, don't do anything.
                if (!mkt.maxSell)
                    break;
                if (typeof mkt.sellBalance === 'number' && mkt.sellBalance !== avail)
                    mkt.maxSell = null;
                if (this.isSell())
                    this.preSell();
                break;
            case mkt.quoteCfg.id:
                if (!Object.keys(mkt.maxBuys).length)
                    break;
                if (typeof mkt.buyBalance === 'number' && mkt.buyBalance !== avail)
                    mkt.maxBuys = {};
                if (!this.isSell())
                    this.preBuy();
        }
    }
    /*
     * submitOrder is attached to the affirmative button on the order validation
     * form. Clicking the button is the last step in the order submission process.
     */
    submitOrder() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.orderErr, page.vErr);
            const order = this.currentOrder;
            const req = { order: wireOrder(order) };
            if (!this.validateOrder(order))
                return;
            // Show loader and hide submit button.
            page.vSubmit.classList.add('d-hide');
            page.vLoader.classList.remove('d-hide');
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_6__.postJSON)('/api/tradeasync', req);
            // Hide loader and show submit button.
            page.vSubmit.classList.remove('d-hide');
            page.vLoader.classList.add('d-hide');
            // If error, display error on confirmation modal.
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().checkResponse(res)) {
                page.vErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vErr);
                return;
            }
            // Hide confirmation modal only on success.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            this.refreshActiveOrders();
        });
    }
    /*
     * createWallet is attached to successful submission of the wallet creation
     * form. createWallet is only called once the form is submitted and a success
     * response is received from the client.
     */
    createWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fetchUser();
            if (!user)
                return;
            const asset = user.assets[this.currentCreate.id];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.forms);
            const mkt = this.market;
            if (mkt.baseCfg.id === asset.id)
                mkt.base = asset;
            else if (mkt.quoteCfg.id === asset.id)
                mkt.quote = asset;
            this.balanceWgt.updateAsset(asset.id);
            this.displayMessageIfMissingWallet();
            this.resolveOrderFormVisibility();
        });
    }
    /* lotChanged is attached to the keyup and change events of the lots input. */
    lotChanged() {
        const page = this.page;
        const lots = parseInt(page.lotField.value || '0');
        if (lots <= 0) {
            page.lotField.value = page.lotField.value === '' ? '' : '0';
            page.qtyField.value = '';
            this.previewQuoteAmt(false);
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_QTY_ERROR));
            return;
        }
        const lotSize = this.market.cfg.lotsize;
        const orderQty = lots * lotSize;
        page.lotField.value = String(lots);
        // Conversion factor must be a multiple of 10.
        page.qtyField.value = String(orderQty / this.market.baseUnitInfo.conventional.conversionFactor);
        if (!this.isLimit() && this.isSell()) {
            const baseWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[this.market.base.id].wallet;
            this.setOrderBttnEnabled(orderQty <= baseWallet.balance.available, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_SELL_BALANCE_ERROR));
        }
        this.previewQuoteAmt(true);
    }
    /*
     * quantityChanged is attached to the keyup and change events of the quantity
     * input.
     */
    quantityChanged(finalize) {
        const page = this.page;
        const order = this.currentOrder = this.parseOrder();
        if (order.qty < 0) {
            page.lotField.value = '0';
            page.qtyField.value = '';
            this.previewQuoteAmt(false);
            return;
        }
        const lotSize = this.market.cfg.lotsize;
        const lots = Math.floor(order.qty / lotSize);
        const adjusted = order.qty = this.currentOrder.qty = lots * lotSize;
        page.lotField.value = String(lots);
        if (!order.isLimit && !order.sell)
            return;
        // Conversion factor must be a multiple of 10.
        if (finalize)
            page.qtyField.value = String(adjusted / this.market.baseUnitInfo.conventional.conversionFactor);
        this.previewQuoteAmt(true);
    }
    /*
     * marketBuyChanged is attached to the keyup and change events of the quantity
     * input for the market-buy form.
     */
    marketBuyChanged() {
        const page = this.page;
        const qty = convertToAtoms(page.mktBuyField.value || '', this.market.quoteUnitInfo.conventional.conversionFactor);
        const gap = this.midGap();
        if (qty > 0) {
            const quoteWallet = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[this.market.quote.id].wallet;
            this.setOrderBttnEnabled(qty <= quoteWallet.balance.available, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_BUY_BALANCE_ERROR));
        }
        else {
            this.setOrderBttnEnabled(false, _locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_ORDER_BUTTON_QTY_ERROR));
        }
        if (!gap || !qty) {
            page.mktBuyLots.textContent = '0';
            page.mktBuyScore.textContent = '0';
            return;
        }
        const lotSize = this.market.cfg.lotsize;
        const received = qty / gap;
        const lots = (received / lotSize);
        page.mktBuyLots.textContent = lots.toFixed(1);
        page.mktBuyScore.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(received, this.market.baseUnitInfo);
    }
    /*
     * rateFieldChanged is attached to the keyup and change events of the rate
     * input.
     */
    rateFieldChanged() {
        // Truncate to rate step. If it is a market buy order, do not adjust.
        const adjusted = this.adjustedRate();
        if (adjusted <= 0) {
            this.depthLines.input = [];
            this.drawChartLines();
            this.page.rateField.value = '0';
            this.previewQuoteAmt(true);
            this.updateOrderBttnState();
            return;
        }
        const order = this.currentOrder = this.parseOrder();
        const r = adjusted / this.market.rateConversionFactor;
        this.page.rateField.value = String(r);
        this.depthLines.input = [{
                rate: r,
                color: order.sell ? this.depthChart.theme.sellLine : this.depthChart.theme.buyLine
            }];
        this.drawChartLines();
        this.previewQuoteAmt(true);
        this.updateOrderBttnState();
    }
    /*
     * adjustedRate is the current rate field rate, rounded down to a
     * multiple of rateStep.
     */
    adjustedRate() {
        const v = this.page.rateField.value;
        if (!v)
            return NaN;
        const rate = convertToAtoms(v, this.market.rateConversionFactor);
        const rateStep = this.market.cfg.ratestep;
        return rate - (rate % rateStep);
    }
    /* loadTable reloads the table from the current order book information. */
    loadTable() {
        this.loadTableSide(true);
        this.loadTableSide(false);
    }
    /* binOrdersByRateAndEpoch takes a list of sorted orders and returns the
       same orders grouped into arrays. The orders are grouped by their rate
       and whether or not they are epoch queue orders. Epoch queue orders
       will come after non epoch queue orders with the same rate. */
    binOrdersByRateAndEpoch(orders) {
        if (!orders || !orders.length)
            return [];
        const bins = [];
        let currEpochBin = [];
        let currNonEpochBin = [];
        let currRate = orders[0].msgRate;
        if (orders[0].epoch)
            currEpochBin.push(orders[0]);
        else
            currNonEpochBin.push(orders[0]);
        for (let i = 1; i < orders.length; i++) {
            if (orders[i].msgRate !== currRate) {
                bins.push(currNonEpochBin);
                bins.push(currEpochBin);
                currEpochBin = [];
                currNonEpochBin = [];
                currRate = orders[i].msgRate;
            }
            if (orders[i].epoch)
                currEpochBin.push(orders[i]);
            else
                currNonEpochBin.push(orders[i]);
        }
        bins.push(currNonEpochBin);
        bins.push(currEpochBin);
        return bins.filter(bin => bin.length > 0);
    }
    /* loadTables loads the order book side into its table. */
    loadTableSide(sell) {
        const bookSide = sell ? this.book.sells : this.book.buys;
        const tbody = sell ? this.page.sellRows : this.page.buyRows;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tbody);
        if (!bookSide || !bookSide.length)
            return;
        const orderBins = this.binOrdersByRateAndEpoch(bookSide);
        orderBins.forEach(bin => { tbody.appendChild(this.orderTableRow(bin)); });
    }
    /* addTableOrder adds a single order to the appropriate table. */
    addTableOrder(order) {
        const tbody = order.sell ? this.page.sellRows : this.page.buyRows;
        let row = tbody.firstChild;
        // Handle market order differently.
        if (order.rate === 0) {
            if (order.qtyAtomic === 0)
                return; // a cancel order. TODO: maybe make an indicator on the target order, maybe gray out
            // This is a market order.
            if (row && row.manager.getRate() === 0) {
                row.manager.insertOrder(order);
            }
            else {
                row = this.orderTableRow([order]);
                tbody.insertBefore(row, tbody.firstChild);
            }
            return;
        }
        // Must be a limit order. Sort by rate. Skip the market order row.
        if (row && row.manager.getRate() === 0)
            row = row.nextSibling;
        while (row) {
            if (row.manager.compare(order) === 0) {
                row.manager.insertOrder(order);
                return;
            }
            else if (row.manager.compare(order) > 0) {
                const tr = this.orderTableRow([order]);
                tbody.insertBefore(tr, row);
                return;
            }
            row = row.nextSibling;
        }
        const tr = this.orderTableRow([order]);
        tbody.appendChild(tr);
    }
    /* removeTableOrder removes a single order from its table. */
    removeTableOrder(order) {
        const token = order.token;
        for (const tbody of [this.page.sellRows, this.page.buyRows]) {
            for (const tr of Array.from(tbody.children)) {
                if (tr.manager.removeOrder(token)) {
                    return;
                }
            }
        }
    }
    /* updateTableOrder looks for the order in the table and updates the qty */
    updateTableOrder(u) {
        for (const tbody of [this.page.sellRows, this.page.buyRows]) {
            for (const tr of Array.from(tbody.children)) {
                if (tr.manager.updateOrderQty(u)) {
                    return;
                }
            }
        }
    }
    /*
     * clearOrderTableEpochs removes immediate-tif orders whose epoch has expired.
     */
    clearOrderTableEpochs() {
        this.clearOrderTableEpochSide(this.page.sellRows);
        this.clearOrderTableEpochSide(this.page.buyRows);
    }
    /*
     * clearOrderTableEpochs removes immediate-tif orders whose epoch has expired
     * for a single side.
     */
    clearOrderTableEpochSide(tbody) {
        for (const tr of (Array.from(tbody.children))) {
            tr.manager.removeEpochOrders();
        }
    }
    /*
     * orderTableRow creates a new <tr> element to insert into an order table.
       Takes a bin of orders with the same rate, and displays the total quantity.
     */
    orderTableRow(orderBin) {
        const tr = this.page.orderRowTmpl.cloneNode(true);
        const { baseUnitInfo, quoteUnitInfo, rateConversionFactor, cfg: { ratestep: rateStep } } = this.market;
        const manager = new OrderTableRowManager(tr, orderBin, baseUnitInfo, quoteUnitInfo, rateStep);
        tr.manager = manager;
        bind(tr, 'click', () => {
            this.reportDepthClick(tr.manager.getRate() / rateConversionFactor);
        });
        if (tr.manager.getRate() !== 0) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tr, 'mouseenter', () => {
                const chart = this.depthChart;
                this.depthLines.hover = [{
                        rate: tr.manager.getRate() / rateConversionFactor,
                        color: tr.manager.isSell() ? chart.theme.sellLine : chart.theme.buyLine
                    }];
                this.drawChartLines();
            });
        }
        return tr;
    }
    /* handleConnNote handles the 'conn' notification.
     */
    handleConnNote(note) {
        return __awaiter(this, void 0, void 0, function* () {
            this.marketList.setConnectionStatus(note);
            if (note.connectionStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected) {
                // Having been disconnected from a DEX server, anything may have changed,
                // or this may be the first opportunity to get the server's config, so
                // fetch it all before reloading the markets page.
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fetchUser();
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().loadPage('markets');
            }
        });
    }
    /*
     * filterMarkets sets the display of markets in the markets list based on the
     * value of the search input.
     */
    filterMarkets() {
        var _a;
        const filterTxt = (_a = this.page.marketSearchV1.value) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        const filter = filterTxt ? (mkt) => mkt.name.includes(filterTxt) : () => true;
        this.marketList.setFilter(filter);
    }
    /* drawChartLines draws the hover and input lines on the chart. */
    drawChartLines() {
        this.depthChart.setLines([...this.depthLines.hover, ...this.depthLines.input]);
        this.depthChart.draw();
    }
    /* candleDurationSelected sets the candleDur and loads the candles. It will
    default to the oneHrBinKey if dur is not valid. */
    candleDurationSelected(dur) {
        var _a, _b;
        if (!((_b = (_a = this.market) === null || _a === void 0 ? void 0 : _a.dex) === null || _b === void 0 ? void 0 : _b.candleDurs.includes(dur)))
            dur = oneHrBinKey;
        this.candleDur = dur;
        this.loadCandles();
        _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_1__["default"].lastCandleDurationLK, dur);
    }
    /*
     * loadCandles loads the candles for the current candleDur. If a cache is already
     * active, the cache will be used without a loadcandles request.
     */
    loadCandles() {
        for (const bttn of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].kids(this.page.durBttnBox)) {
            if (bttn.textContent === this.candleDur)
                bttn.classList.add('selected');
            else
                bttn.classList.remove('selected');
        }
        const { candleCaches, cfg, baseUnitInfo, quoteUnitInfo } = this.market;
        const cache = candleCaches[this.candleDur];
        if (cache) {
            // this.depthChart.hide()
            // this.candleChart.show()
            this.candleChart.setCandles(cache, cfg, baseUnitInfo, quoteUnitInfo);
            return;
        }
        this.requestCandles();
    }
    /* requestCandles sends the loadcandles request. It accepts an optional candle
     * duration which will be requested if it is provided.
     */
    requestCandles(candleDur) {
        this.candlesLoading = {
            loaded: () => { },
            timer: window.setTimeout(() => {
                if (this.candlesLoading) {
                    this.candlesLoading = null;
                    console.error('candles not received');
                }
            }, 10000)
        };
        const { dex, baseCfg, quoteCfg } = this.market;
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].request('loadcandles', { host: dex.host, base: baseCfg.id, quote: quoteCfg.id, dur: candleDur || this.candleDur });
    }
    /*
     * unload is called by the Application when the user navigates away from
     * the /markets page.
     */
    unload() {
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].request(unmarketRoute, {});
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(bookRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(bookOrderRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(unbookOrderRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(updateRemainingRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(epochOrderRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(candlesRoute);
        _ws__WEBPACK_IMPORTED_MODULE_9__["default"].deregisterRoute(candleUpdateRoute);
        this.depthChart.unattach();
        this.candleChart.unattach();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'keyup', this.keyup);
        clearInterval(this.secondTicker);
    }
}
/*
 *  MarketList represents the list of exchanges and markets on the left side of
 * markets view. The MarketList provides utilities for adjusting the visibility
 * and sort order of markets.
 */
class MarketList {
    constructor(div) {
        this.div = div;
        this.rowTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idel(div, 'marketTmplV1');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(this.rowTmpl);
        this.reloadMarketsPane();
    }
    updateSpots(note) {
        for (const row of this.markets) {
            if (row.mkt.xc.host !== note.host)
                continue;
            const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges[row.mkt.xc.host];
            const mkt = xc.markets[row.mkt.name];
            setPriceAndChange(row.tmpl, xc, mkt);
        }
    }
    reloadMarketsPane() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.div);
        this.markets = [];
        const addMarket = (mkt) => {
            const bui = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(mkt.baseid, mkt.xc);
            const qui = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(mkt.quoteid, mkt.xc);
            const rateConversionFactor = _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor / bui.conventional.conversionFactor * qui.conventional.conversionFactor;
            const row = new MarketRow(this.rowTmpl, mkt, rateConversionFactor);
            this.div.appendChild(row.node);
            return row;
        };
        for (const mkt of sortedMarkets())
            this.markets.push(addMarket(mkt));
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().bindTooltips(this.div);
    }
    find(host, baseID, quoteID) {
        for (const row of this.markets) {
            if (row.mkt.xc.host === host && row.mkt.baseid === baseID && row.mkt.quoteid === quoteID)
                return row;
        }
        return null;
    }
    /* exists will be true if the specified market exists. */
    exists(host, baseID, quoteID) {
        return this.find(host, baseID, quoteID) !== null;
    }
    /* first gets the first market from the first exchange, alphabetically. */
    first() {
        return this.markets[0];
    }
    /* select sets the specified market as selected. */
    select(host, baseID, quoteID) {
        const row = this.find(host, baseID, quoteID);
        if (!row)
            return console.error(`select: no market row for ${host}, ${baseID}-${quoteID}`);
        for (const mkt of this.markets)
            mkt.node.classList.remove('selected');
        this.selected = row;
        this.selected.node.classList.add('selected');
    }
    /* setConnectionStatus sets the visibility of the disconnected icon based
     * on the core.ConnEventNote.
     */
    setConnectionStatus(note) {
        for (const row of this.markets) {
            if (row.mkt.xc.host !== note.host)
                continue;
            if (note.connectionStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(row.tmpl.disconnectedIco);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(row.tmpl.disconnectedIco);
        }
    }
    /*
     * setFilter sets the visibility of market rows based on the provided filter.
     */
    setFilter(filter) {
        for (const row of this.markets) {
            if (filter(row))
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(row.node);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(row.node);
        }
    }
}
/*
 * MarketRow represents one row in the MarketList. A MarketRow is a subsection
 * of the ExchangeSection.
 */
class MarketRow {
    constructor(template, mkt, rateConversionFactor) {
        this.mkt = mkt;
        this.name = mkt.name;
        this.baseID = mkt.baseid;
        this.quoteID = mkt.quoteid;
        this.lotSize = mkt.lotsize;
        this.rateConversionFactor = rateConversionFactor;
        this.node = template.cloneNode(true);
        const tmpl = this.tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(this.node);
        tmpl.baseIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(mkt.basesymbol);
        tmpl.quoteIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(mkt.quotesymbol);
        tmpl.baseSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(mkt.xc.assets[mkt.baseid], true));
        tmpl.quoteSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(mkt.xc.assets[mkt.quoteid], true));
        tmpl.baseName.textContent = mkt.baseName;
        tmpl.host.textContent = mkt.xc.host;
        tmpl.host.style.color = hostColor(mkt.xc.host);
        tmpl.host.dataset.tooltip = mkt.xc.host;
        setPriceAndChange(tmpl, mkt.xc, mkt);
        if (this.mkt.xc.connectionStatus !== _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.disconnectedIco);
    }
}
/*
 * BalanceWidget is a display of balance information. Because the wallet can be
 * in any number of states, and because every exchange has different funding
 * coin confirmation requirements, the BalanceWidget displays a number of state
 * indicators and buttons, as well as tabulated balance data with rows for
 * locked and immature balance.
 */
class BalanceWidget {
    constructor(base, quote) {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(base, quote);
        const btmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(base);
        this.base = {
            id: 0,
            parentID: parentIDNone,
            cfg: null,
            node: base,
            tmpl: btmpl,
            iconBox: btmpl.walletState,
            stateIcons: new _doc__WEBPACK_IMPORTED_MODULE_0__.WalletIcons(btmpl.walletState)
        };
        btmpl.balanceRowTmpl.remove();
        const qtmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(quote);
        this.quote = {
            id: 0,
            parentID: parentIDNone,
            cfg: null,
            node: quote,
            tmpl: qtmpl,
            iconBox: qtmpl.walletState,
            stateIcons: new _doc__WEBPACK_IMPORTED_MODULE_0__.WalletIcons(qtmpl.walletState)
        };
        qtmpl.balanceRowTmpl.remove();
        (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().registerNoteFeeder({
            balance: (note) => { this.updateAsset(note.assetID); },
            walletstate: (note) => { this.updateAsset(note.wallet.assetID); },
            walletsync: (note) => { this.updateAsset(note.assetID); },
            createwallet: (note) => { this.updateAsset(note.assetID); }
        });
    }
    setBalanceVisibility(connected) {
        if (connected)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.base.node, this.quote.node);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.base.node, this.quote.node);
    }
    /*
     * setWallet sets the balance widget to display data for specified market and
     * will display the widget.
     */
    setWallets(host, baseID, quoteID) {
        const parentID = (assetID) => {
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[assetID];
            if (asset === null || asset === void 0 ? void 0 : asset.token)
                return asset.token.parentID;
            return parentIDNone;
        };
        this.dex = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().user.exchanges[host];
        this.base.id = baseID;
        this.base.parentID = parentID(baseID);
        this.base.cfg = this.dex.assets[baseID];
        this.quote.id = quoteID;
        this.quote.parentID = parentID(quoteID);
        this.quote.cfg = this.dex.assets[quoteID];
        this.updateWallet(this.base);
        this.updateWallet(this.quote);
        this.setBalanceVisibility(this.dex.connectionStatus === _registry__WEBPACK_IMPORTED_MODULE_11__.ConnectionStatus.Connected);
    }
    /*
     * updateWallet updates the displayed wallet information based on the
     * core.Wallet state.
     */
    updateWallet(side) {
        const { cfg, tmpl, iconBox, stateIcons, id: assetID } = side;
        if (!cfg)
            return; // no wallet set yet
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[assetID];
        // Just hide everything to start.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.newWalletRow, tmpl.expired, tmpl.unsupported, tmpl.connect, tmpl.spinner, tmpl.walletState, tmpl.balanceRows, tmpl.walletAddr, tmpl.wantProvidersBox);
        this.checkNeedsProvider(assetID, tmpl.wantProvidersBox);
        tmpl.logo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(cfg.symbol);
        tmpl.addWalletSymbol.textContent = cfg.symbol.toUpperCase();
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tmpl.symbol);
        // Handle an unsupported asset.
        if (!asset) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.unsupported);
            return;
        }
        tmpl.symbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(asset, true));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(iconBox);
        const wallet = asset.wallet;
        stateIcons.readWallet(wallet);
        // Handle no wallet configured.
        if (!wallet) {
            if (asset.walletCreationPending) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.spinner);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.newWalletRow);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.walletAddr);
        // Parent asset
        const bal = wallet.balance;
        // Handle not connected and no balance known for the DEX.
        if (!bal && !wallet.running && !wallet.disabled) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.connect);
            return;
        }
        // If there is no balance, but the wallet is connected, show the loading
        // icon while we fetch an update.
        if (!bal) {
            (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fetchBalance(assetID);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.spinner);
            return;
        }
        // We have a wallet and a DEX-specific balance. Set all of the fields.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.balanceRows);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tmpl.balanceRows);
        const addRow = (title, bal, ui, icon) => {
            const row = tmpl.balanceRowTmpl.cloneNode(true);
            tmpl.balanceRows.appendChild(row);
            const balTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
            balTmpl.title.textContent = title;
            balTmpl.bal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bal, ui);
            if (icon) {
                balTmpl.bal.append(icon);
                side.parentBal = balTmpl.bal;
            }
        };
        addRow(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_AVAILABLE), bal.available, asset.unitInfo);
        addRow(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_LOCKED), bal.locked + bal.contractlocked + bal.bondlocked, asset.unitInfo);
        addRow(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_IMMATURE), bal.immature, asset.unitInfo);
        if (asset.token) {
            const { wallet: { balance }, unitInfo, symbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[asset.token.parentID];
            const icon = document.createElement('img');
            icon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
            icon.classList.add('micro-icon', 'ms-1');
            addRow(_locales__WEBPACK_IMPORTED_MODULE_10__.prep(_locales__WEBPACK_IMPORTED_MODULE_10__.ID_FEE_BALANCE), balance.available, unitInfo, icon);
        }
        // If the current balance update time is older than an hour, show the
        // expiration icon. Request a balance update, if possible.
        const expired = new Date().getTime() - new Date(bal.stamp).getTime() > anHour;
        if (expired && !wallet.disabled) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.expired);
            if (wallet.running)
                (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().fetchBalance(assetID);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.expired);
    }
    checkNeedsProvider(assetID, el) {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(yield (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().needsCustomProvider(assetID), el);
        });
    }
    /* updateParent updates the side's parent asset balance. */
    updateParent(side) {
        var _a;
        const { wallet: { balance }, unitInfo } = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets[side.parentID];
        // firstChild is the text node set before the img child node in addRow.
        if ((_a = side.parentBal) === null || _a === void 0 ? void 0 : _a.firstChild)
            side.parentBal.firstChild.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(balance.available, unitInfo);
    }
    /*
     * updateAsset updates the info for one side of the existing market. If the
     * specified asset ID is not one of the current market's base or quote assets,
     * it is silently ignored.
     */
    updateAsset(assetID) {
        if (assetID === this.base.id)
            this.updateWallet(this.base);
        else if (assetID === this.quote.id)
            this.updateWallet(this.quote);
        if (assetID === this.base.parentID)
            this.updateParent(this.base);
        if (assetID === this.quote.parentID)
            this.updateParent(this.quote);
    }
}
/* makeMarket creates a market object that specifies basic market details. */
function makeMarket(host, base, quote) {
    return {
        host: host,
        base: base,
        quote: quote
    };
}
/* marketID creates a DEX-compatible market name from the ticker symbols. */
function marketID(b, q) { return `${b}_${q}`; }
/* convertToAtoms converts the float string to the basic unit of a coin. */
function convertToAtoms(s, conversionFactor) {
    if (!s)
        return 0;
    return Math.round(parseFloat(s) * conversionFactor);
}
/* swapBttns changes the 'selected' class of the buttons. */
function swapBttns(before, now) {
    before.classList.remove('selected');
    now.classList.add('selected');
}
/*
 * wireOrder prepares a copy of the order with the options field converted to a
 * string -> string map.
 */
function wireOrder(order) {
    const stringyOptions = {};
    for (const [k, v] of Object.entries(order.options))
        stringyOptions[k] = JSON.stringify(v);
    return Object.assign({}, order, { options: stringyOptions });
}
// OrderTableRowManager manages the data within a row in an order table. Each row
// represents all the orders in the order book with the same rate, but orders that
// are booked or still in the epoch queue are displayed in separate rows.
class OrderTableRowManager {
    constructor(tableRow, orderBin, baseUnitInfo, quoteUnitInfo, rateStep) {
        this.tableRow = tableRow;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tableRow);
        this.orderBin = orderBin;
        this.sell = orderBin[0].sell;
        this.msgRate = orderBin[0].msgRate;
        this.epoch = !!orderBin[0].epoch;
        this.baseUnitInfo = baseUnitInfo;
        const rateText = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatRateFullPrecision(this.msgRate, baseUnitInfo, quoteUnitInfo, rateStep);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(this.isEpoch(), this.page.epoch);
        if (this.msgRate === 0) {
            page.rate.innerText = 'market';
        }
        else {
            const cssClass = this.isSell() ? 'sellcolor' : 'buycolor';
            page.rate.innerText = rateText;
            page.rate.classList.add(cssClass);
        }
        this.updateQtyNumOrdersEl();
    }
    // updateQtyNumOrdersEl populates the quantity element in the row, and also
    // displays the number of orders if there is more than one order in the order
    // bin.
    updateQtyNumOrdersEl() {
        const { page, orderBin } = this;
        const qty = orderBin.reduce((total, curr) => total + curr.qtyAtomic, 0);
        const numOrders = orderBin.length;
        page.qty.innerText = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(qty, this.baseUnitInfo);
        if (numOrders > 1) {
            page.numOrders.removeAttribute('hidden');
            page.numOrders.innerText = String(numOrders);
            page.numOrders.title = `quantity is comprised of ${numOrders} orders`;
        }
        else {
            page.numOrders.setAttribute('hidden', 'true');
        }
    }
    // insertOrder adds an order to the order bin and updates the row elements
    // accordingly.
    insertOrder(order) {
        this.orderBin.push(order);
        this.updateQtyNumOrdersEl();
    }
    // updateOrderQuantity updates the quantity of the order identified by a token,
    // if it exists in the row, and updates the row elements accordingly. The function
    // returns true if the order is in the bin, and false otherwise.
    updateOrderQty(update) {
        const { token, qty, qtyAtomic } = update;
        for (let i = 0; i < this.orderBin.length; i++) {
            if (this.orderBin[i].token === token) {
                this.orderBin[i].qty = qty;
                this.orderBin[i].qtyAtomic = qtyAtomic;
                this.updateQtyNumOrdersEl();
                return true;
            }
        }
        return false;
    }
    // removeOrder removes the order identified by the token, if it exists in the row,
    // and updates the row elements accordingly. If the order bin is empty, the row is
    // removed from the screen. The function returns true if an order was removed, and
    // false otherwise.
    removeOrder(token) {
        const index = this.orderBin.findIndex(order => order.token === token);
        if (index < 0)
            return false;
        this.orderBin.splice(index, 1);
        if (!this.orderBin.length)
            this.tableRow.remove();
        else
            this.updateQtyNumOrdersEl();
        return true;
    }
    // removeEpochOrders removes all the orders from the row that are not in the
    // new epoch's epoch queue and updates the elements accordingly.
    removeEpochOrders(newEpoch) {
        this.orderBin = this.orderBin.filter((order) => {
            return !(order.epoch && order.epoch !== newEpoch);
        });
        if (!this.orderBin.length)
            this.tableRow.remove();
        else
            this.updateQtyNumOrdersEl();
    }
    // getRate returns the rate of the orders in the row.
    getRate() {
        return this.msgRate;
    }
    // isEpoch returns whether the orders in this row are in the epoch queue.
    isEpoch() {
        return this.epoch;
    }
    // isSell returns whether the orders in this row are sell orders.
    isSell() {
        return this.sell;
    }
    // compare takes an order and returns 0 if the order belongs in this row,
    // 1 if the order should go after this row in the table, and -1 if it should
    // be before this row in the table. Sell orders are displayed in ascending order,
    // buy orders are displayed in descending order, and epoch orders always come
    // after booked orders.
    compare(order) {
        if (this.getRate() === order.msgRate && this.isEpoch() === !!order.epoch) {
            return 0;
        }
        else if (this.getRate() !== order.msgRate) {
            return (this.getRate() > order.msgRate) === order.sell ? 1 : -1;
        }
        else {
            return this.isEpoch() ? 1 : -1;
        }
    }
}
function sortedMarkets() {
    const mkts = [];
    const assets = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().assets;
    const convertMarkets = (xc, mkts) => {
        return mkts.map((mkt) => {
            const a = assets[mkt.baseid];
            const baseName = a ? a.name : mkt.basesymbol;
            const bui = (0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().unitInfo(mkt.baseid, xc);
            return Object.assign({ xc, baseName, bui }, mkt);
        });
    };
    for (const xc of Object.values((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges))
        mkts.push(...convertMarkets(xc, Object.values(xc.markets || {})));
    mkts.sort((a, b) => {
        if (!a.spot) {
            if (b.spot)
                return 1; // put b first, since we have the spot
            // no spots. compare market name then host name
            if (a.name === b.name)
                return a.xc.host.localeCompare(b.xc.host);
            return a.name.localeCompare(b.name);
        }
        else if (!b.spot)
            return -1; // put a first, since we have the spot
        const [aLots, bLots] = [a.spot.vol24 / a.lotsize, b.spot.vol24 / b.lotsize];
        return bLots - aLots; // whoever has more volume by lot count
    });
    return mkts;
}
function setPriceAndChange(tmpl, xc, mkt) {
    if (!mkt.spot)
        return;
    tmpl.price.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().conventionalRate(mkt.baseid, mkt.quoteid, mkt.spot.rate, xc));
    const sign = mkt.spot.change24 > 0 ? '+' : '';
    tmpl.change.classList.remove('buycolor', 'sellcolor');
    tmpl.change.classList.add(mkt.spot.change24 >= 0 ? 'buycolor' : 'sellcolor');
    tmpl.change.textContent = `${sign}${(mkt.spot.change24 * 100).toFixed(1)}%`;
}
const hues = [1 / 2, 1 / 4, 3 / 4, 1 / 8, 5 / 8, 3 / 8, 7 / 8];
function generateHue(idx) {
    const h = hues[idx % hues.length];
    return `hsl(${h * 360}, 35%, 50%)`;
}
function hostColor(host) {
    const hosts = Object.keys((0,_registry__WEBPACK_IMPORTED_MODULE_11__.app)().exchanges);
    hosts.sort();
    return generateHue(hosts.indexOf(host));
}


/***/ }),

/***/ "./src/js/mm.ts":
/*!**********************!*\
  !*** ./src/js/mm.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MarketMakerPage)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








const mediumBreakpoint = 768;
const newSlider = () => {
    return {
        left: {
            cex: 0,
            dex: 0
        },
        right: {
            cex: 0,
            dex: 0
        },
        cexRange: 0,
        dexRange: 0
    };
};
function parseFundingOptions(f) {
    const { cex: { avail: cexAvail, req: cexReq }, dex: { avail: dexAvail, req: dexReq }, transferable } = f;
    let proposedDex = Math.min(dexAvail, dexReq);
    let proposedCex = Math.min(cexAvail, cexReq);
    let slider;
    if (f.fundedAndNotBalanced) {
        // We have everything we need, but not where we need it, and we can
        // deposit and withdraw.
        if (dexAvail > dexReq) {
            // We have too much dex-side, so we'll have to draw on dex to balance
            // cex's shortcomings.
            const cexShort = cexReq - cexAvail;
            const dexRemain = dexAvail - dexReq;
            if (dexRemain < cexShort) {
                // We did something really bad with math to get here.
                throw Error('bad math has us with dex surplus + cex underfund invalid remains');
            }
            proposedDex += cexShort + transferable;
        }
        else {
            // We don't have enough on dex, but we have enough on cex to cover the
            // short.
            const dexShort = dexReq - dexAvail;
            const cexRemain = cexAvail - cexReq;
            if (cexRemain < dexShort) {
                throw Error('bad math got us with cex surplus + dex underfund invalid remains');
            }
            proposedCex += dexShort + transferable;
        }
    }
    else if (f.fundedAndBalanced) {
        // This asset is fully funded, but the user may choose to fund order
        // reserves either cex or dex.
        if (transferable > 0) {
            const dexRemain = dexAvail - dexReq;
            const cexRemain = cexAvail - cexReq;
            slider = newSlider();
            if (cexRemain > transferable && dexRemain > transferable) {
                // Either one could fully fund order reserves. Let the user choose.
                slider.left.cex = transferable + cexReq;
                slider.left.dex = dexReq;
                slider.right.cex = cexReq;
                slider.right.dex = transferable + dexReq;
            }
            else if (dexRemain < transferable && cexRemain < transferable) {
                // => implied that cexRemain + dexRemain > transferable.
                // CEX can contribute SOME and DEX can contribute SOME.
                slider.left.cex = transferable - dexRemain + cexReq;
                slider.left.dex = dexRemain + dexReq;
                slider.right.cex = cexRemain + cexReq;
                slider.right.dex = transferable - cexRemain + dexReq;
            }
            else if (dexRemain > transferable) {
                // So DEX has enough to cover reserves, but CEX could potentially
                // constribute SOME. NOT ALL.
                slider.left.cex = cexReq;
                slider.left.dex = transferable + dexReq;
                slider.right.cex = cexRemain + cexReq;
                slider.right.dex = transferable - cexRemain + dexReq;
            }
            else {
                // CEX has enough to cover reserves, but DEX could contribute SOME,
                // NOT ALL.
                slider.left.cex = transferable - dexRemain + cexReq;
                slider.left.dex = dexRemain + dexReq;
                slider.right.cex = transferable + cexReq;
                slider.right.dex = dexReq;
            }
            // We prefer the slider right in the center.
            slider.cexRange = slider.right.cex - slider.left.cex;
            slider.dexRange = slider.right.dex - slider.left.dex;
            proposedDex = slider.left.dex + (slider.dexRange / 2);
            proposedCex = slider.left.cex + (slider.cexRange / 2);
        }
    }
    else { // starved
        if (cexAvail < cexReq) {
            proposedDex = Math.min(dexAvail, dexReq + transferable + (cexReq - cexAvail));
        }
        else if (dexAvail < dexReq) {
            proposedCex = Math.min(cexAvail, cexReq + transferable + (dexReq - dexAvail));
        }
        else { // just transferable wasn't covered
            proposedDex = Math.min(dexAvail, dexReq + transferable);
            proposedCex = Math.min(cexAvail, dexReq + cexReq + transferable - proposedDex);
        }
    }
    return [proposedDex, proposedCex, slider];
}
class MarketMakerPage extends _basepage__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(main) {
        super();
        this.bots = {};
        this.sortedBots = [];
        this.cexes = {};
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].idDescendants(main);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].cleanTemplates(page.botTmpl, page.botRowTmpl, page.exchangeRowTmpl);
        this.forms = new _forms__WEBPACK_IMPORTED_MODULE_5__.Forms(page.forms);
        this.cexConfigForm = new _forms__WEBPACK_IMPORTED_MODULE_5__.CEXConfigurationForm(page.cexConfigForm, (cexName) => this.cexConfigured(cexName));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.newBot, 'click', () => { this.newBot(); });
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.archivedLogsBtn, 'click', () => { (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmarchives'); });
        this.twoColumn = window.innerWidth >= mediumBreakpoint;
        const ro = new ResizeObserver(() => { this.resized(); });
        ro.observe(main);
        for (const [cexName, dinfo] of Object.entries(_mmutil__WEBPACK_IMPORTED_MODULE_1__.CEXDisplayInfos)) {
            const tr = page.exchangeRowTmpl.cloneNode(true);
            page.cexRows.appendChild(tr);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(tr);
            const configure = () => {
                this.cexConfigForm.setCEX(cexName);
                this.forms.show(page.cexConfigForm);
            };
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.configureBttn, 'click', configure);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.reconfigBttn, 'click', configure);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.errConfigureBttn, 'click', configure);
            const row = this.cexes[cexName] = { tr, tmpl, dinfo, cexName };
            this.updateCexRow(row);
        }
        this.setup();
    }
    resized() {
        const useTwoColumn = window.innerWidth >= 768;
        if (useTwoColumn !== this.twoColumn) {
            this.twoColumn = useTwoColumn;
            this.clearBotBoxes();
            for (const { div } of this.sortedBots)
                this.appendBotBox(div);
        }
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const mmStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus;
            const botConfigs = mmStatus.bots.map((s) => s.config);
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().registerNoteFeeder({
                runstats: (note) => { this.handleRunStatsNote(note); },
                runevent: (note) => {
                    const bot = this.bots[(0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.hostedMarketID)(note.host, note.baseID, note.quoteID)];
                    if (bot)
                        return bot.handleRunStats();
                },
                epochreport: (note) => {
                    const bot = this.bots[(0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.hostedMarketID)(note.host, note.baseID, note.quoteID)];
                    if (bot)
                        bot.handleEpochReportNote(note);
                },
                cexproblems: (note) => {
                    const bot = this.bots[(0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.hostedMarketID)(note.host, note.baseID, note.quoteID)];
                    if (bot)
                        bot.handleCexProblemsNote(note);
                },
                cexnote: (note) => { this.handleCEXNote(note); }
                // TODO bot start-stop notification
            });
            const noBots = !botConfigs || botConfigs.length === 0;
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(noBots, page.noBots);
            if (noBots)
                return;
            page.noBots.remove();
            const sortedBots = [...mmStatus.bots].sort((a, b) => {
                var _a, _b, _c, _d;
                if (a.running && !b.running)
                    return -1;
                if (b.running && !a.running)
                    return 1;
                // If none are running, just do something to get a resonably reproducible
                // sort.
                if (!a.running && !b.running)
                    return (a.config.baseID + a.config.quoteID) - (b.config.baseID + b.config.quoteID);
                // Both are running. Sort by run time.
                return ((_b = (_a = b.runStats) === null || _a === void 0 ? void 0 : _a.startTime) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = a.runStats) === null || _c === void 0 ? void 0 : _c.startTime) !== null && _d !== void 0 ? _d : 0);
            });
            const startupBalanceCache = {};
            for (const botStatus of sortedBots)
                this.addBot(botStatus, startupBalanceCache);
        });
    }
    handleCEXNote(n) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (n.topic) {
                case 'BalanceUpdate':
                    return this.handleCEXBalanceUpdate(n.cexName /* , n.note */);
            }
        });
    }
    handleCEXBalanceUpdate(cexName /* , note: CEXBalanceUpdate */) {
        return __awaiter(this, void 0, void 0, function* () {
            const cexRow = this.cexes[cexName];
            if (cexRow)
                this.updateCexRow(cexRow);
        });
    }
    handleRunStatsNote(note) {
        return __awaiter(this, void 0, void 0, function* () {
            const { baseID, quoteID, host } = note;
            const bot = this.bots[(0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.hostedMarketID)(host, baseID, quoteID)];
            if (bot)
                return bot.handleRunStats();
            this.addBot((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().botStatus(host, baseID, quoteID));
        });
    }
    unload() {
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].unbind(document, 'keyup', this.keyup);
    }
    addBot(botStatus, startupBalanceCache) {
        var _a;
        const { page, bots, sortedBots } = this;
        // Make sure the market still exists.
        const { config: { baseID, quoteID, host } } = botStatus;
        const [baseSymbol, quoteSymbol] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID].symbol, (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID].symbol];
        const mktID = `${baseSymbol}_${quoteSymbol}`;
        if (!((_a = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host]) === null || _a === void 0 ? void 0 : _a.markets[mktID]))
            return;
        const bot = new Bot(this, botStatus, startupBalanceCache);
        page.botRows.appendChild(bot.row.tr);
        sortedBots.push(bot);
        bots[bot.id] = bot;
        this.appendBotBox(bot.div);
    }
    appendBotBox(div) {
        const { page: { boxZero, boxOne }, twoColumn } = this;
        const useZeroth = !twoColumn || (boxZero.children.length + boxOne.children.length) % 2 === 0;
        const box = useZeroth ? boxZero : boxOne;
        box.append(div);
    }
    clearBotBoxes() {
        const { page: { boxOne, boxZero } } = this;
        while (boxZero.children.length > 1)
            boxZero.removeChild(boxZero.lastChild);
        while (boxOne.children.length > 0)
            boxOne.removeChild(boxOne.lastChild);
    }
    showBot(botID) {
        const { sortedBots } = this;
        const idx = sortedBots.findIndex((bot) => bot.id === botID);
        sortedBots.splice(idx, 1);
        sortedBots.unshift(this.bots[botID]);
        this.clearBotBoxes();
        for (const { div } of sortedBots)
            this.appendBotBox(div);
        const div = this.bots[botID].div;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].animate(250, (p) => {
            div.style.opacity = `${p}`;
            div.style.transform = `scale(${0.8 + 0.2 * p})`;
        });
    }
    newBot() {
        (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmsettings');
    }
    cexConfigured(cexName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fetchMMStatus();
            this.updateCexRow(this.cexes[cexName]);
            this.forms.close();
        });
    }
    updateCexRow(row) {
        const { tmpl, dinfo, cexName } = row;
        tmpl.logo.src = dinfo.logo;
        tmpl.name.textContent = dinfo.name;
        const status = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName];
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!status, tmpl.unconfigured);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(status && !status.connectErr, tmpl.configured);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(status === null || status === void 0 ? void 0 : status.connectErr, tmpl.connectErrBox);
        if (status === null || status === void 0 ? void 0 : status.connectErr) {
            tmpl.connectErr.textContent = 'connection error';
            tmpl.connectErr.dataset.tooltip = status.connectErr;
        }
        tmpl.logo.classList.toggle('greyscale', !status);
        if (!status)
            return;
        let usdBal = 0;
        const cexSymbolAdded = {}; // avoid double counting tokens or counting both eth and weth
        for (const [assetIDStr, bal] of Object.entries(status.balances)) {
            const assetID = parseInt(assetIDStr);
            const cexSymbol = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bipCEXSymbol(assetID);
            if (cexSymbolAdded[cexSymbol])
                continue;
            cexSymbolAdded[cexSymbol] = true;
            const { unitInfo } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
            const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[assetID];
            if (fiatRate)
                usdBal += fiatRate * (bal.available + bal.locked) / unitInfo.conventional.conversionFactor;
        }
        tmpl.usdBalance.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(usdBal);
    }
    percentageBalanceStr(assetID, balance, percentage) {
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
        const unitInfo = asset.unitInfo;
        const assetValue = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue((balance * percentage) / 100, unitInfo);
        return `${_doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(percentage)}% - ${assetValue} ${asset.symbol.toUpperCase()}`;
    }
    /*
     * walletBalanceStr returns a string like "50% - 0.0001 BTC" representing
     * the percentage of a wallet's balance selected in the market maker setting,
     * and the amount of that asset in the wallet.
     */
    walletBalanceStr(assetID, percentage) {
        const { wallet: { balance: { available } } } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
        return this.percentageBalanceStr(assetID, available, percentage);
    }
}
class Bot extends _mmutil__WEBPACK_IMPORTED_MODULE_1__.BotMarket {
    constructor(pg, status, startupBalanceCache) {
        super(status.config);
        startupBalanceCache = startupBalanceCache !== null && startupBalanceCache !== void 0 ? startupBalanceCache : {};
        this.pg = pg;
        const { baseID, quoteID, host, botType, nBuyPlacements, nSellPlacements, cexName } = this;
        this.id = (0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.hostedMarketID)(host, baseID, quoteID);
        const div = this.div = pg.page.botTmpl.cloneNode(true);
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(div);
        this.runDisplay = new _mmutil__WEBPACK_IMPORTED_MODULE_1__.RunningMarketMakerDisplay(page.onBox, pg.forms, pg.page.orderReportForm, 'mm');
        (0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.setMarketElements)(div, baseID, quoteID, host);
        if (cexName)
            (0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.setCexElements)(div, cexName);
        if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeArbMM) {
            page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_BOTTYPE_ARB_MM);
        }
        else if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicArb) {
            page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_BOTTYPE_SIMPLE_ARB);
        }
        else if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicMM) {
            page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_BOTTYPE_BASIC_MM);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(botType !== _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicArb, page.placementsChartBox, page.baseTokenSwapFeesBox);
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicArb) {
            this.placementsChart = new _mmutil__WEBPACK_IMPORTED_MODULE_1__.PlacementsChart(page.placementsChart);
            page.buyPlacementCount.textContent = String(nBuyPlacements);
            page.sellPlacementCount.textContent = String(nSellPlacements);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.startBttn, 'click', () => this.start());
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.allocationBttn, 'click', () => this.allocate());
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.reconfigureBttn, 'click', () => this.reconfigure());
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.goBackFromAllocation, 'click', () => this.hideAllocationDialog());
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.marketLink, 'click', () => (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('markets', { host, baseID, quoteID }));
        this.baseAllocSlider = new _doc__WEBPACK_IMPORTED_MODULE_2__.MiniSlider(page.baseAllocSlider, () => { });
        this.quoteAllocSlider = new _doc__WEBPACK_IMPORTED_MODULE_2__.MiniSlider(page.quoteAllocSlider, () => { });
        const tr = pg.page.botRowTmpl.cloneNode(true);
        (0,_mmutil__WEBPACK_IMPORTED_MODULE_1__.setMarketElements)(tr, baseID, quoteID, host);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(tr);
        this.row = { tr, tmpl };
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.allocateBttn, 'click', (e) => {
            e.stopPropagation();
            this.allocate();
            pg.showBot(this.id);
        });
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tr, 'click', () => pg.showBot(this.id));
        this.initialize(startupBalanceCache);
    }
    initialize(startupBalanceCache) {
        const _super = Object.create(null, {
            initialize: { get: () => super.initialize }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.initialize.call(this, startupBalanceCache);
            this.runDisplay.setBotMarket(this);
            const { page, host, cexName, botType, div, cfg: { arbMarketMakingConfig, basicMarketMakingConfig }, mktID, baseFactor, quoteFactor, marketReport: { baseFiatRate } } = this;
            if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicArb) {
                let buyPlacements = [];
                let sellPlacements = [];
                let profit = 0;
                if (arbMarketMakingConfig) {
                    buyPlacements = arbMarketMakingConfig.buyPlacements.map((p) => ({ lots: p.lots, gapFactor: p.multiplier }));
                    sellPlacements = arbMarketMakingConfig.sellPlacements.map((p) => ({ lots: p.lots, gapFactor: p.multiplier }));
                    profit = arbMarketMakingConfig.profit;
                }
                else if (basicMarketMakingConfig) {
                    buyPlacements = basicMarketMakingConfig.buyPlacements;
                    sellPlacements = basicMarketMakingConfig.sellPlacements;
                    let bestBuy;
                    let bestSell;
                    if (buyPlacements.length > 0)
                        bestBuy = buyPlacements.reduce((prev, curr) => curr.gapFactor < prev.gapFactor ? curr : prev);
                    if (sellPlacements.length > 0)
                        bestSell = sellPlacements.reduce((prev, curr) => curr.gapFactor < prev.gapFactor ? curr : prev);
                    if (bestBuy && bestSell) {
                        profit = (bestBuy.gapFactor + bestSell.gapFactor) / 2;
                    }
                    else if (bestBuy) {
                        profit = bestBuy.gapFactor;
                    }
                    else if (bestSell) {
                        profit = bestSell.gapFactor;
                    }
                }
                const marketConfig = { cexName: cexName, botType, baseFiatRate: baseFiatRate, dict: { profit, buyPlacements, sellPlacements } };
                this.placementsChart.setMarket(marketConfig);
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(botType !== _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicMM, page.cexDataBox);
            if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_1__.botTypeBasicMM) {
                const cex = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName];
                if (cex) {
                    const mkt = cex.markets ? cex.markets[mktID] : undefined;
                    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(mkt === null || mkt === void 0 ? void 0 : mkt.day, page.cexDataBox);
                    if (mkt === null || mkt === void 0 ? void 0 : mkt.day) {
                        const day = mkt.day;
                        page.cexPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(day.lastPrice);
                        page.cexVol.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(baseFiatRate * day.vol);
                    }
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(Boolean(cexName), ..._doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(div, '[data-cex-show]'));
            const { spot } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host].markets[mktID];
            if (spot) {
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.dexDataBox);
                const c = _orderutil__WEBPACK_IMPORTED_MODULE_4__.RateEncodingFactor / baseFactor * quoteFactor;
                page.dexPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(spot.rate / c);
                page.dexVol.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(spot.vol24 / baseFactor * baseFiatRate);
            }
            this.updateDisplay();
            this.updateTableRow();
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(page.loadingBg);
        });
    }
    updateTableRow() {
        const { row: { tmpl } } = this;
        const { running, runStats } = this.status();
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(running, tmpl.profitLossBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!running, tmpl.allocateBttnBox);
        if (runStats) {
            tmpl.profitLoss.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(runStats.profitLoss.profit, 2);
        }
    }
    updateDisplay() {
        const { page, marketReport: { baseFiatRate, quoteFiatRate }, baseFeeFiatRate, quoteFeeFiatRate } = this;
        if ([baseFiatRate, quoteFiatRate, baseFeeFiatRate, quoteFeeFiatRate].some((r) => !r)) {
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(page.onBox, page.offBox);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.noFiatDisplay);
            return;
        }
        const { running } = this.status();
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(running, page.onBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!running, page.offBox);
        if (running)
            this.updateRunningDisplay();
        else
            this.updateIdleDisplay();
    }
    updateRunningDisplay() {
        this.runDisplay.update();
    }
    updateIdleDisplay() {
        const { page, proj: { alloc, qProj, bProj }, baseID, quoteID, cexName, bui, qui, baseFeeID, quoteFeeID, baseFactor, quoteFactor, baseFeeFactor, quoteFeeFactor, marketReport: { baseFiatRate, quoteFiatRate }, cfg: { uiConfig: { baseConfig, quoteConfig } }, quoteFeeUI, baseFeeUI } = this;
        page.baseAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(alloc[baseID], bui);
        const baseUSD = alloc[baseID] / baseFactor * baseFiatRate;
        let totalUSD = baseUSD;
        page.baseAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(baseUSD);
        page.baseBookAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bProj.book * baseFactor, bui);
        page.baseOrderReservesAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bProj.orderReserves * baseFactor, bui);
        page.baseOrderReservesPct.textContent = String(Math.round(baseConfig.orderReservesFactor * 100));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(cexName, page.baseCexAllocBox);
        if (cexName)
            page.baseCexAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bProj.cex * baseFactor, bui);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseFeeID === baseID, page.baseBookingFeesAllocBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseFeeID !== baseID, page.baseTokenFeesAllocBox);
        if (baseFeeID === baseID) {
            const bookingFees = baseID === quoteFeeID ? bProj.bookingFees + qProj.bookingFees : bProj.bookingFees;
            page.baseBookingFeesAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bookingFees * baseFeeFactor, baseFeeUI);
        }
        else {
            const feeAlloc = alloc[baseFeeID];
            page.baseTokenFeeAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(feeAlloc, baseFeeUI);
            const baseFeeUSD = feeAlloc / baseFeeFactor * (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[baseFeeID];
            totalUSD += baseFeeUSD;
            page.baseTokenAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(baseFeeUSD);
            const withQuote = baseFeeID === quoteFeeID;
            const bookingFees = bProj.bookingFees + (withQuote ? qProj.bookingFees : 0);
            page.baseTokenBookingFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bookingFees * baseFeeFactor, baseFeeUI);
            page.baseTokenSwapFeeN.textContent = String(baseConfig.swapFeeN + (withQuote ? quoteConfig.swapFeeN : 0));
            const swapReserves = bProj.swapFeeReserves + (withQuote ? qProj.swapFeeReserves : 0);
            page.baseTokenSwapFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(swapReserves * baseFeeFactor, baseFeeUI);
        }
        page.quoteAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(alloc[quoteID], qui);
        const quoteUSD = alloc[quoteID] / quoteFactor * quoteFiatRate;
        totalUSD += quoteUSD;
        page.quoteAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(quoteUSD);
        page.quoteBookAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.book * quoteFactor, qui);
        page.quoteOrderReservesAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.orderReserves * quoteFactor, qui);
        page.quoteOrderReservesPct.textContent = String(Math.round(quoteConfig.orderReservesFactor * 100));
        page.quoteSlippageAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.slippageBuffer * quoteFactor, qui);
        page.slippageBufferFactor.textContent = String(Math.round(quoteConfig.slippageBufferFactor * 100));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(cexName, page.quoteCexAllocBox);
        if (cexName)
            page.quoteCexAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.cex * quoteFactor, qui);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(quoteID === quoteFeeID, page.quoteBookingFeesAllocBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(quoteFeeID !== quoteID && quoteFeeID !== baseFeeID, page.quoteTokenFeesAllocBox);
        if (quoteID === quoteFeeID) {
            const bookingFees = quoteID === baseFeeID ? bProj.bookingFees + qProj.bookingFees : qProj.bookingFees;
            page.quoteBookingFeesAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(bookingFees * quoteFeeFactor, quoteFeeUI);
        }
        else if (quoteFeeID !== baseFeeID) {
            page.quoteTokenFeeAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(alloc[quoteFeeID], quoteFeeUI);
            const quoteFeeUSD = alloc[quoteFeeID] / quoteFeeFactor * (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[quoteFeeID];
            totalUSD += quoteFeeUSD;
            page.quoteTokenAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(quoteFeeUSD);
            page.quoteTokenBookingFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.bookingFees * quoteFeeFactor, quoteFeeUI);
            page.quoteTokenSwapFeeN.textContent = String(quoteConfig.swapFeeN);
            page.quoteTokenSwapFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFullPrecision(qProj.swapFeeReserves * quoteFeeFactor, quoteFeeUI);
        }
        page.totalAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(totalUSD);
    }
    /*
     * allocate opens a dialog to choose funding sources (if applicable) and
     * confirm allocations and start the bot.
     */
    allocate() {
        var _a, _b, _c;
        const f = this.fundingState();
        const { page, marketReport: { baseFiatRate, quoteFiatRate }, baseID, quoteID, baseFeeID, quoteFeeID, baseFeeFiatRate, quoteFeeFiatRate, cexName, baseFactor, quoteFactor, baseFeeFactor, quoteFeeFactor, host, mktID } = this;
        const [proposedDexBase, proposedCexBase, baseSlider] = parseFundingOptions(f.base);
        const [proposedDexQuote, proposedCexQuote, quoteSlider] = parseFundingOptions(f.quote);
        const alloc = this.alloc = {
            dex: {
                [baseID]: proposedDexBase * baseFactor,
                [quoteID]: proposedDexQuote * quoteFactor
            },
            cex: {
                [baseID]: proposedCexBase * baseFactor,
                [quoteID]: proposedCexQuote * quoteFactor
            }
        };
        alloc.dex[baseFeeID] = Math.min(((_a = alloc.dex[baseFeeID]) !== null && _a !== void 0 ? _a : 0) + (f.base.fees.req * baseFeeFactor), f.base.fees.avail * baseFeeFactor);
        alloc.dex[quoteFeeID] = Math.min(((_b = alloc.dex[quoteFeeID]) !== null && _b !== void 0 ? _b : 0) + (f.quote.fees.req * quoteFeeFactor), f.quote.fees.avail * quoteFeeFactor);
        let totalUSD = (alloc.dex[baseID] / baseFactor * baseFiatRate) + (alloc.dex[quoteID] / quoteFactor * quoteFiatRate);
        totalUSD += (alloc.cex[baseID] / baseFactor * baseFiatRate) + (alloc.cex[quoteID] / quoteFactor * quoteFiatRate);
        if (baseFeeID !== baseID)
            totalUSD += alloc.dex[baseFeeID] / baseFeeFactor * baseFeeFiatRate;
        if (quoteFeeID !== quoteID && quoteFeeID !== baseFeeID)
            totalUSD += alloc.dex[quoteFeeID] / quoteFeeFactor * quoteFeeFiatRate;
        page.allocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(totalUSD);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(cexName, ..._doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(page.allocationDialog, '[data-cex-only]'));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(f.fundedAndBalanced, page.fundedAndBalancedBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(f.base.transferable + f.quote.transferable > 0, page.hasTransferable);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(f.fundedAndNotBalanced, page.fundedAndNotBalancedBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(f.starved, page.starvedBox);
        page.startBttn.classList.toggle('go', f.fundedAndBalanced);
        page.startBttn.classList.toggle('warning', !f.fundedAndBalanced);
        page.proposedDexBaseAlloc.classList.toggle('text-warning', !(f.base.fundedAndBalanced || f.base.fundedAndNotBalanced));
        page.proposedDexQuoteAlloc.classList.toggle('text-warning', !(f.quote.fundedAndBalanced || f.quote.fundedAndNotBalanced));
        const setBaseProposal = (dex, cex) => {
            page.proposedDexBaseAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dex);
            page.proposedDexBaseAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dex * baseFiatRate);
            page.proposedCexBaseAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cex);
            page.proposedCexBaseAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cex * baseFiatRate);
        };
        setBaseProposal(proposedDexBase, proposedCexBase);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseSlider, page.baseAllocSlider);
        if (baseSlider) {
            const dexRange = baseSlider.right.dex - baseSlider.left.dex;
            const cexRange = baseSlider.right.cex - baseSlider.left.cex;
            this.baseAllocSlider.setValue(0.5);
            this.baseAllocSlider.changed = (r) => {
                const dexAlloc = baseSlider.left.dex + r * dexRange;
                const cexAlloc = baseSlider.left.cex + r * cexRange;
                alloc.dex[baseID] = dexAlloc * baseFactor;
                alloc.cex[baseID] = cexAlloc * baseFactor;
                setBaseProposal(dexAlloc, cexAlloc);
            };
        }
        const setQuoteProposal = (dex, cex) => {
            page.proposedDexQuoteAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dex);
            page.proposedDexQuoteAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dex * quoteFiatRate);
            page.proposedCexQuoteAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cex);
            page.proposedCexQuoteAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cex * quoteFiatRate);
        };
        setQuoteProposal(proposedDexQuote, proposedCexQuote);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(quoteSlider, page.quoteAllocSlider);
        if (quoteSlider) {
            const dexRange = quoteSlider.right.dex - quoteSlider.left.dex;
            const cexRange = quoteSlider.right.cex - quoteSlider.left.cex;
            this.quoteAllocSlider.setValue(0.5);
            this.quoteAllocSlider.changed = (r) => {
                const dexAlloc = quoteSlider.left.dex + r * dexRange;
                const cexAlloc = quoteSlider.left.cex + r * cexRange;
                alloc.dex[quoteID] = dexAlloc * quoteFactor;
                alloc.cex[quoteID] = cexAlloc * quoteFactor;
                setQuoteProposal(dexAlloc, cexAlloc);
            };
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseFeeID !== baseID, ..._doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(page.allocationDialog, '[data-base-token-fees]'));
        if (baseFeeID !== baseID) {
            const reqFees = f.base.fees.req + (baseFeeID === quoteFeeID ? f.quote.fees.req : 0);
            const proposedFees = Math.min(reqFees, f.base.fees.avail);
            page.proposedDexBaseFeeAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(proposedFees);
            page.proposedDexBaseFeeAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(proposedFees * baseFeeFiatRate);
            page.proposedDexBaseFeeAlloc.classList.toggle('text-warning', !f.base.fees.funded);
        }
        const needQuoteTokenFees = quoteFeeID !== quoteID && quoteFeeID !== baseFeeID;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(needQuoteTokenFees, ..._doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(page.allocationDialog, '[data-quote-token-fees]'));
        if (needQuoteTokenFees) {
            const proposedFees = Math.min(f.quote.fees.req, f.quote.fees.avail);
            page.proposedDexQuoteFeeAlloc.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(proposedFees);
            page.proposedDexQuoteFeeAllocUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(proposedFees * quoteFeeFiatRate);
            page.proposedDexQuoteFeeAlloc.classList.toggle('text-warning', !f.quote.fees.funded);
        }
        const mkt = (_c = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host]) === null || _c === void 0 ? void 0 : _c.markets[mktID];
        let existingOrders = false;
        if (mkt && mkt.orders) {
            for (let i = 0; i < mkt.orders.length; i++) {
                if (mkt.orders[i].status <= _orderutil__WEBPACK_IMPORTED_MODULE_4__.StatusBooked) {
                    existingOrders = true;
                    break;
                }
            }
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(existingOrders, page.existingOrdersBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.allocationDialog);
        const closeDialog = (e) => {
            if (_doc__WEBPACK_IMPORTED_MODULE_2__["default"].mouseInElement(e, page.allocationDialog))
                return;
            this.hideAllocationDialog();
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].unbind(document, 'click', closeDialog);
        };
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(document, 'click', closeDialog);
    }
    hideAllocationDialog() {
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(this.page.allocationDialog);
    }
    start() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { page, alloc, baseID, quoteID, host, cexName, cfg: { uiConfig: { cexRebalance } } } = this;
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(page.errMsg);
            if (cexName && !((_a = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName]) === null || _a === void 0 ? void 0 : _a.connected)) {
                page.errMsg.textContent = `${cexName} not connected`;
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.errMsg);
                return;
            }
            // round allocations values.
            for (const m of [alloc.dex, alloc.cex]) {
                for (const [assetID, v] of Object.entries(m))
                    m[parseInt(assetID)] = Math.round(v);
            }
            const startConfig = {
                baseID: baseID,
                quoteID: quoteID,
                host: host,
                alloc: alloc
            };
            if (cexName && cexRebalance)
                startConfig.autoRebalance = this.autoRebalanceSettings();
            try {
                (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().log('mm', 'starting mm bot', startConfig);
                const res = yield _mmutil__WEBPACK_IMPORTED_MODULE_1__.MM.startBot(startConfig);
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().checkResponse(res))
                    throw res;
            }
            catch (e) {
                page.errMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_API_ERROR, e);
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.errMsg);
                return;
            }
            this.hideAllocationDialog();
        });
    }
    autoRebalanceSettings() {
        const { proj: { bProj, qProj, alloc }, baseFeeID, quoteFeeID, cfg: { uiConfig: { baseConfig, quoteConfig } }, baseID, quoteID, cexName, mktID } = this;
        const totalBase = alloc[baseID];
        let dexMinBase = bProj.book;
        if (baseID === baseFeeID)
            dexMinBase += bProj.bookingFees;
        if (baseID === quoteFeeID)
            dexMinBase += qProj.bookingFees;
        let dexMinQuote = qProj.book;
        if (quoteID === quoteFeeID)
            dexMinQuote += qProj.bookingFees;
        if (quoteID === baseFeeID)
            dexMinQuote += bProj.bookingFees;
        const maxBase = Math.max(totalBase - dexMinBase, totalBase - bProj.cex);
        const totalQuote = alloc[quoteID];
        const maxQuote = Math.max(totalQuote - dexMinQuote, totalQuote - qProj.cex);
        if (maxBase < 0 || maxQuote < 0) {
            throw Error(`rebalance math doesn't work: ${JSON.stringify({ bProj, qProj, maxBase, maxQuote })}`);
        }
        const cex = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName];
        const mkt = cex.markets[mktID];
        const [minB, maxB] = [mkt.baseMinWithdraw, Math.max(mkt.baseMinWithdraw * 2, maxBase)];
        const minBaseTransfer = Math.round(minB + baseConfig.transferFactor * (maxB - minB));
        const [minQ, maxQ] = [mkt.quoteMinWithdraw, Math.max(mkt.quoteMinWithdraw * 2, maxQuote)];
        const minQuoteTransfer = Math.round(minQ + quoteConfig.transferFactor * (maxQ - minQ));
        return { minBaseTransfer, minQuoteTransfer };
    }
    reconfigure() {
        const { host, baseID, quoteID, cexName, botType } = this;
        (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmsettings', { host, baseID, quoteID, cexName, botType });
    }
    handleEpochReportNote(note) {
        this.runDisplay.handleEpochReportNote(note);
    }
    handleCexProblemsNote(note) {
        this.runDisplay.handleCexProblemsNote(note);
    }
    handleRunStats() {
        this.updateDisplay();
        this.updateTableRow();
        this.runDisplay.readBook();
    }
}


/***/ }),

/***/ "./src/js/mmarchives.ts":
/*!******************************!*\
  !*** ./src/js/mmarchives.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MarketMakerArchivesPage)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class MarketMakerArchivesPage extends _basepage__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(main) {
        super();
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].idDescendants(main);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].cleanTemplates(page.runTableRowTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(page.backButton, 'click', () => { (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mm'); });
        this.setup();
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.getJSON)('/api/archivedmmruns');
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().checkResponse(res)) {
                console.error('failed to get archived mm runs', res);
                // TODO: show error
                return;
            }
            const runs = res.runs;
            for (let i = 0; i < runs.length; i++) {
                const { startTime, market: { baseID, quoteID, host } } = runs[i];
                const row = this.page.runTableRowTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(row);
                tmpl.startTime.textContent = new Date(startTime * 1000).toLocaleString();
                (0,_mmutil__WEBPACK_IMPORTED_MODULE_4__.setMarketElements)(row, baseID, quoteID, host);
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.logs, 'click', () => {
                    (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmlogs', { baseID, quoteID, host, startTime, returnPage: 'mmarchives' });
                });
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(tmpl.settings, 'click', () => {
                    (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmsettings', { host, baseID, quoteID });
                });
                this.page.runTableBody.appendChild(row);
            }
        });
    }
}


/***/ }),

/***/ "./src/js/mmlogs.ts":
/*!**************************!*\
  !*** ./src/js/mmlogs.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MarketMakerLogsPage)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _wallets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./wallets */ "./src/js/wallets.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









let net = 0;
const logsBatchSize = 50;
function eventPassesFilter(e, filters) {
    if (e.dexOrderEvent) {
        if (e.dexOrderEvent.sell)
            return filters.dexSells;
        return filters.dexBuys;
    }
    if (e.cexOrderEvent) {
        if (e.cexOrderEvent.sell)
            return filters.cexSells;
        return filters.cexBuys;
    }
    if (e.depositEvent)
        return filters.deposits;
    if (e.withdrawalEvent)
        return filters.withdrawals;
    return false;
}
class MarketMakerLogsPage extends _basepage__WEBPACK_IMPORTED_MODULE_4__["default"] {
    constructor(main, params) {
        super();
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].idDescendants(main);
        net = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().user.net;
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].cleanTemplates(page.eventTableRowTmpl, page.dexOrderTxRowTmpl, page.performanceTableRowTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].bind(this.page.backButton, 'click', () => { var _a; (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage((_a = params.returnPage) !== null && _a !== void 0 ? _a : 'mm'); });
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].bind(this.page.filterButton, 'click', () => { this.applyFilters(); });
        if (params === null || params === void 0 ? void 0 : params.host) {
            const url = new URL(window.location.href);
            url.searchParams.set('host', params.host);
            url.searchParams.set('baseID', String(params.baseID));
            url.searchParams.set('quoteID', String(params.quoteID));
            url.searchParams.set('startTime', String(params.startTime));
            window.history.replaceState(Object.assign({ page: 'mmsettings' }, params), '', url);
        }
        else {
            const urlParams = new URLSearchParams(window.location.search);
            if (!params)
                params = {};
            params.host = urlParams.get('host') || '';
            params.baseID = parseInt(urlParams.get('baseID') || '0');
            params.quoteID = parseInt(urlParams.get('quoteID') || '0');
            params.startTime = parseInt(urlParams.get('startTime') || '0');
        }
        const { baseID, quoteID, host, startTime } = params;
        this.startTime = startTime;
        this.forms = new _forms__WEBPACK_IMPORTED_MODULE_1__.Forms(page.forms);
        this.events = {};
        this.statsRows = {};
        this.mkt = { baseID: baseID, quoteID: quoteID, host };
        (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.setMarketElements)(main, baseID, quoteID, host);
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].bind(main, 'scroll', () => {
            if (this.loading)
                return;
            if (this.doneScrolling)
                return;
            const belowBottom = page.eventsTable.offsetHeight - main.offsetHeight - main.scrollTop;
            if (belowBottom < 0) {
                this.nextPage();
            }
        });
        this.setup(host, baseID, quoteID);
    }
    nextPage() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            const [events, updatedLogs, overview] = yield this.getRunLogs();
            const assets = this.mktAssets();
            for (const event of events) {
                if (this.events[event.id])
                    continue;
                const row = this.newEventRow(event, false, assets);
                this.events[event.id] = [event, row];
            }
            this.populateStats(overview.profitLoss, overview.endTime);
            this.updateExistingRows(updatedLogs);
            this.loading = false;
        });
    }
    getRunLogs() {
        return __awaiter(this, void 0, void 0, function* () {
            const { mkt, startTime } = this;
            const req = { market: mkt, startTime, n: logsBatchSize, filters: this.filters, refID: this.refID };
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/mmrunlogs', req);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().checkResponse(res)) {
                console.error('failed to get bot logs', res);
            }
            if (res.logs.length <= 1) {
                this.doneScrolling = true;
            }
            if (res.logs.length > 0) {
                this.refID = res.logs[res.logs.length - 1].id;
            }
            return [res.logs, res.updatedLogs || [], res.overview];
        });
    }
    applyFilters() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.filters = {
                dexSells: !!page.dexSellsCheckbox.checked,
                dexBuys: !!page.dexBuysCheckbox.checked,
                cexSells: !!page.cexSellsCheckbox.checked,
                cexBuys: !!page.cexBuysCheckbox.checked,
                deposits: !!page.depositsCheckbox.checked,
                withdrawals: !!page.withdrawalsCheckbox.checked
            };
            this.refID = undefined;
            const [events, , overview] = yield this.getRunLogs();
            this.populateTable(events);
            this.populateStats(overview.profitLoss, overview.endTime);
        });
    }
    setFilters() {
        const page = this.page;
        page.dexSellsCheckbox.checked = true;
        page.dexBuysCheckbox.checked = true;
        page.cexSellsCheckbox.checked = true;
        page.cexBuysCheckbox.checked = true;
        page.depositsCheckbox.checked = true;
        page.withdrawalsCheckbox.checked = true;
        this.filters = {
            dexSells: true,
            dexBuys: true,
            cexSells: true,
            cexBuys: true,
            deposits: true,
            withdrawals: true
        };
    }
    setup(host, baseID, quoteID) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.setFilters();
            const { startTime } = this;
            let profitLoss;
            let endTime = 0;
            const botStatus = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.liveBotStatus)(host, baseID, quoteID);
            const [events, , overview] = yield this.getRunLogs();
            if (((_a = botStatus === null || botStatus === void 0 ? void 0 : botStatus.runStats) === null || _a === void 0 ? void 0 : _a.startTime) === startTime) {
                this.liveBot = true;
                this.fiatRates = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap;
                profitLoss = botStatus.runStats.profitLoss;
            }
            else {
                this.fiatRates = overview.finalState.fiatRates;
                profitLoss = overview.profitLoss;
                endTime = overview.endTime;
            }
            this.populateStats(profitLoss, endTime);
            const assets = this.mktAssets();
            const parentHeader = page.sumUSDHeader.parentElement;
            for (const asset of assets) {
                const th = document.createElement('th');
                th.textContent = `${asset.symbol.toUpperCase()} Delta`;
                if (parentHeader) {
                    parentHeader.insertBefore(th, page.sumUSDHeader);
                }
            }
            this.populateTable(events);
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().registerNoteFeeder({
                runevent: (note) => { this.handleRunEventNote(note); },
                runstats: (note) => { this.handleRunStatsNote(note); }
            });
        });
    }
    handleRunEventNote(note) {
        const { baseID, quoteID, host } = this.mkt;
        if (note.host !== host || note.baseID !== baseID || note.quoteID !== quoteID)
            return;
        if (!eventPassesFilter(note.event, this.filters))
            return;
        const event = note.event;
        const cachedEvent = this.events[event.id];
        if (cachedEvent) {
            this.setRowContents(cachedEvent[1], event, this.mktAssets());
            cachedEvent[0] = event;
            return;
        }
        const row = this.newEventRow(event, true, this.mktAssets());
        this.events[event.id] = [event, row];
    }
    handleRunStatsNote(note) {
        const { mkt: { baseID, quoteID, host }, startTime } = this;
        if (note.host !== host ||
            note.baseID !== baseID ||
            note.quoteID !== quoteID)
            return;
        if (!note.stats || note.stats.startTime !== startTime)
            return;
        this.populateStats(note.stats.profitLoss, 0);
    }
    populateStats(pl, endTime) {
        const page = this.page;
        page.startTime.textContent = new Date(this.startTime * 1000).toLocaleString();
        if (endTime === 0) {
            _doc__WEBPACK_IMPORTED_MODULE_3__["default"].hide(page.endTimeRow);
        }
        else {
            page.endTime.textContent = new Date(endTime * 1000).toLocaleString();
        }
        for (const assetID in pl.diffs) {
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[parseInt(assetID)];
            let row = this.statsRows[assetID];
            if (!row) {
                row = page.performanceTableRowTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].parseTemplate(row);
                tmpl.logo.src = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].logoPath(asset.symbol);
                tmpl.ticker.textContent = asset.symbol.toUpperCase();
                this.statsRows[assetID] = row;
                page.performanceTableBody.appendChild(row);
            }
            const diff = pl.diffs[assetID];
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].parseTemplate(row);
            tmpl.diff.textContent = diff.fmt;
            tmpl.usdDiff.textContent = diff.fmtUSD;
            tmpl.fiatRate.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatFiatValue(this.fiatRates[asset.id])} USD`;
        }
        page.profitLoss.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatFiatValue(pl.profit)} USD`;
    }
    mktAssets() {
        const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.mkt.baseID];
        const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.mkt.quoteID];
        const assets = [baseAsset, quoteAsset];
        const assetIDs = { [baseAsset.id]: true, [quoteAsset.id]: true };
        if (baseAsset.token && !assetIDs[baseAsset.token.parentID]) {
            const baseTokenAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseAsset.token.parentID];
            assetIDs[baseTokenAsset.id] = true;
            assets.push(baseTokenAsset);
        }
        if (quoteAsset.token && !assetIDs[quoteAsset.token.parentID]) {
            const quoteTokenAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteAsset.token.parentID];
            assets.push(quoteTokenAsset);
        }
        return assets;
    }
    updateExistingRows(updatedLogs) {
        for (const event of updatedLogs) {
            const cachedEvent = this.events[event.id];
            if (!cachedEvent)
                continue;
            this.setRowContents(cachedEvent[1], event, this.mktAssets());
            cachedEvent[0] = event;
        }
    }
    populateTable(events) {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].empty(page.eventsTableBody);
        this.events = {};
        this.doneScrolling = false;
        const assets = this.mktAssets();
        for (const event of events) {
            const row = this.newEventRow(event, false, assets);
            this.events[event.id] = [event, row];
        }
    }
    setRowContents(row, event, assets) {
        var _a;
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].parseTemplate(row);
        tmpl.time.textContent = (new Date(event.timestamp * 1000)).toLocaleString();
        tmpl.eventType.textContent = this.eventType(event);
        let id;
        if (event.depositEvent) {
            id = event.depositEvent.transaction.id;
        }
        else if (event.withdrawalEvent) {
            id = event.withdrawalEvent.id;
        }
        else if (event.dexOrderEvent) {
            id = event.dexOrderEvent.id;
        }
        else if (event.cexOrderEvent) {
            id = event.cexOrderEvent.id;
        }
        if (id) {
            tmpl.eventID.textContent = trimStringWithEllipsis(id, 30);
            tmpl.eventID.setAttribute('title', id);
        }
        let usd = 0;
        for (const asset of assets) {
            const be = event.balanceEffects;
            const sum = sumBalanceEffects(asset.id, be);
            const tmplID = `sum${asset.symbol.toUpperCase()}`;
            let el;
            if (tmpl[tmplID]) {
                el = tmpl[tmplID];
            }
            else {
                el = document.createElement('td');
                el.dataset.tmpl = tmplID;
                const parent = tmpl.sumUSD.parentElement;
                if (parent) {
                    parent.insertBefore(el, tmpl.sumUSD);
                }
            }
            el.textContent = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(sum, asset.unitInfo);
            const factor = asset.unitInfo.conventional.conversionFactor;
            usd += (_a = sum / factor * this.fiatRates[asset.id]) !== null && _a !== void 0 ? _a : 0;
        }
        tmpl.sumUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatFourSigFigs(usd);
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].bind(tmpl.details, 'click', () => { this.showEventDetails(event.id); });
    }
    newEventRow(event, prepend, assets) {
        const page = this.page;
        const row = page.eventTableRowTmpl.cloneNode(true);
        row.id = event.id.toString();
        this.setRowContents(row, event, assets);
        if (prepend) {
            page.eventsTableBody.insertBefore(row, page.eventsTableBody.firstChild);
        }
        else {
            page.eventsTableBody.appendChild(row);
        }
        return row;
    }
    eventType(event) {
        if (event.depositEvent) {
            return 'Deposit';
        }
        else if (event.withdrawalEvent) {
            return 'Withdrawal';
        }
        else if (event.dexOrderEvent) {
            return event.dexOrderEvent.sell ? 'DEX Sell' : 'DEX Buy';
        }
        else if (event.cexOrderEvent) {
            return event.cexOrderEvent.sell ? 'CEX Sell' : 'CEX Buy';
        }
        return '';
    }
    showDexOrderEventDetails(event) {
        const { page, mkt: { baseID, quoteID } } = this;
        const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
        const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
        const [bui, qui] = [baseAsset.unitInfo, quoteAsset.unitInfo];
        const [baseTicker, quoteTicker] = [bui.conventional.unit, qui.conventional.unit];
        if (this.dexOrderIDCopyListener !== undefined) {
            page.copyDexOrderID.removeEventListener('click', this.dexOrderIDCopyListener);
        }
        this.dexOrderIDCopyListener = () => { (0,_doc__WEBPACK_IMPORTED_MODULE_3__.setupCopyBtn)(event.id, page.dexOrderID, page.copyDexOrderID, '#1e7d11'); };
        page.copyDexOrderID.addEventListener('click', this.dexOrderIDCopyListener);
        page.dexOrderID.textContent = trimStringWithEllipsis(event.id, 20);
        page.dexOrderID.setAttribute('title', event.id);
        const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().conventionalRate(baseID, quoteID, event.rate);
        page.dexOrderRate.textContent = `${rate} ${baseTicker}/${quoteTicker}`;
        page.dexOrderQty.textContent = `${event.qty / bui.conventional.conversionFactor} ${baseTicker}`;
        if (event.sell) {
            page.dexOrderSide.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_SELL);
        }
        else {
            page.dexOrderSide.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_BUY);
        }
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].empty(page.dexOrderTxsTableBody);
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].setVis(event.transactions && event.transactions.length > 0, page.dexOrderTxsTable);
        const txAsset = (txType, sell) => {
            switch (txType) {
                case _wallets__WEBPACK_IMPORTED_MODULE_7__.txTypeSwap:
                case _wallets__WEBPACK_IMPORTED_MODULE_7__.txTypeRefund:
                case _wallets__WEBPACK_IMPORTED_MODULE_7__.txTypeSplit:
                    return sell ? baseAsset : quoteAsset;
                case _wallets__WEBPACK_IMPORTED_MODULE_7__.txTypeRedeem:
                    return sell ? quoteAsset : baseAsset;
            }
        };
        for (let i = 0; event.transactions && i < event.transactions.length; i++) {
            const tx = event.transactions[i];
            const row = page.dexOrderTxRowTmpl.cloneNode(true);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].parseTemplate(row);
            tmpl.id.textContent = trimStringWithEllipsis(tx.id, 20);
            tmpl.id.setAttribute('title', tx.id);
            tmpl.type.textContent = _wallets__WEBPACK_IMPORTED_MODULE_7__.txTypeString(tx.type);
            const asset = txAsset(tx.type, event.sell);
            if (!asset) {
                console.error('unexpected tx type in dex order event', tx.type);
                continue;
            }
            const assetExplorer = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[asset.id];
            if (assetExplorer && assetExplorer[net]) {
                tmpl.explorerLink.href = assetExplorer[net](tx.id);
            }
            tmpl.amt.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(tx.amount, asset.unitInfo)} ${asset.unitInfo.conventional.unit.toLowerCase()}`;
            tmpl.fees.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(tx.fees, asset.unitInfo)} ${asset.unitInfo.conventional.unit.toLowerCase()}`;
            page.dexOrderTxsTableBody.appendChild(row);
        }
        this.forms.show(page.dexOrderDetailsForm);
    }
    showCexOrderEventDetails(event) {
        const { page, mkt: { baseID, quoteID } } = this;
        const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
        const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
        const [bui, qui] = [baseAsset.unitInfo, quoteAsset.unitInfo];
        const [baseTicker, quoteTicker] = [bui.conventional.unit, qui.conventional.unit];
        page.cexOrderID.textContent = trimStringWithEllipsis(event.id, 20);
        if (this.cexOrderIDCopyListener !== undefined) {
            page.copyCexOrderID.removeEventListener('click', this.cexOrderIDCopyListener);
        }
        this.cexOrderIDCopyListener = () => { (0,_doc__WEBPACK_IMPORTED_MODULE_3__.setupCopyBtn)(event.id, page.cexOrderID, page.copyCexOrderID, '#1e7d11'); };
        page.copyCexOrderID.addEventListener('click', this.cexOrderIDCopyListener);
        page.cexOrderID.setAttribute('title', event.id);
        const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().conventionalRate(baseID, quoteID, event.rate);
        page.cexOrderRate.textContent = `${rate} ${baseTicker}/${quoteTicker}`;
        page.cexOrderQty.textContent = `${event.qty / bui.conventional.conversionFactor} ${baseTicker}`;
        if (event.sell) {
            page.cexOrderSide.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_SELL);
        }
        else {
            page.cexOrderSide.textContent = _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_BUY);
        }
        page.cexOrderBaseFilled.textContent = `${event.baseFilled / bui.conventional.conversionFactor} ${baseTicker}`;
        page.cexOrderQuoteFilled.textContent = `${event.quoteFilled / qui.conventional.conversionFactor} ${quoteTicker}`;
        this.forms.show(page.cexOrderDetailsForm);
    }
    showDepositEventDetails(event, pending) {
        const page = this.page;
        page.depositID.textContent = trimStringWithEllipsis(event.transaction.id, 20);
        if (this.depositIDCopyListener !== undefined) {
            page.copyDepositID.removeEventListener('click', this.depositIDCopyListener);
        }
        this.depositIDCopyListener = () => { (0,_doc__WEBPACK_IMPORTED_MODULE_3__.setupCopyBtn)(event.transaction.id, page.depositID, page.copyDepositID, '#1e7d11'); };
        page.copyDepositID.addEventListener('click', this.depositIDCopyListener);
        page.depositID.setAttribute('title', event.transaction.id);
        const unitInfo = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[event.assetID].unitInfo;
        const unit = unitInfo.conventional.unit;
        page.depositAmt.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(event.transaction.amount, unitInfo)} ${unit}`;
        page.depositFees.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(event.transaction.fees, unitInfo)} ${unit}`;
        page.depositStatus.textContent = pending ? _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_PENDING) : _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_COMPLETE);
        _doc__WEBPACK_IMPORTED_MODULE_3__["default"].setVis(!pending, page.depositCreditSection);
        if (!pending) {
            page.depositCredit.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(event.cexCredit, unitInfo)} ${unit}`;
        }
        this.forms.show(page.depositDetailsForm);
    }
    showWithdrawalEventDetails(event, pending) {
        const page = this.page;
        page.withdrawalID.textContent = trimStringWithEllipsis(event.id, 20);
        if (this.withdrawalIDCopyListener !== undefined) {
            page.copyWithdrawalID.removeEventListener('click', this.withdrawalIDCopyListener);
        }
        this.withdrawalIDCopyListener = () => { (0,_doc__WEBPACK_IMPORTED_MODULE_3__.setupCopyBtn)(event.id, page.withdrawalID, page.copyWithdrawalID, '#1e7d11'); };
        page.copyWithdrawalID.addEventListener('click', this.withdrawalIDCopyListener);
        page.withdrawalID.setAttribute('title', event.id);
        const unitInfo = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[event.assetID].unitInfo;
        const unit = unitInfo.conventional.unit;
        page.withdrawalAmt.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(event.cexDebit, unitInfo)} ${unit}`;
        page.withdrawalStatus.textContent = pending ? _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_PENDING) : _locales__WEBPACK_IMPORTED_MODULE_6__.prep(_locales__WEBPACK_IMPORTED_MODULE_6__.ID_COMPLETE);
        if (event.transaction) {
            page.withdrawalTxID.textContent = trimStringWithEllipsis(event.transaction.id, 20);
            page.withdrawalTxID.setAttribute('title', event.transaction.id);
            page.withdrawalReceived.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue(event.transaction.amount, unitInfo)} ${unit}`;
        }
        this.forms.show(page.withdrawalDetailsForm);
    }
    showEventDetails(eventID) {
        const [event] = this.events[eventID];
        if (event.dexOrderEvent)
            this.showDexOrderEventDetails(event.dexOrderEvent);
        if (event.cexOrderEvent)
            this.showCexOrderEventDetails(event.cexOrderEvent);
        if (event.depositEvent)
            this.showDepositEventDetails(event.depositEvent, event.pending);
        if (event.withdrawalEvent)
            this.showWithdrawalEventDetails(event.withdrawalEvent, event.pending);
    }
}
function trimStringWithEllipsis(str, maxLen) {
    if (str.length <= maxLen)
        return str;
    return `${str.substring(0, maxLen / 2)}...${str.substring(str.length - maxLen / 2)}`;
}
function sumBalanceEffects(assetID, be) {
    let sum = 0;
    if (be.settled[assetID])
        sum += be.settled[assetID];
    if (be.pending[assetID])
        sum += be.pending[assetID];
    if (be.locked[assetID])
        sum += be.locked[assetID];
    if (be.reserved[assetID])
        sum += be.reserved[assetID];
    return sum;
}


/***/ }),

/***/ "./src/js/mmsettings.ts":
/*!******************************!*\
  !*** ./src/js/mmsettings.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MarketMakerSettingsPage)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _opts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./opts */ "./src/js/opts.ts");
/* harmony import */ var _mmutil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mmutil */ "./src/js/mmutil.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









const specLK = 'lastMMSpecs';
const lastBotsLK = 'lastBots';
const lastArbExchangeLK = 'lastArbExchange';
const arbMMRowCacheKey = 'arbmm';
const defaultSwapReserves = {
    n: 50,
    prec: 0,
    inc: 10,
    minR: 0,
    maxR: 1000,
    range: 1000
};
const defaultOrderReserves = {
    factor: 1.0,
    minR: 0,
    maxR: 3,
    range: 3,
    prec: 3
};
const defaultTransfer = {
    factor: 0.1,
    minR: 0,
    maxR: 1,
    range: 1
};
const defaultSlippage = {
    factor: 0.05,
    minR: 0,
    maxR: 0.3,
    range: 0.3,
    prec: 3
};
const defaultDriftTolerance = {
    value: 0.002,
    minV: 0,
    maxV: 0.02,
    range: 0.02,
    prec: 5
};
const defaultOrderPersistence = {
    value: 20,
    minV: 0,
    maxV: 40,
    range: 40,
    prec: 0
};
const defaultProfit = {
    prec: 3,
    value: 0.01,
    minV: 0.001,
    maxV: 0.1,
    range: 0.1 - 0.001
};
const defaultLevelSpacing = {
    prec: 3,
    value: 0.005,
    minV: 0.001,
    maxV: 0.02,
    range: 0.02 - 0.0001
};
const defaultMatchBuffer = {
    value: 0,
    prec: 3,
    minV: 0,
    maxV: 1,
    range: 1
};
const defaultLevelsPerSide = {
    prec: 0,
    inc: 1,
    value: 1,
    minV: 1
};
const defaultLotsPerLevel = {
    prec: 0,
    value: 1,
    minV: 1,
    usdIncrement: 100
};
const defaultUSDPerSide = {
    prec: 2
};
const defaultMarketMakingConfig = {
    gapStrategy: _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus,
    sellPlacements: [],
    buyPlacements: [],
    driftTolerance: defaultDriftTolerance.value,
    profit: 0.02,
    orderPersistence: defaultOrderPersistence.value,
    cexRebalance: true,
    simpleArbLots: 1
};
const defaultBotAssetConfig = {
    swapFeeN: defaultSwapReserves.n,
    orderReservesFactor: defaultOrderReserves.factor,
    slippageBufferFactor: defaultSlippage.factor,
    transferFactor: defaultTransfer.factor
};
class MarketMakerSettingsPage extends _basepage__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(main, specs) {
        super();
        this.placementsCache = {};
        this.opts = {};
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].idDescendants(main);
        this.forms = new _forms__WEBPACK_IMPORTED_MODULE_6__.Forms(page.forms, {
            closed: () => {
                var _a, _b;
                if (!((_a = this.specs) === null || _a === void 0 ? void 0 : _a.host) || !((_b = this.specs) === null || _b === void 0 ? void 0 : _b.botType))
                    (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mm');
            }
        });
        this.placementsChart = new _mmutil__WEBPACK_IMPORTED_MODULE_5__.PlacementsChart(page.placementsChart);
        this.approveTokenForm = new _forms__WEBPACK_IMPORTED_MODULE_6__.TokenApprovalForm(page.approveTokenForm, () => { this.submitBotType(); });
        this.walletAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_6__.DepositAddress(page.walletAddrForm);
        this.cexConfigForm = new _forms__WEBPACK_IMPORTED_MODULE_6__.CEXConfigurationForm(page.cexConfigForm, (cexName) => this.cexConfigured(cexName));
        page.quotePane = page.basePane.cloneNode(true);
        page.assetPaneBox.appendChild(page.quotePane);
        this.basePane = new AssetPane(this, page.basePane);
        this.quotePane = new AssetPane(this, page.quotePane);
        (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().headerSpace.appendChild(page.mmTitle);
        (0,_opts__WEBPACK_IMPORTED_MODULE_4__.setOptionTemplates)(page);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].cleanTemplates(page.orderOptTmpl, page.booleanOptTmpl, page.rangeOptTmpl, page.placementRowTmpl, page.oracleTmpl, page.cexOptTmpl, page.arbBttnTmpl, page.marketRowTmpl, page.needRegTmpl);
        page.basePane.removeAttribute('id'); // don't remove from layout
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.resetButton, 'click', () => { this.setOriginalValues(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.updateButton, 'click', () => { this.saveSettings(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.createButton, 'click', () => __awaiter(this, void 0, void 0, function* () { this.saveSettings(); }));
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.deleteBttn, 'click', () => { this.delete(); });
        (0,_forms__WEBPACK_IMPORTED_MODULE_6__.bind)(page.botTypeForm, page.botTypeSubmit, () => { this.submitBotType(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.noMarketBttn, 'click', () => { this.showMarketSelectForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.botTypeHeader, 'click', () => { this.reshowBotTypeForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.botTypeChangeMarket, 'click', () => { this.showMarketSelectForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.marketHeader, 'click', () => { this.showMarketSelectForm(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.marketFilterInput, 'input', () => { this.sortMarketRows(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.cexRebalanceCheckbox, 'change', () => { this.autoRebalanceChanged(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.switchToAdvanced, 'click', () => { this.showAdvancedConfig(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.switchToQuickConfig, 'click', () => { this.switchToQuickConfig(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.qcMatchBuffer, 'change', () => { this.matchBufferChanged(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.switchToUSDPerSide, 'click', () => { this.changeSideCommitmentDialog(); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.switchToLotsPerLevel, 'click', () => { this.changeSideCommitmentDialog(); });
        // Gap Strategy
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.gapStrategySelect, 'change', () => {
            if (!page.gapStrategySelect.value)
                return;
            const gapStrategy = page.gapStrategySelect.value;
            this.clearPlacements(this.updatedConfig.gapStrategy);
            this.loadCachedPlacements(gapStrategy);
            this.updatedConfig.gapStrategy = gapStrategy;
            this.setGapFactorLabels(gapStrategy);
            this.updateModifiedMarkers();
        });
        // Buy/Sell placements
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addBuyPlacementBtn, 'click', () => {
            this.addPlacement(true, null);
            page.addBuyPlacementLots.value = '';
            page.addBuyPlacementGapFactor.value = '';
            this.updateModifiedMarkers();
            this.placementsChart.render();
            this.updateAllocations();
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addSellPlacementBtn, 'click', () => {
            this.addPlacement(false, null);
            page.addSellPlacementLots.value = '';
            page.addSellPlacementGapFactor.value = '';
            this.updateModifiedMarkers();
            this.placementsChart.render();
            this.updateAllocations();
        });
        this.driftTolerance = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.driftToleranceInput, {
            prec: defaultDriftTolerance.prec - 2,
            sigFigs: true,
            min: 0,
            changed: (rawV) => {
                const { minV, range, prec } = defaultDriftTolerance;
                const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)(rawV / 100, prec);
                this.driftToleranceSlider.setValue((v - minV) / range);
                this.updatedConfig.driftTolerance = v;
            }
        });
        this.driftToleranceSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.driftToleranceSlider, (r) => {
            const { minV, range, prec } = defaultDriftTolerance;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)(minV + r * range, prec);
            this.updatedConfig.driftTolerance = v;
            this.driftTolerance.setValue(v * 100);
        });
        this.orderPersistence = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.orderPersistence, {
            changed: (v) => {
                const { minV, range } = defaultOrderPersistence;
                this.updatedConfig.orderPersistence = v;
                this.orderPersistenceSlider.setValue((v - minV) / range);
            }
        });
        this.orderPersistenceSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.orderPersistenceSlider, (r) => {
            const { minV, range, prec } = defaultOrderPersistence;
            const rawV = minV + r * range;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toPrecision)(rawV, prec);
            this.updatedConfig.orderPersistence = v;
            this.orderPersistence.setValue(v);
        });
        this.qcProfit = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.qcProfit, {
            prec: defaultProfit.prec - 2,
            sigFigs: true,
            min: defaultProfit.minV * 100,
            changed: (vPct) => {
                const { minV, range } = defaultProfit;
                const v = vPct / 100;
                this.updatedConfig.profit = v;
                page.profitInput.value = this.qcProfit.input.value;
                this.qcProfitSlider.setValue((v - minV) / range);
                this.quickConfigUpdated();
            }
        });
        this.qcProfitSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.qcProfitSlider, (r) => {
            const { minV, range, prec } = defaultProfit;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)((minV + r * range) * 100, prec);
            this.updatedConfig.profit = v / 100;
            this.qcProfit.setValue(v);
            page.profitInput.value = this.qcProfit.input.value;
            this.quickConfigUpdated();
        });
        this.qcLevelSpacing = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.qcLevelSpacing, {
            prec: defaultLevelSpacing.prec - 2,
            sigFigs: true,
            min: defaultLevelSpacing.minV * 100,
            changed: (vPct) => {
                const { minV, range } = defaultLevelSpacing;
                this.qcLevelSpacingSlider.setValue((vPct / 100 - minV) / range);
                this.quickConfigUpdated();
            }
        });
        this.qcLevelSpacingSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.qcLevelSpacingSlider, (r) => {
            const { minV, range } = defaultLevelSpacing;
            this.qcLevelSpacing.setValue(minV + r * range * 100);
            this.quickConfigUpdated();
        });
        this.qcMatchBuffer = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.qcMatchBuffer, {
            prec: defaultMatchBuffer.prec - 2,
            sigFigs: true,
            min: defaultMatchBuffer.minV * 100,
            changed: (vPct) => {
                const { minV, range } = defaultMatchBuffer;
                this.qcMatchBufferSlider.setValue((vPct / 100 - minV) / range);
                this.quickConfigUpdated();
            }
        });
        this.qcMatchBufferSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.qcMatchBufferSlider, (r) => {
            const { minV, range } = defaultMatchBuffer;
            this.qcMatchBuffer.setValue(minV + r * range * 100);
            this.quickConfigUpdated();
        });
        this.qcLevelsPerSide = new _doc__WEBPACK_IMPORTED_MODULE_1__.IncrementalInput(page.qcLevelsPerSide, {
            prec: defaultLevelsPerSide.prec,
            min: defaultLevelsPerSide.minV,
            inc: defaultLevelsPerSide.inc,
            changed: (v) => {
                this.qcUSDPerSide.setValue(this.lotSizeUSD() * v * this.qcLotsPerLevel.value());
                this.quickConfigUpdated();
            }
        });
        this.qcLotsPerLevel = new _doc__WEBPACK_IMPORTED_MODULE_1__.IncrementalInput(page.qcLotsPerLevel, {
            prec: defaultLotsPerLevel.prec,
            min: defaultLotsPerLevel.minV,
            inc: 1,
            changed: (v) => {
                this.qcUSDPerSide.setValue(this.lotSizeUSD() * v * this.qcLevelsPerSide.value());
                page.qcUSDPerSideEcho.textContent = this.qcUSDPerSide.input.value;
                this.quickConfigUpdated();
            },
            set: (v) => {
                const [, s] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)(v * this.qcLevelsPerSide.value() * this.lotSizeUSD(), 2);
                page.qcUSDPerSideEcho.textContent = s;
                page.qcLotsPerLevelEcho.textContent = s;
            }
        });
        this.qcUSDPerSide = new _doc__WEBPACK_IMPORTED_MODULE_1__.IncrementalInput(page.qcUSDPerSide, {
            prec: defaultUSDPerSide.prec,
            min: 1,
            inc: 1,
            changed: (v) => {
                this.qcLotsPerLevel.setValue(v / this.qcLevelsPerSide.value() / this.lotSizeUSD());
                page.qcLotsPerLevelEcho.textContent = this.qcLotsPerLevel.input.value;
                this.quickConfigUpdated();
            },
            set: (v, s) => {
                page.qcUSDPerSideEcho.textContent = s;
                page.qcLotsPerLevelEcho.textContent = String(Math.round(v / this.lotSizeUSD()));
            }
        });
        const maybeSubmitBuyRow = (e) => {
            if (e.key !== 'Enter')
                return;
            if (!isNaN(parseFloat(page.addBuyPlacementGapFactor.value || '')) &&
                !isNaN(parseFloat(page.addBuyPlacementLots.value || ''))) {
                page.addBuyPlacementBtn.click();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addBuyPlacementGapFactor, 'keyup', (e) => { maybeSubmitBuyRow(e); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addBuyPlacementLots, 'keyup', (e) => { maybeSubmitBuyRow(e); });
        const maybeSubmitSellRow = (e) => {
            if (e.key !== 'Enter')
                return;
            if (!isNaN(parseFloat(page.addSellPlacementGapFactor.value || '')) &&
                !isNaN(parseFloat(page.addSellPlacementLots.value || ''))) {
                page.addSellPlacementBtn.click();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addSellPlacementGapFactor, 'keyup', (e) => { maybeSubmitSellRow(e); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.addSellPlacementLots, 'keyup', (e) => { maybeSubmitSellRow(e); });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.profitInput, 'change', () => {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.profitInputErr);
            const showError = (errID) => {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.profitInputErr);
                page.profitInputErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(errID);
            };
            const profit = parseFloat(page.profitInput.value || '') / 100;
            if (isNaN(profit))
                return showError(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_INVALID_VALUE);
            if (profit === 0)
                return showError(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_ZERO);
            this.updatedConfig.profit = profit;
            this.updateModifiedMarkers();
        });
        this.botTypeSelectors = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].applySelector(page.botTypeForm, '[data-bot-type]');
        for (const div of this.botTypeSelectors) {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(div, 'click', () => {
                if (div.classList.contains('disabled'))
                    return;
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.botTypeErr);
                page.cexSelection.classList.toggle('disabled', div.dataset.botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM);
                this.setBotTypeSelected(div.dataset.botType);
            });
        }
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_6__.NewWalletForm(page.newWalletForm, () => __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fetchUser();
            this.submitBotType();
        }));
        (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().registerNoteFeeder({
            balance: (note) => { this.handleBalanceNote(note); }
        });
        this.initialize(specs);
    }
    unload() {
        this.forms.exit();
    }
    initialize(specs) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.setupCEXes();
            this.initializeMarketRows();
            const isRefresh = specs && Object.keys(specs).length === 0;
            if (isRefresh)
                specs = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(specLK);
            if (!specs || !(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[specs.baseID] || !(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[specs.quoteID]) {
                this.showMarketSelectForm();
                return;
            }
            // If we have specs specifying only a market, make sure the cex name and
            // bot type are set.
            if (specs && !specs.botType) {
                const botCfg = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.liveBotConfig)(specs.host, specs.baseID, specs.quoteID);
                specs.cexName = (_a = botCfg === null || botCfg === void 0 ? void 0 : botCfg.cexName) !== null && _a !== void 0 ? _a : '';
                specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM;
                if (botCfg === null || botCfg === void 0 ? void 0 : botCfg.arbMarketMakingConfig)
                    specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM;
                else if (botCfg === null || botCfg === void 0 ? void 0 : botCfg.simpleArbConfig)
                    specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb;
            }
            // Must be a reconfig.
            this.specs = specs;
            yield this.fetchCEXBalances(specs);
            this.configureUI();
        });
    }
    configureUI() {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const { page, specs } = this;
            const { host, baseID, quoteID, cexName, botType } = specs;
            const [{ symbol: baseSymbol, token: baseToken }, { symbol: quoteSymbol, token: quoteToken }] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID]];
            this.mktID = `${baseSymbol}_${quoteSymbol}`;
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.botSettingsContainer, page.marketBox, page.updateButton, page.resetButton, page.createButton, page.noMarket, page.missingFiatRates);
            if ([baseID, quoteID, (_a = baseToken === null || baseToken === void 0 ? void 0 : baseToken.parentID) !== null && _a !== void 0 ? _a : baseID, (_b = quoteToken === null || quoteToken === void 0 ? void 0 : quoteToken.parentID) !== null && _b !== void 0 ? _b : quoteID].some((assetID) => !(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[assetID])) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.missingFiatRates);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.marketLoading);
            _state__WEBPACK_IMPORTED_MODULE_2__["default"].storeLocal(specLK, specs);
            const mmStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus;
            const viewOnly = isViewOnly(specs, mmStatus);
            let botCfg = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.liveBotConfig)(host, baseID, quoteID);
            if (botCfg) {
                const oldBotType = botCfg.arbMarketMakingConfig ? _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM : botCfg.basicMarketMakingConfig ? _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM : _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb;
                if (oldBotType !== botType)
                    botCfg = undefined;
            }
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(botCfg, page.deleteBttnBox);
            const oldCfg = this.originalConfig = Object.assign({}, defaultMarketMakingConfig, {
                disabled: viewOnly,
                baseOptions: this.defaultWalletOptions(baseID),
                quoteOptions: this.defaultWalletOptions(quoteID),
                buyPlacements: [],
                sellPlacements: [],
                baseConfig: Object.assign({}, defaultBotAssetConfig),
                quoteConfig: Object.assign({}, defaultBotAssetConfig)
            });
            if (botCfg) {
                const { basicMarketMakingConfig: mmCfg, arbMarketMakingConfig: arbMMCfg, simpleArbConfig: arbCfg, uiConfig: { cexRebalance } } = botCfg;
                this.creatingNewBot = false;
                // This is kinda sloppy, but we'll copy any relevant issues from the
                // old config into the originalConfig.
                const idx = oldCfg; // typescript
                for (const [k, v] of Object.entries(botCfg))
                    if (idx[k] !== undefined)
                        idx[k] = v;
                oldCfg.baseConfig = Object.assign({}, defaultBotAssetConfig, botCfg.uiConfig.baseConfig);
                oldCfg.quoteConfig = Object.assign({}, defaultBotAssetConfig, botCfg.uiConfig.quoteConfig);
                oldCfg.baseOptions = botCfg.baseWalletOptions || {};
                oldCfg.quoteOptions = botCfg.quoteWalletOptions || {};
                oldCfg.cexRebalance = cexRebalance;
                if (mmCfg) {
                    oldCfg.buyPlacements = mmCfg.buyPlacements;
                    oldCfg.sellPlacements = mmCfg.sellPlacements;
                    oldCfg.driftTolerance = mmCfg.driftTolerance;
                    oldCfg.gapStrategy = mmCfg.gapStrategy;
                }
                else if (arbMMCfg) {
                    const { buyPlacements, sellPlacements } = arbMMCfg;
                    oldCfg.buyPlacements = Array.from(buyPlacements, (p) => { return { lots: p.lots, gapFactor: p.multiplier }; });
                    oldCfg.sellPlacements = Array.from(sellPlacements, (p) => { return { lots: p.lots, gapFactor: p.multiplier }; });
                    oldCfg.profit = arbMMCfg.profit;
                    oldCfg.driftTolerance = arbMMCfg.driftTolerance;
                    oldCfg.orderPersistence = arbMMCfg.orderPersistence;
                }
                else if (arbCfg) {
                    // TODO: expose maxActiveArbs
                    oldCfg.profit = arbCfg.profitTrigger;
                    oldCfg.orderPersistence = arbCfg.numEpochsLeaveOpen;
                    oldCfg.simpleArbLots = (_c = botCfg.uiConfig.simpleArbLots) !== null && _c !== void 0 ? _c : 1;
                }
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(!viewOnly, page.updateButton, page.resetButton);
            }
            else {
                this.creatingNewBot = true;
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(!viewOnly, page.createButton);
            }
            // Now that we've updated the originalConfig, we'll copy it.
            this.updatedConfig = JSON.parse(JSON.stringify(oldCfg));
            switch (botType) {
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM:
                    page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_BOTTYPE_BASIC_MM);
                    break;
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM:
                    page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_BOTTYPE_ARB_MM);
                    break;
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb:
                    page.botTypeDisplay.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_BOTTYPE_SIMPLE_ARB);
            }
            (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.setMarketElements)(document.body, baseID, quoteID, host);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb, page.driftToleranceBox, page.switchToAdvanced);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(Boolean(cexName), ..._doc__WEBPACK_IMPORTED_MODULE_1__["default"].applySelector(document.body, '[data-cex-show]'));
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(viewOnly, page.viewOnlyRunning);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(cexName, page.cexRebalanceSettings);
            if (cexName)
                (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.setCexElements)(document.body, cexName);
            yield this.fetchMarketReport();
            const lotSizeUSD = this.lotSizeUSD();
            this.lotsPerLevelIncrement = Math.round(Math.max(1, defaultLotsPerLevel.usdIncrement / lotSizeUSD));
            this.qcLotsPerLevel.inc = this.lotsPerLevelIncrement;
            this.qcUSDPerSide.inc = this.lotsPerLevelIncrement * lotSizeUSD;
            this.qcUSDPerSide.min = lotSizeUSD;
            this.basePane.setAsset(baseID, false);
            this.quotePane.setAsset(quoteID, true);
            const { marketReport: { baseFiatRate } } = this;
            this.placementsChart.setMarket({ cexName: cexName, botType, baseFiatRate, dict: this.updatedConfig });
            // If this is a new bot, show the quick config form.
            const isQuickPlacements = !botCfg || this.isQuickPlacements(this.updatedConfig.buyPlacements, this.updatedConfig.sellPlacements);
            const gapStrategy = (_e = (_d = botCfg === null || botCfg === void 0 ? void 0 : botCfg.basicMarketMakingConfig) === null || _d === void 0 ? void 0 : _d.gapStrategy) !== null && _e !== void 0 ? _e : _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus;
            page.gapStrategySelect.value = gapStrategy;
            if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb || (isQuickPlacements && gapStrategy === _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus))
                this.showQuickConfig();
            else
                this.showAdvancedConfig();
            this.setOriginalValues();
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.marketLoading);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.botSettingsContainer, page.marketBox);
        });
    }
    initializeMarketRows() {
        this.marketRows = [];
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].empty(this.page.marketSelect);
        for (const { host, markets, assets, auth: { effectiveTier, pendingStrength } } of Object.values((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges)) {
            if (effectiveTier + pendingStrength === 0) {
                const { needRegTmpl, needRegBox } = this.page;
                const bttn = needRegTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(bttn);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(bttn, 'click', () => { (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('register', { host, backTo: 'mmsettings' }); });
                tmpl.host.textContent = host;
                needRegBox.appendChild(bttn);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(needRegBox);
                continue;
            }
            for (const { name, baseid: baseID, quoteid: quoteID, spot, basesymbol: baseSymbol, quotesymbol: quoteSymbol } of Object.values(markets)) {
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID] || !(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID])
                    continue;
                const tr = this.page.marketRowTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(tr);
                const mr = { tr, tmpl, host: host, name, baseID, quoteID, spot: spot, arbs: [] };
                this.marketRows.push(mr);
                this.page.marketSelect.appendChild(tr);
                tmpl.baseIcon.src = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].logoPath(baseSymbol);
                tmpl.quoteIcon.src = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].logoPath(quoteSymbol);
                tmpl.baseSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_1__["default"].symbolize(assets[baseID], true));
                tmpl.quoteSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_1__["default"].symbolize(assets[quoteID], true));
                tmpl.host.textContent = host;
                const cexHasMarket = this.cexMarketSupportFilter(baseID, quoteID);
                for (const [cexName, dinfo] of Object.entries(_mmutil__WEBPACK_IMPORTED_MODULE_5__.CEXDisplayInfos)) {
                    if (cexHasMarket(cexName)) {
                        const img = this.page.arbBttnTmpl.cloneNode(true);
                        img.src = dinfo.logo;
                        tmpl.arbs.appendChild(img);
                        mr.arbs.push(cexName);
                    }
                }
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(tr, 'click', () => { this.showBotTypeForm(host, baseID, quoteID); });
            }
        }
        if (this.marketRows.length === 0) {
            const { marketSelectionTable, marketFilterBox, noMarkets } = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(marketSelectionTable, marketFilterBox);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(noMarkets);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(this.page.noMarkets);
        const fiatRates = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap;
        this.marketRows.sort((a, b) => {
            var _a, _b, _c, _d;
            let [volA, volB] = [(_b = (_a = a.spot) === null || _a === void 0 ? void 0 : _a.vol24) !== null && _b !== void 0 ? _b : 0, (_d = (_c = b.spot) === null || _c === void 0 ? void 0 : _c.vol24) !== null && _d !== void 0 ? _d : 0];
            if (fiatRates[a.baseID] && fiatRates[b.baseID]) {
                volA *= fiatRates[a.baseID];
                volB *= fiatRates[b.baseID];
            }
            return volB - volA;
        });
    }
    runningBotInventory(assetID) {
        return (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.runningBotInventory)(assetID);
    }
    adjustedBalances(baseWallet, quoteWallet) {
        const { cexBaseBalance, cexQuoteBalance } = this;
        const [bInv, qInv] = [this.runningBotInventory(baseWallet.assetID), this.runningBotInventory(quoteWallet.assetID)];
        const [cexBaseAvail, cexQuoteAvail] = [((cexBaseBalance === null || cexBaseBalance === void 0 ? void 0 : cexBaseBalance.available) || 0) - bInv.cex.total, ((cexQuoteBalance === null || cexQuoteBalance === void 0 ? void 0 : cexQuoteBalance.available) || 0) - qInv.cex.total];
        const [dexBaseAvail, dexQuoteAvail] = [baseWallet.balance.available - bInv.dex.total, quoteWallet.balance.available - qInv.dex.total];
        const baseAvail = dexBaseAvail + cexBaseAvail;
        const quoteAvail = dexQuoteAvail + cexQuoteAvail;
        return { baseAvail, quoteAvail, dexBaseAvail, dexQuoteAvail, cexBaseAvail, cexQuoteAvail };
    }
    lotSizeUSD() {
        const { specs: { host, baseID }, mktID, marketReport: { baseFiatRate } } = this;
        const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host];
        const market = xc.markets[mktID];
        const { lotsize: lotSize } = market;
        const { unitInfo: ui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
        return lotSize / ui.conventional.conversionFactor * baseFiatRate;
    }
    /*
      * marketStuff is just a bunch of useful properties for the current specs
      * gathered in one place and with preferable names.
      */
    marketStuff() {
        const { page, specs: { host, baseID, quoteID, cexName, botType }, basePane, quotePane, marketReport: { baseFiatRate, quoteFiatRate, baseFees, quoteFees }, lotsPerLevelIncrement, updatedConfig: cfg, originalConfig: oldCfg, mktID } = this;
        const { symbol: baseSymbol, unitInfo: bui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
        const { symbol: quoteSymbol, unitInfo: qui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
        const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host];
        const market = xc.markets[mktID];
        const { lotsize: lotSize, spot } = market;
        const lotSizeUSD = lotSize / bui.conventional.conversionFactor * baseFiatRate;
        const atomicRate = 1 / bui.conventional.conversionFactor * baseFiatRate / quoteFiatRate * qui.conventional.conversionFactor;
        const xcRate = {
            conv: quoteFiatRate / baseFiatRate,
            atomic: atomicRate,
            msg: Math.round(atomicRate * _orderutil__WEBPACK_IMPORTED_MODULE_8__.RateEncodingFactor),
            spot
        };
        let [dexBaseLots, dexQuoteLots] = [cfg.simpleArbLots, cfg.simpleArbLots];
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb) {
            dexBaseLots = this.updatedConfig.sellPlacements.reduce((lots, p) => lots + p.lots, 0);
            dexQuoteLots = this.updatedConfig.buyPlacements.reduce((lots, p) => lots + p.lots, 0);
        }
        const quoteLot = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.calculateQuoteLot)(lotSize, baseID, quoteID, spot);
        const walletStuff = this.walletStuff();
        const { baseFeeAssetID, quoteFeeAssetID, baseIsAccountLocker, quoteIsAccountLocker } = walletStuff;
        const { commit, fees } = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.feesAndCommit)(baseID, quoteID, baseFees, quoteFees, lotSize, dexBaseLots, dexQuoteLots, baseFeeAssetID, quoteFeeAssetID, baseIsAccountLocker, quoteIsAccountLocker, cfg.baseConfig.orderReservesFactor, cfg.quoteConfig.orderReservesFactor);
        return Object.assign({ page, cfg, oldCfg, host, xc, baseID, quoteID, botType, cexName, baseFiatRate, quoteFiatRate,
            xcRate, baseSymbol, quoteSymbol, mktID, lotSize, lotSizeUSD, lotsPerLevelIncrement,
            quoteLot, commit, basePane, quotePane, fees }, walletStuff);
    }
    walletStuff() {
        const { specs: { baseID, quoteID } } = this;
        const [baseWallet, quoteWallet] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[quoteID]];
        const [{ token: baseToken, unitInfo: bui }, { token: quoteToken, unitInfo: qui }] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID]];
        const baseFeeAssetID = baseToken ? baseToken.parentID : baseID;
        const quoteFeeAssetID = quoteToken ? quoteToken.parentID : quoteID;
        const [baseFeeUI, quoteFeeUI] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseFeeAssetID].unitInfo, (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteFeeAssetID].unitInfo];
        const traitAccountLocker = 1 << 14;
        const baseIsAccountLocker = (baseWallet.traits & traitAccountLocker) > 0;
        const quoteIsAccountLocker = (quoteWallet.traits & traitAccountLocker) > 0;
        return Object.assign({ baseWallet, quoteWallet, baseFeeUI, quoteFeeUI, baseToken, quoteToken,
            bui, qui, baseFeeAssetID, quoteFeeAssetID, baseIsAccountLocker, quoteIsAccountLocker }, this.adjustedBalances(baseWallet, quoteWallet));
    }
    showAdvancedConfig() {
        const { page } = this;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.advancedConfig);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.quickConfig);
        this.placementsChart.render();
    }
    isQuickPlacements(buyPlacements, sellPlacements) {
        if (buyPlacements.length === 0 || buyPlacements.length !== sellPlacements.length)
            return false;
        for (let i = 0; i < buyPlacements.length; i++) {
            if (buyPlacements[i].gapFactor !== sellPlacements[i].gapFactor)
                return false;
            if (buyPlacements[i].lots !== sellPlacements[i].lots)
                return false;
        }
        return true;
    }
    switchToQuickConfig() {
        const { cfg, botType, lotSizeUSD } = this.marketStuff();
        const { buyPlacements: buys, sellPlacements: sells } = cfg;
        // If we have both buys and sells, get the best approximation quick config
        // approximation.
        if (buys.length > 0 && sells.length > 0) {
            const bestBuy = buys.reduce((prev, curr) => curr.gapFactor < prev.gapFactor ? curr : prev);
            const bestSell = sells.reduce((prev, curr) => curr.gapFactor < prev.gapFactor ? curr : prev);
            const placementCount = buys.length + sells.length;
            const levelsPerSide = Math.max(1, Math.floor((placementCount) / 2));
            if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
                cfg.profit = (bestBuy.gapFactor + bestSell.gapFactor) / 2;
                const worstBuy = buys.reduce((prev, curr) => curr.gapFactor > prev.gapFactor ? curr : prev);
                const worstSell = sells.reduce((prev, curr) => curr.gapFactor > prev.gapFactor ? curr : prev);
                const range = ((worstBuy.gapFactor - bestBuy.gapFactor) + (worstSell.gapFactor - bestSell.gapFactor)) / 2;
                const inc = range / (levelsPerSide - 1);
                this.qcProfit.setValue(cfg.profit * 100);
                this.qcProfitSlider.setValue((cfg.profit - defaultProfit.minV) / defaultProfit.range);
                this.qcLevelSpacing.setValue(inc * 100);
                this.qcLevelSpacingSlider.setValue((inc - defaultLevelSpacing.minV) / defaultLevelSpacing.range);
            }
            else if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM) {
                const multSum = buys.reduce((v, p) => v + p.gapFactor, 0) + sells.reduce((v, p) => v + p.gapFactor, 0);
                const buffer = ((multSum / placementCount) - 1) || defaultMatchBuffer.value;
                this.qcMatchBuffer.setValue(buffer * 100);
                this.qcMatchBufferSlider.setValue((buffer - defaultMatchBuffer.minV) / defaultMatchBuffer.range);
            }
            const lots = buys.reduce((v, p) => v + p.lots, 0) + sells.reduce((v, p) => v + p.lots, 0);
            const lotsPerLevel = Math.max(1, Math.round(lots / 2 / levelsPerSide));
            this.qcLotsPerLevel.setValue(lotsPerLevel);
            this.qcUSDPerSide.setValue(lotsPerLevel * levelsPerSide * lotSizeUSD);
            this.qcLevelsPerSide.setValue(levelsPerSide);
        }
        else if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb) {
            this.qcLotsPerLevel.setValue(cfg.simpleArbLots);
        }
        this.showQuickConfig();
        this.quickConfigUpdated();
    }
    showQuickConfig() {
        const { page, lotSizeUSD, botType, lotsPerLevelIncrement } = this.marketStuff();
        if (!this.qcLevelsPerSide.input.value) {
            this.qcLevelsPerSide.setValue(defaultLevelsPerSide.value);
            this.qcUSDPerSide.setValue(defaultLevelsPerSide.value * (this.qcLotsPerLevel.value() || lotsPerLevelIncrement) * lotSizeUSD);
        }
        if (!this.qcLotsPerLevel.input.value) {
            this.qcLotsPerLevel.setValue(lotsPerLevelIncrement);
            this.qcUSDPerSide.setValue(lotSizeUSD * lotsPerLevelIncrement * this.qcLevelsPerSide.value());
        }
        if (!page.qcLevelSpacing.value) {
            this.qcLevelSpacing.setValue(defaultLevelSpacing.value * 100);
            this.qcLevelSpacingSlider.setValue((defaultLevelSpacing.value - defaultLevelSpacing.minV) / defaultLevelSpacing.range);
        }
        if (!page.qcMatchBuffer.value)
            page.qcMatchBuffer.value = String(defaultMatchBuffer.value * 100);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.advancedConfig);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.quickConfig);
        this.showInputsForBot(botType);
    }
    showInputsForBot(botType) {
        const { page, opts: { usingUSDPerSide } } = this;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.matchMultiplierBox, page.placementsChartBox, page.placementChartLegend, page.lotsPerLevelLabel, page.levelSpacingBox, page.arbLotsLabel, page.qcLevelPerSideBox);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(usingUSDPerSide, page.qcUSDPerSideBox);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(!usingUSDPerSide, page.qcLotsBox);
        switch (botType) {
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM:
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.qcLevelPerSideBox, page.matchMultiplierBox, page.placementsChartBox, page.placementChartLegend, page.lotsPerLevelLabel);
                break;
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM:
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.qcLevelPerSideBox, page.levelSpacingBox, page.placementsChartBox, page.lotsPerLevelLabel);
                break;
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb:
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.arbLotsLabel);
        }
    }
    quickConfigUpdated() {
        var _a, _b, _c;
        const { page, cfg, botType, cexName } = this.marketStuff();
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.qcError);
        const setError = (msg) => {
            page.qcError.textContent = msg;
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.qcError);
        };
        const levelsPerSide = botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb ? 1 : this.qcLevelsPerSide.value();
        if (isNaN(levelsPerSide)) {
            setError('invalid value for levels per side');
        }
        const lotsPerLevel = this.qcLotsPerLevel.value();
        if (isNaN(lotsPerLevel)) {
            setError('invalid value for lots per level');
        }
        const profit = parseFloat((_a = page.qcProfit.value) !== null && _a !== void 0 ? _a : '') / 100;
        if (isNaN(profit)) {
            setError('invalid value for profit');
        }
        const levelSpacing = botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM ? parseFloat((_b = page.qcLevelSpacing.value) !== null && _b !== void 0 ? _b : '') / 100 : 0;
        if (isNaN(levelSpacing)) {
            setError('invalid value for level spacing');
        }
        const matchBuffer = botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM ? parseFloat((_c = page.qcMatchBuffer.value) !== null && _c !== void 0 ? _c : '') / 100 : 0;
        if (isNaN(matchBuffer)) {
            setError('invalid value for match buffer');
        }
        const multiplier = matchBuffer + 1;
        const levelSpacingDisabled = levelsPerSide === 1;
        page.levelSpacingBox.classList.toggle('disabled', levelSpacingDisabled);
        page.qcLevelSpacing.disabled = levelSpacingDisabled;
        cfg.simpleArbLots = lotsPerLevel;
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb) {
            this.clearPlacements(cexName ? arbMMRowCacheKey : cfg.gapStrategy);
            for (let levelN = 0; levelN < levelsPerSide; levelN++) {
                const placement = { lots: lotsPerLevel };
                placement.gapFactor = botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM ? profit + levelSpacing * levelN : multiplier;
                cfg.buyPlacements.push(placement);
                cfg.sellPlacements.push(placement);
                // Add rows in the advanced config table.
                this.addPlacement(true, placement);
                this.addPlacement(false, placement);
            }
            this.placementsChart.render();
        }
        this.updateAllocations();
    }
    updateAllocations() {
        this.updateBaseAllocations();
        this.updateQuoteAllocations();
    }
    updateBaseAllocations() {
        const { commit, lotSize, basePane, fees } = this.marketStuff();
        basePane.updateInventory(commit.dex.base.lots, commit.dex.quote.lots, lotSize, commit.dex.base.val, commit.cex.base.val, fees.base);
        basePane.updateCommitTotal();
    }
    updateQuoteAllocations() {
        const { commit, quoteLot: lotSize, quotePane, fees } = this.marketStuff();
        quotePane.updateInventory(commit.dex.quote.lots, commit.dex.base.lots, lotSize, commit.dex.quote.val, commit.cex.quote.val, fees.quote);
        quotePane.updateCommitTotal();
    }
    matchBufferChanged() {
        var _a;
        const { page } = this;
        page.qcMatchBuffer.value = Math.max(0, parseFloat((_a = page.qcMatchBuffer.value) !== null && _a !== void 0 ? _a : '') || defaultMatchBuffer.value * 100).toFixed(2);
        this.quickConfigUpdated();
    }
    showAddress(assetID) {
        this.walletAddrForm.setAsset(assetID);
        this.forms.show(this.page.walletAddrForm);
    }
    changeSideCommitmentDialog() {
        const { page, opts } = this;
        opts.usingUSDPerSide = !opts.usingUSDPerSide;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(opts.usingUSDPerSide, page.qcUSDPerSideBox);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(!opts.usingUSDPerSide, page.qcLotsBox);
    }
    showBotTypeForm(host, baseID, quoteID, botType, configuredCEX) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { page } = this;
            this.formSpecs = { host, baseID, quoteID, botType: '' };
            const viewOnly = isViewOnly(this.formSpecs, (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus);
            if (viewOnly) {
                const botCfg = (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.liveBotConfig)(host, baseID, quoteID);
                const specs = this.specs = this.formSpecs;
                switch (true) {
                    case Boolean(botCfg === null || botCfg === void 0 ? void 0 : botCfg.simpleArbConfig):
                        specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb;
                        break;
                    case Boolean(botCfg === null || botCfg === void 0 ? void 0 : botCfg.arbMarketMakingConfig):
                        specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM;
                        break;
                    default:
                        specs.botType = _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM;
                }
                specs.cexName = botCfg === null || botCfg === void 0 ? void 0 : botCfg.cexName;
                yield this.fetchCEXBalances(this.formSpecs);
                yield this.configureUI();
                this.forms.close();
                return;
            }
            (0,_mmutil__WEBPACK_IMPORTED_MODULE_5__.setMarketElements)(page.botTypeForm, baseID, quoteID, host);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].empty(page.botTypeBaseSymbol, page.botTypeQuoteSymbol);
            const [b, q] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID]];
            page.botTypeBaseSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_1__["default"].symbolize(b, true));
            page.botTypeQuoteSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_1__["default"].symbolize(q, true));
            for (const div of this.botTypeSelectors)
                div.classList.remove('selected');
            for (const { div } of Object.values(this.formCexes))
                div.classList.remove('selected');
            this.setCEXAvailability(baseID, quoteID);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.noCexesConfigured, page.noCexMarket, page.noCexMarketConfigureMore, page.botTypeErr);
            const cexHasMarket = this.cexMarketSupportFilter(baseID, quoteID);
            const supportingCexes = {};
            for (const cex of Object.values((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes)) {
                if (cexHasMarket(cex.config.name))
                    supportingCexes[cex.config.name] = cex.config;
            }
            const nCexes = Object.keys(supportingCexes).length;
            const arbEnabled = nCexes > 0;
            for (const div of this.botTypeSelectors)
                div.classList.toggle('disabled', div.dataset.botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM && !arbEnabled);
            if (Object.keys((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes).length === 0) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.noCexesConfigured);
                this.setBotTypeSelected(_mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM);
            }
            else {
                const lastBots = (_state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(lastBotsLK) || {});
                const lastBot = lastBots[`${baseID}_${quoteID}_${host}`];
                let cex;
                botType = botType !== null && botType !== void 0 ? botType : (lastBot ? lastBot.botType : _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM);
                if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
                    // Four ways to auto-select a cex.
                    // 1. Coming back from the cex configuration form.
                    if (configuredCEX)
                        cex = supportingCexes[configuredCEX];
                    // 2. We have a saved configuration.
                    if (!cex && lastBot)
                        cex = supportingCexes[(_a = lastBot.cexName) !== null && _a !== void 0 ? _a : ''];
                    // 3. The last exchange that the user selected.
                    if (!cex) {
                        const lastCEX = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(lastArbExchangeLK);
                        if (lastCEX)
                            cex = supportingCexes[lastCEX];
                    }
                    // 4. Any supporting cex.
                    if (!cex && nCexes > 0)
                        cex = Object.values(supportingCexes)[0];
                }
                if (cex) {
                    page.cexSelection.classList.remove('disabled');
                    this.setBotTypeSelected(botType !== null && botType !== void 0 ? botType : (lastBot ? lastBot.botType : _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM));
                    this.selectFormCEX(cex.name);
                }
                else {
                    page.cexSelection.classList.add('disabled');
                    _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.noCexMarket);
                    this.setBotTypeSelected(_mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM);
                    // If there are unconfigured cexes, show configureMore message.
                    const unconfigured = Object.keys(_mmutil__WEBPACK_IMPORTED_MODULE_5__.CEXDisplayInfos).filter((cexName) => !(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName]);
                    const allConfigured = unconfigured.length === 0 || (unconfigured.length === 1 && (unconfigured[0] === 'Binance' || unconfigured[0] === 'BinanceUS'));
                    if (!allConfigured)
                        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.noCexMarketConfigureMore);
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.cexSelection);
            // Check if we have any cexes configured.
            this.forms.show(page.botTypeForm);
        });
    }
    reshowBotTypeForm() {
        if (isViewOnly(this.specs, (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus))
            this.showMarketSelectForm();
        const { baseID, quoteID, host, cexName, botType } = this.specs;
        this.showBotTypeForm(host, baseID, quoteID, botType, cexName);
    }
    setBotTypeSelected(selectedType) {
        var _a;
        const { formSpecs: { baseID, quoteID, host }, botTypeSelectors, formCexes } = this;
        for (const { classList, dataset: { botType } } of botTypeSelectors)
            classList.toggle('selected', botType === selectedType);
        // If we don't have a cex selected, attempt to select one
        if (selectedType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM)
            return;
        const mmStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus;
        if (Object.keys(mmStatus.cexes).length === 0)
            return;
        const cexHasMarket = this.cexMarketSupportFilter(baseID, quoteID);
        // If there is one currently selected and it supports this market, leave it.
        const selecteds = Object.values(formCexes).filter((cex) => cex.div.classList.contains('selected'));
        if (selecteds.length && cexHasMarket(selecteds[0].name))
            return;
        // See if we have a saved configuration.
        const lastBots = (_state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(lastBotsLK) || {});
        const lastBot = lastBots[`${baseID}_${quoteID}_${host}`];
        if (lastBot) {
            const cex = mmStatus.cexes[(_a = lastBot.cexName) !== null && _a !== void 0 ? _a : ''];
            if (cex && cexHasMarket(cex.config.name)) {
                this.selectFormCEX(cex.config.name);
                return;
            }
        }
        // 2. The last exchange that the user selected.
        const lastCEX = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(lastArbExchangeLK);
        if (lastCEX) {
            const cex = mmStatus.cexes[lastCEX];
            if (cex && cexHasMarket(cex.config.name)) {
                this.selectFormCEX(cex.config.name);
                return;
            }
        }
        // 3. Any supporting cex.
        const cexes = Object.values(mmStatus.cexes).filter((cex) => cexHasMarket(cex.config.name));
        if (cexes.length)
            this.selectFormCEX(cexes[0].config.name);
    }
    showMarketSelectForm() {
        this.page.marketFilterInput.value = '';
        this.sortMarketRows();
        this.forms.show(this.page.marketSelectForm);
    }
    sortMarketRows() {
        var _a;
        const page = this.page;
        const filter = (_a = page.marketFilterInput.value) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].empty(page.marketSelect);
        for (const mr of this.marketRows) {
            mr.tr.classList.remove('selected');
            if (filter && !mr.name.includes(filter))
                continue;
            page.marketSelect.appendChild(mr.tr);
        }
    }
    handleBalanceNote(n) {
        this.approveTokenForm.handleBalanceNote(n);
        if (!this.marketReport)
            return;
        const { baseID, quoteID, quoteToken, baseToken } = this.marketStuff();
        if (n.assetID === baseID || n.assetID === (baseToken === null || baseToken === void 0 ? void 0 : baseToken.parentID)) {
            this.basePane.updateBalances();
        }
        else if (n.assetID === quoteID || n.assetID === (quoteToken === null || quoteToken === void 0 ? void 0 : quoteToken.parentID)) {
            this.quotePane.updateBalances();
        }
    }
    autoRebalanceChanged() {
        var _a, _b;
        const { page, updatedConfig: cfg } = this;
        cfg.cexRebalance = (_b = (_a = page.cexRebalanceCheckbox) === null || _a === void 0 ? void 0 : _a.checked) !== null && _b !== void 0 ? _b : false;
        this.updateAllocations();
    }
    submitBotType() {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loading(this.page.botTypeForm);
            try {
                yield this.submitBotWithValidation();
            }
            finally {
                loaded();
            }
        });
    }
    submitBotWithValidation() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // check for wallets
            const { page, forms, formSpecs: { baseID, quoteID, host } } = this;
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[baseID]) {
                this.newWalletForm.setAsset(baseID);
                forms.show(this.page.newWalletForm);
                return;
            }
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[quoteID]) {
                this.newWalletForm.setAsset(quoteID);
                forms.show(this.page.newWalletForm);
                return;
            }
            // Are tokens approved?
            const [bApproval, qApproval] = tokenAssetApprovalStatuses(host, (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID]);
            if (bApproval === _registry__WEBPACK_IMPORTED_MODULE_0__.ApprovalStatus.NotApproved) {
                this.approveTokenForm.setAsset(baseID, host);
                forms.show(page.approveTokenForm);
                return;
            }
            if (qApproval === _registry__WEBPACK_IMPORTED_MODULE_0__.ApprovalStatus.NotApproved) {
                this.approveTokenForm.setAsset(quoteID, host);
                forms.show(page.approveTokenForm);
                return;
            }
            const { botTypeSelectors } = this;
            const selecteds = botTypeSelectors.filter((div) => div.classList.contains('selected'));
            if (selecteds.length < 1) {
                page.botTypeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_BOTTYPE);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.botTypeErr);
                return;
            }
            const botType = this.formSpecs.botType = (_a = selecteds[0].dataset.botType) !== null && _a !== void 0 ? _a : '';
            if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
                const selecteds = Object.values(this.formCexes).filter((cex) => cex.div.classList.contains('selected'));
                if (selecteds.length < 1) {
                    page.botTypeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_CEX);
                    _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.botTypeErr);
                    return;
                }
                const cexName = selecteds[0].name;
                this.formSpecs.cexName = cexName;
                yield this.fetchCEXBalances(this.formSpecs);
            }
            this.specs = this.formSpecs;
            this.configureUI();
            this.forms.close();
        });
    }
    fetchCEXBalances(specs) {
        return __awaiter(this, void 0, void 0, function* () {
            const { page } = this;
            const { baseID, quoteID, cexName, botType } = specs;
            if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM || !cexName)
                return;
            try {
                // This won't work if we implement live reconfiguration, because locked
                // funds would need to be considered.
                this.cexBaseBalance = yield _mmutil__WEBPACK_IMPORTED_MODULE_5__.MM.cexBalance(cexName, baseID);
            }
            catch (e) {
                page.botTypeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_CEXBALANCE_ERR, { cexName, assetID: String(baseID), err: String(e) });
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.botTypeErr);
                throw e;
            }
            try {
                this.cexQuoteBalance = yield _mmutil__WEBPACK_IMPORTED_MODULE_5__.MM.cexBalance(cexName, quoteID);
            }
            catch (e) {
                page.botTypeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_CEXBALANCE_ERR, { cexName, assetID: String(quoteID), err: String(e) });
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.botTypeErr);
                throw e;
            }
        });
    }
    defaultWalletOptions(assetID) {
        const walletDef = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().currentWalletDefinition(assetID);
        if (!walletDef.multifundingopts) {
            return {};
        }
        const options = {};
        for (const opt of walletDef.multifundingopts) {
            if (opt.quoteAssetOnly && assetID !== this.specs.quoteID) {
                continue;
            }
            options[opt.key] = `${opt.default}`;
        }
        return options;
    }
    /*
     * updateModifiedMarkers checks each of the input elements on the page and
     * if the current value does not match the original value (since the last
     * save), then the input will have a colored border.
     */
    updateModifiedMarkers() {
        if (this.creatingNewBot)
            return;
        const { page, originalConfig: oldCfg, updatedConfig: newCfg } = this;
        // Gap strategy input
        const gapStrategyModified = oldCfg.gapStrategy !== newCfg.gapStrategy;
        page.gapStrategySelect.classList.toggle('modified', gapStrategyModified);
        const profitModified = oldCfg.profit !== newCfg.profit;
        page.profitInput.classList.toggle('modified', profitModified);
        // Buy placements Input
        let buyPlacementsModified = false;
        if (oldCfg.buyPlacements.length !== newCfg.buyPlacements.length) {
            buyPlacementsModified = true;
        }
        else {
            for (let i = 0; i < oldCfg.buyPlacements.length; i++) {
                if (oldCfg.buyPlacements[i].lots !== newCfg.buyPlacements[i].lots ||
                    oldCfg.buyPlacements[i].gapFactor !== newCfg.buyPlacements[i].gapFactor) {
                    buyPlacementsModified = true;
                    break;
                }
            }
        }
        page.buyPlacementsTableWrapper.classList.toggle('modified', buyPlacementsModified);
        // Sell placements input
        let sellPlacementsModified = false;
        if (oldCfg.sellPlacements.length !== newCfg.sellPlacements.length) {
            sellPlacementsModified = true;
        }
        else {
            for (let i = 0; i < oldCfg.sellPlacements.length; i++) {
                if (oldCfg.sellPlacements[i].lots !== newCfg.sellPlacements[i].lots ||
                    oldCfg.sellPlacements[i].gapFactor !== newCfg.sellPlacements[i].gapFactor) {
                    sellPlacementsModified = true;
                    break;
                }
            }
        }
        page.sellPlacementsTableWrapper.classList.toggle('modified', sellPlacementsModified);
    }
    /*
     * gapFactorHeaderUnit returns the header on the placements table and the
     * units in the gap factor rows needed for each gap strategy.
     */
    gapFactorHeaderUnit(gapStrategy) {
        switch (gapStrategy) {
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyMultiplier:
                return ['Multiplier', 'x'];
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolute:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolutePlus: {
                const rateUnit = `${(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.specs.quoteID].symbol}/${(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.specs.baseID].symbol}`;
                return ['Rate', rateUnit];
            }
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercent:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus:
                return ['Percent', '%'];
            default:
                throw new Error(`Unknown gap strategy ${gapStrategy}`);
        }
    }
    /*
     * checkGapFactorRange returns an error string if the value input for a
     * gap factor is valid for the currently selected gap strategy.
     */
    checkGapFactorRange(gapFactor, value) {
        switch (gapFactor) {
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyMultiplier:
                if (value < 1 || value > 100) {
                    return 'Multiplier must be between 1 and 100';
                }
                return null;
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolute:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolutePlus:
                if (value <= 0) {
                    return 'Rate must be greater than 0';
                }
                return null;
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercent:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus:
                if (value <= 0 || value > 10) {
                    return 'Percent must be between 0 and 10';
                }
                return null;
            default: {
                throw new Error(`Unknown gap factor ${gapFactor}`);
            }
        }
    }
    /*
     * convertGapFactor converts between the displayed gap factor in the
     * placement tables and the number that is passed to the market maker.
     * For gap strategies that involve a percentage it converts between the
     * decimal value required by the backend and a percentage displayed to
     * the user.
     */
    convertGapFactor(gapFactor, gapStrategy, toDisplay) {
        switch (gapStrategy) {
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyMultiplier:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolute:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyAbsolutePlus:
                return gapFactor;
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercent:
            case _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyPercentPlus:
                if (toDisplay) {
                    return gapFactor * 100;
                }
                return gapFactor / 100;
            default:
                throw new Error(`Unknown gap factor ${gapStrategy}`);
        }
    }
    /*
     * addPlacement adds a row to a placement table. This is called both when
     * the page is initially loaded, and when the "add" button is pressed on
     * the placement table. initialLoadPlacement is non-nil if this is being
     * called on the initial load.
     */
    addPlacement(isBuy, initialLoadPlacement, gapStrategy) {
        const { page, updatedConfig: cfg } = this;
        let tableBody = page.sellPlacementsTableBody;
        let addPlacementRow = page.addSellPlacementRow;
        let lotsElement = page.addSellPlacementLots;
        let gapFactorElement = page.addSellPlacementGapFactor;
        let errElement = page.sellPlacementsErr;
        if (isBuy) {
            tableBody = page.buyPlacementsTableBody;
            addPlacementRow = page.addBuyPlacementRow;
            lotsElement = page.addBuyPlacementLots;
            gapFactorElement = page.addBuyPlacementGapFactor;
            errElement = page.buyPlacementsErr;
        }
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(errElement);
        // updateArrowVis updates the visibility of the move up/down arrows in
        // each row of the placement table. The up arrow is not shown on the
        // top row, and the down arrow is not shown on the bottom row. They
        // are all hidden if market making is running.
        const updateArrowVis = () => {
            for (let i = 0; i < tableBody.children.length - 1; i++) {
                const row = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(tableBody.children[i]);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(i !== 0, row.upBtn);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(i !== tableBody.children.length - 2, row.downBtn);
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(errElement);
        const setErr = (err) => {
            errElement.textContent = err;
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(errElement);
        };
        let lots;
        let actualGapFactor;
        let displayedGapFactor;
        if (!gapStrategy)
            gapStrategy = this.specs.cexName ? _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyMultiplier : cfg.gapStrategy;
        const placements = isBuy ? cfg.buyPlacements : cfg.sellPlacements;
        const unit = this.gapFactorHeaderUnit(gapStrategy)[1];
        if (initialLoadPlacement) {
            lots = initialLoadPlacement.lots;
            actualGapFactor = initialLoadPlacement.gapFactor;
            displayedGapFactor = this.convertGapFactor(actualGapFactor, gapStrategy, true);
        }
        else {
            lots = parseInt(lotsElement.value || '0');
            displayedGapFactor = parseFloat(gapFactorElement.value || '0');
            actualGapFactor = this.convertGapFactor(displayedGapFactor, gapStrategy, false);
            if (lots === 0) {
                setErr('Lots must be greater than 0');
                return;
            }
            const gapFactorErr = this.checkGapFactorRange(gapStrategy, displayedGapFactor);
            if (gapFactorErr) {
                setErr(gapFactorErr);
                return;
            }
            if (placements.find((placement) => placement.gapFactor === actualGapFactor)) {
                setErr('Duplicate placement');
                return;
            }
            placements.push({ lots, gapFactor: actualGapFactor });
        }
        const newRow = page.placementRowTmpl.cloneNode(true);
        const newRowTmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(newRow);
        newRowTmpl.priority.textContent = `${tableBody.children.length}`;
        newRowTmpl.lots.textContent = `${lots}`;
        newRowTmpl.gapFactor.textContent = `${displayedGapFactor} ${unit}`;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(newRowTmpl.removeBtn, 'click', () => {
            const index = placements.findIndex((placement) => {
                return placement.lots === lots && placement.gapFactor === actualGapFactor;
            });
            if (index === -1)
                return;
            placements.splice(index, 1);
            newRow.remove();
            updateArrowVis();
            this.updateModifiedMarkers();
            this.placementsChart.render();
            this.updateAllocations();
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(newRowTmpl.upBtn, 'click', () => {
            const index = placements.findIndex((p) => p.lots === lots && p.gapFactor === actualGapFactor);
            if (index === 0)
                return;
            const prevPlacement = placements[index - 1];
            placements[index - 1] = placements[index];
            placements[index] = prevPlacement;
            newRowTmpl.priority.textContent = `${index}`;
            newRow.remove();
            tableBody.insertBefore(newRow, tableBody.children[index - 1]);
            const movedDownTmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(tableBody.children[index]);
            movedDownTmpl.priority.textContent = `${index + 1}`;
            updateArrowVis();
            this.updateModifiedMarkers();
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(newRowTmpl.downBtn, 'click', () => {
            const index = placements.findIndex((p) => p.lots === lots && p.gapFactor === actualGapFactor);
            if (index === placements.length - 1)
                return;
            const nextPlacement = placements[index + 1];
            placements[index + 1] = placements[index];
            placements[index] = nextPlacement;
            newRowTmpl.priority.textContent = `${index + 2}`;
            newRow.remove();
            tableBody.insertBefore(newRow, tableBody.children[index + 1]);
            const movedUpTmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(tableBody.children[index]);
            movedUpTmpl.priority.textContent = `${index + 1}`;
            updateArrowVis();
            this.updateModifiedMarkers();
        });
        tableBody.insertBefore(newRow, addPlacementRow);
        updateArrowVis();
    }
    setArbMMLabels() {
        this.page.buyGapFactorHdr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_MATCH_BUFFER);
        this.page.sellGapFactorHdr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_MATCH_BUFFER);
    }
    /*
     * setGapFactorLabels sets the headers on the gap factor column of each
     * placement table.
     */
    setGapFactorLabels(gapStrategy) {
        const page = this.page;
        const header = this.gapFactorHeaderUnit(gapStrategy)[0];
        page.buyGapFactorHdr.textContent = header;
        page.sellGapFactorHdr.textContent = header;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.percentPlusInfo, page.percentInfo, page.absolutePlusInfo, page.absoluteInfo, page.multiplierInfo);
        switch (gapStrategy) {
            case 'percent-plus':
                return _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.percentPlusInfo);
            case 'percent':
                return _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.percentInfo);
            case 'absolute-plus':
                return _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.absolutePlusInfo);
            case 'absolute':
                return _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.absoluteInfo);
            case 'multiplier':
                return _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.multiplierInfo);
        }
    }
    clearPlacements(cacheKey) {
        const { page, updatedConfig: cfg } = this;
        while (page.buyPlacementsTableBody.children.length > 1) {
            page.buyPlacementsTableBody.children[0].remove();
        }
        while (page.sellPlacementsTableBody.children.length > 1) {
            page.sellPlacementsTableBody.children[0].remove();
        }
        this.placementsCache[cacheKey] = [cfg.buyPlacements, cfg.sellPlacements];
        cfg.buyPlacements.splice(0, cfg.buyPlacements.length);
        cfg.sellPlacements.splice(0, cfg.sellPlacements.length);
    }
    loadCachedPlacements(cacheKey) {
        const c = this.placementsCache[cacheKey];
        if (!c)
            return;
        const { updatedConfig: cfg } = this;
        cfg.buyPlacements.splice(0, cfg.buyPlacements.length);
        cfg.sellPlacements.splice(0, cfg.sellPlacements.length);
        cfg.buyPlacements.push(...c[0]);
        cfg.sellPlacements.push(...c[1]);
        const gapStrategy = cacheKey === arbMMRowCacheKey ? _mmutil__WEBPACK_IMPORTED_MODULE_5__.GapStrategyMultiplier : cacheKey;
        for (const p of cfg.buyPlacements)
            this.addPlacement(true, p, gapStrategy);
        for (const p of cfg.sellPlacements)
            this.addPlacement(false, p, gapStrategy);
    }
    /*
     * setOriginalValues sets the updatedConfig field to be equal to the
     * and sets the values displayed buy each field input to be equal
     * to the values since the last save.
     */
    setOriginalValues() {
        var _a, _b, _c;
        const { page, originalConfig: oldCfg, updatedConfig: cfg, specs: { cexName, botType } } = this;
        this.clearPlacements(cexName ? arbMMRowCacheKey : cfg.gapStrategy);
        const assign = (to, from) => {
            for (const [k, v] of Object.entries(from)) {
                if (Array.isArray(v)) {
                    to[k].splice(0, to[k].length);
                    for (const i of v)
                        to[k].push(i);
                }
                else if (typeof v === 'object')
                    Object.assign(to[k], v);
                else
                    to[k] = from[k];
            }
        };
        assign(cfg, JSON.parse(JSON.stringify(oldCfg)));
        const tol = (_a = cfg.driftTolerance) !== null && _a !== void 0 ? _a : defaultDriftTolerance.value;
        this.driftTolerance.setValue(tol * 100);
        this.driftToleranceSlider.setValue(tol / defaultDriftTolerance.maxV);
        const persist = (_b = cfg.orderPersistence) !== null && _b !== void 0 ? _b : defaultOrderPersistence.value;
        this.orderPersistence.setValue(persist);
        this.orderPersistenceSlider.setValue(persist / defaultOrderPersistence.maxV);
        const profit = (_c = cfg.profit) !== null && _c !== void 0 ? _c : defaultProfit.value;
        page.profitInput.value = String(profit * 100);
        this.qcProfit.setValue(profit * 100);
        this.qcProfitSlider.setValue((profit - defaultProfit.minV) / defaultProfit.range);
        if (cexName) {
            page.cexRebalanceCheckbox.checked = cfg.cexRebalance;
            this.autoRebalanceChanged();
        }
        // Gap strategy
        if (!page.gapStrategySelect.options)
            return;
        Array.from(page.gapStrategySelect.options).forEach((opt) => { opt.selected = opt.value === cfg.gapStrategy; });
        this.setGapFactorLabels(cfg.gapStrategy);
        if (botType === _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.gapStrategyBox);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.profitSelectorBox, page.orderPersistenceBox);
            this.setGapFactorLabels(page.gapStrategySelect.value || '');
        }
        else if (cexName && (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName]) {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.gapStrategyBox);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.profitSelectorBox, page.orderPersistenceBox);
            this.setArbMMLabels();
        }
        // Buy/Sell placements
        oldCfg.buyPlacements.forEach((p) => { this.addPlacement(true, p); });
        oldCfg.sellPlacements.forEach((p) => { this.addPlacement(false, p); });
        this.basePane.setupWalletSettings();
        this.quotePane.setupWalletSettings();
        this.updateModifiedMarkers();
        if (_doc__WEBPACK_IMPORTED_MODULE_1__["default"].isDisplayed(page.quickConfig))
            this.switchToQuickConfig();
    }
    /*
     * validateFields validates configuration values and optionally shows error
     * messages.
     */
    validateFields(showErrors) {
        let ok = true;
        const { page, specs: { botType }, updatedConfig: { sellPlacements, buyPlacements, profit } } = this;
        const setError = (errEl, errID) => {
            ok = false;
            if (!showErrors)
                return;
            errEl.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(errID);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(errEl);
        };
        if (showErrors) {
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.buyPlacementsErr, page.sellPlacementsErr, page.profitInputErr);
        }
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb && buyPlacements.length + sellPlacements.length === 0) {
            setError(page.buyPlacementsErr, _locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_PLACEMENTS);
            setError(page.sellPlacementsErr, _locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_PLACEMENTS);
        }
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
            if (isNaN(profit))
                setError(page.profitInputErr, _locales__WEBPACK_IMPORTED_MODULE_7__.ID_INVALID_VALUE);
            else if (profit === 0)
                setError(page.profitInputErr, _locales__WEBPACK_IMPORTED_MODULE_7__.ID_NO_ZERO);
        }
        return ok;
    }
    /*
     * saveSettings updates the settings in the backend, and sets the originalConfig
     * to be equal to the updatedConfig.
     */
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            // Make a copy and delete either the basic mm config or the arb-mm config,
            // depending on whether a cex is selected.
            if (!this.validateFields(true))
                return;
            const { cfg, baseID, quoteID, host, botType, cexName } = this.marketStuff();
            const botCfg = {
                host: host,
                baseID: baseID,
                quoteID: quoteID,
                cexName: cexName !== null && cexName !== void 0 ? cexName : '',
                uiConfig: {
                    simpleArbLots: cfg.simpleArbLots,
                    baseConfig: cfg.baseConfig,
                    quoteConfig: cfg.quoteConfig,
                    cexRebalance: cfg.cexRebalance
                },
                baseWalletOptions: cfg.baseOptions,
                quoteWalletOptions: cfg.quoteOptions
            };
            switch (botType) {
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM:
                    botCfg.basicMarketMakingConfig = this.basicMMConfig();
                    break;
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM:
                    botCfg.arbMarketMakingConfig = this.arbMMConfig();
                    break;
                case _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb:
                    botCfg.simpleArbConfig = this.basicArbConfig();
            }
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().log('mm', 'saving bot config', botCfg);
            yield _mmutil__WEBPACK_IMPORTED_MODULE_5__.MM.updateBotConfig(botCfg);
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fetchMMStatus();
            this.originalConfig = JSON.parse(JSON.stringify(cfg));
            this.updateModifiedMarkers();
            const lastBots = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(lastBotsLK) || {};
            lastBots[`${baseID}_${quoteID}_${host}`] = this.specs;
            _state__WEBPACK_IMPORTED_MODULE_2__["default"].storeLocal(lastBotsLK, lastBots);
            if (cexName)
                _state__WEBPACK_IMPORTED_MODULE_2__["default"].storeLocal(lastArbExchangeLK, cexName);
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mm');
        });
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, specs: { host, baseID, quoteID } } = this;
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.deleteErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loading(page.botSettingsContainer);
            const resp = yield _mmutil__WEBPACK_IMPORTED_MODULE_5__.MM.removeBotConfig(host, baseID, quoteID);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().checkResponse(resp)) {
                page.deleteErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_7__.prep(_locales__WEBPACK_IMPORTED_MODULE_7__.ID_API_ERROR, { msg: resp.msg });
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.deleteErr);
                return;
            }
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fetchMMStatus();
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mm');
        });
    }
    /*
     * arbMMConfig parses the configuration for the arb-mm bot. Only one of
     * arbMMConfig or basicMMConfig should be used when updating the bot
     * configuration. Which is used depends on if the user has configured and
     * selected a CEX or not.
     */
    arbMMConfig() {
        const { updatedConfig: cfg } = this;
        const arbCfg = {
            buyPlacements: [],
            sellPlacements: [],
            profit: cfg.profit,
            driftTolerance: cfg.driftTolerance,
            orderPersistence: cfg.orderPersistence
        };
        for (const p of cfg.buyPlacements)
            arbCfg.buyPlacements.push({ lots: p.lots, multiplier: p.gapFactor });
        for (const p of cfg.sellPlacements)
            arbCfg.sellPlacements.push({ lots: p.lots, multiplier: p.gapFactor });
        return arbCfg;
    }
    basicArbConfig() {
        const { updatedConfig: cfg } = this;
        const arbCfg = {
            profitTrigger: cfg.profit,
            maxActiveArbs: 100,
            numEpochsLeaveOpen: cfg.orderPersistence
        };
        return arbCfg;
    }
    /*
     * basicMMConfig parses the configuration for the basic marketmaker. Only of
     * of basidMMConfig or arbMMConfig should be used when updating the bot
     * configuration.
     */
    basicMMConfig() {
        const { updatedConfig: cfg } = this;
        const mmCfg = {
            gapStrategy: cfg.gapStrategy,
            sellPlacements: cfg.sellPlacements,
            buyPlacements: cfg.buyPlacements,
            driftTolerance: cfg.driftTolerance
        };
        return mmCfg;
    }
    /*
     * fetchOracles fetches the current oracle rates and fiat rates, and displays
     * them on the screen.
     */
    fetchMarketReport() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { page, specs: { host, baseID, quoteID } } = this;
            const res = yield _mmutil__WEBPACK_IMPORTED_MODULE_5__.MM.report(host, baseID, quoteID);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.oraclesLoading, page.oraclesTable, page.noOracles);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().checkResponse(res)) {
                page.oraclesErrMsg.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.oraclesErr);
                return;
            }
            const r = this.marketReport = res.report;
            if (!r.oracles || r.oracles.length === 0) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.noOracles);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(page.noOracles);
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].empty(page.oracles);
                for (const o of (_a = r.oracles) !== null && _a !== void 0 ? _a : []) {
                    const tr = page.oracleTmpl.cloneNode(true);
                    page.oracles.appendChild(tr);
                    const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(tr);
                    tmpl.logo.src = 'img/' + o.host + '.png';
                    tmpl.host.textContent = ExchangeNames[o.host];
                    tmpl.volume.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(o.usdVol);
                    tmpl.price.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs((o.bestBuy + o.bestSell) / 2);
                }
                page.avgPrice.textContent = r.price ? _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(r.price) : '0';
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.oraclesTable);
            }
            if (r.baseFiatRate > 0) {
                page.baseFiatRate.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(r.baseFiatRate);
            }
            else {
                page.baseFiatRate.textContent = 'N/A';
            }
            if (r.quoteFiatRate > 0) {
                page.quoteFiatRate.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(r.quoteFiatRate);
            }
            else {
                page.quoteFiatRate.textContent = 'N/A';
            }
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(page.fiatRates);
        });
    }
    /*
     * handleCEXSubmit handles clicks on the CEX configuration submission button.
     */
    cexConfigured(cexName) {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, formSpecs: { host, baseID, quoteID } } = this;
            const dinfo = _mmutil__WEBPACK_IMPORTED_MODULE_5__.CEXDisplayInfos[cexName];
            for (const { baseID, quoteID, tmpl, arbs } of this.marketRows) {
                if (arbs.indexOf(cexName) !== -1)
                    continue;
                const cexHasMarket = this.cexMarketSupportFilter(baseID, quoteID);
                if (cexHasMarket(cexName)) {
                    const img = page.arbBttnTmpl.cloneNode(true);
                    img.src = dinfo.logo;
                    tmpl.arbs.appendChild(img);
                    arbs.push(cexName);
                }
            }
            this.setCEXAvailability(baseID, quoteID, cexName);
            this.showBotTypeForm(host, baseID, quoteID, _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeArbMM, cexName);
        });
    }
    /*
     * setupCEXes should be called during initialization.
     */
    setupCEXes() {
        this.formCexes = {};
        for (const name of Object.keys(_mmutil__WEBPACK_IMPORTED_MODULE_5__.CEXDisplayInfos))
            this.addCEX(name);
    }
    /*
     * setCEXAvailability sets the coloring and messaging of the CEX selection
     * buttons.
     */
    setCEXAvailability(baseID, quoteID, selectedCEX) {
        const cexHasMarket = this.cexMarketSupportFilter(baseID, quoteID);
        for (const { name, div, tmpl } of Object.values(this.formCexes)) {
            const has = cexHasMarket(name);
            const cexStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[name];
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(tmpl.unavailable, tmpl.needsconfig, tmpl.disconnected);
            _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(Boolean(cexStatus), tmpl.reconfig);
            tmpl.logo.classList.remove('greyscal');
            div.classList.toggle('configured', Boolean(cexStatus) && !cexStatus.connectErr);
            if (!cexStatus) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(tmpl.needsconfig);
            }
            else if (cexStatus.connectErr) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(tmpl.disconnected);
            }
            else if (!has) {
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].show(tmpl.unavailable);
                tmpl.logo.classList.add('greyscal');
            }
            else if (name === selectedCEX)
                this.selectFormCEX(name);
        }
    }
    selectFormCEX(cexName) {
        for (const { name, div } of Object.values(this.formCexes)) {
            div.classList.toggle('selected', name === cexName);
        }
    }
    addCEX(cexName) {
        const dinfo = _mmutil__WEBPACK_IMPORTED_MODULE_5__.CEXDisplayInfos[cexName];
        const div = this.page.cexOptTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(div);
        tmpl.name.textContent = dinfo.name;
        tmpl.logo.src = dinfo.logo;
        this.page.cexSelection.appendChild(div);
        this.formCexes[cexName] = { name: cexName, div, tmpl };
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(div, 'click', () => {
            const cexStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName];
            if (!cexStatus || cexStatus.connectErr) {
                this.showCEXConfigForm(cexName);
                return;
            }
            const cex = this.formCexes[cexName];
            if (cex.div.classList.contains('selected')) { // unselect
                for (const cex of Object.values(this.formCexes))
                    cex.div.classList.remove('selected');
                const { baseID, quoteID } = this.formSpecs;
                this.setCEXAvailability(baseID, quoteID);
                return;
            }
            for (const cex of Object.values(this.formCexes))
                cex.div.classList.toggle('selected', cex.name === cexName);
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(tmpl.reconfig, 'click', (e) => {
            e.stopPropagation();
            this.showCEXConfigForm(cexName);
        });
    }
    showCEXConfigForm(cexName) {
        const page = this.page;
        this.cexConfigForm.setCEX(cexName);
        this.forms.show(page.cexConfigForm);
    }
    /*
     * cexMarketSupportFilter returns a lookup CEXes that have a matching market
     * for the currently selected base and quote assets.
     */
    cexMarketSupportFilter(baseID, quoteID) {
        var _a;
        const cexes = {};
        for (const [cexName, cexStatus] of Object.entries((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes)) {
            for (const { baseID: b, quoteID: q } of Object.values((_a = cexStatus.markets) !== null && _a !== void 0 ? _a : [])) {
                if (b === baseID && q === quoteID) {
                    cexes[cexName] = true;
                    break;
                }
            }
        }
        return (cexName) => Boolean(cexes[cexName]);
    }
}
function isViewOnly(specs, mmStatus) {
    const botStatus = mmStatus.bots.find(({ config: cfg }) => cfg.host === specs.host && cfg.baseID === specs.baseID && cfg.quoteID === specs.quoteID);
    return Boolean(botStatus === null || botStatus === void 0 ? void 0 : botStatus.running);
}
const ExchangeNames = {
    'binance.com': 'Binance',
    'coinbase.com': 'Coinbase',
    'bittrex.com': 'Bittrex',
    'hitbtc.com': 'HitBTC',
    'exmo.com': 'EXMO'
};
function tokenAssetApprovalStatuses(host, b, q) {
    var _a, _b;
    let baseAssetApprovalStatus = _registry__WEBPACK_IMPORTED_MODULE_0__.ApprovalStatus.Approved;
    let quoteAssetApprovalStatus = _registry__WEBPACK_IMPORTED_MODULE_0__.ApprovalStatus.Approved;
    if (b === null || b === void 0 ? void 0 : b.token) {
        const baseAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[b.id];
        const baseVersion = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host].assets[b.id].version;
        if (((_a = baseAsset === null || baseAsset === void 0 ? void 0 : baseAsset.wallet) === null || _a === void 0 ? void 0 : _a.approved) && baseAsset.wallet.approved[baseVersion] !== undefined) {
            baseAssetApprovalStatus = baseAsset.wallet.approved[baseVersion];
        }
    }
    if (q === null || q === void 0 ? void 0 : q.token) {
        const quoteAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[q.id];
        const quoteVersion = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host].assets[q.id].version;
        if (((_b = quoteAsset === null || quoteAsset === void 0 ? void 0 : quoteAsset.wallet) === null || _b === void 0 ? void 0 : _b.approved) && quoteAsset.wallet.approved[quoteVersion] !== undefined) {
            quoteAssetApprovalStatus = quoteAsset.wallet.approved[quoteVersion];
        }
    }
    return [
        baseAssetApprovalStatus,
        quoteAssetApprovalStatus
    ];
}
class AssetPane {
    constructor(pg, div) {
        this.pg = pg;
        this.div = div;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(div);
        this.nSwapFees = new _doc__WEBPACK_IMPORTED_MODULE_1__.IncrementalInput(page.nSwapFees, {
            prec: defaultSwapReserves.prec,
            inc: defaultSwapReserves.inc,
            changed: (v) => {
                const { minR, range } = defaultSwapReserves;
                this.cfg.swapFeeN = v;
                this.nSwapFeesSlider.setValue((v - minR) / range);
                this.pg.updateAllocations();
            }
        });
        this.nSwapFeesSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.nSwapFeesSlider, (r) => {
            const { minR, range, prec } = defaultSwapReserves;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toPrecision)(minR + r * range, prec);
            this.cfg.swapFeeN = v;
            this.nSwapFees.setValue(v);
            this.pg.updateAllocations();
        });
        this.orderReserves = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.orderReservesFactor, {
            prec: defaultOrderReserves.prec,
            min: 0,
            changed: (v) => {
                const { minR, range } = defaultOrderReserves;
                this.cfg.orderReservesFactor = v;
                this.orderReservesSlider.setValue((v - minR) / range);
                this.pg.updateAllocations();
            }
        });
        this.orderReservesSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.orderReservesSlider, (r) => {
            const { minR, range, prec } = defaultOrderReserves;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toPrecision)(minR + r * range, prec);
            this.orderReserves.setValue(v);
            this.cfg.orderReservesFactor = v;
            this.pg.updateAllocations();
        });
        this.slippageBuffer = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.slippageBufferFactor, {
            prec: defaultSlippage.prec,
            min: 0,
            changed: (v) => {
                const { minR, range } = defaultSlippage;
                this.cfg.slippageBufferFactor = v;
                this.slippageBufferSlider.setValue((v - minR) / range);
                this.pg.updateAllocations();
            }
        });
        this.slippageBufferSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.slippageBufferSlider, (r) => {
            const { minR, range, prec } = defaultSlippage;
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toPrecision)(minR + r * range, prec);
            this.slippageBuffer.setValue(minR + r * range);
            this.cfg.slippageBufferFactor = v;
            this.pg.updateAllocations();
        });
        this.minTransfer = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(page.minTransfer, {
            sigFigs: true,
            min: 0,
            changed: (v) => {
                const { cfg } = this;
                const totalInventory = this.commit();
                const [minV, maxV] = [this.minTransfer.min, Math.max(this.minTransfer.min * 2, totalInventory)];
                cfg.transferFactor = (v - minV) / (maxV - minV);
                this.minTransferSlider.setValue(cfg.transferFactor);
            }
        });
        this.minTransferSlider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(page.minTransferSlider, (r) => {
            const { cfg } = this;
            const totalInventory = this.commit();
            const [minV, maxV] = [this.minTransfer.min, Math.max(this.minTransfer.min, totalInventory)];
            cfg.transferFactor = r;
            this.minTransfer.setValue(minV + r * (maxV - minV));
        });
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(page.showBalance, 'click', () => { pg.showAddress(this.assetID); });
    }
    // lot size can change if this is the quote asset, keep it updated.
    setLotSize(lotSize) {
        const { ui } = this;
        this.lotSize = lotSize;
        this.lotSizeConv = lotSize / ui.conventional.conversionFactor;
    }
    setAsset(assetID, isQuote) {
        var _a, _b;
        this.assetID = assetID;
        this.isQuote = isQuote;
        const cfg = this.cfg = isQuote ? this.pg.updatedConfig.quoteConfig : this.pg.updatedConfig.baseConfig;
        const { page, div, pg: { specs: { botType, baseID, cexName }, mktID, updatedConfig: { baseOptions, quoteOptions } } } = this;
        const { symbol, name, token, unitInfo: ui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
        this.ui = ui;
        this.walletConfig = assetID === baseID ? baseOptions : quoteOptions;
        const { conventional: { unit: ticker } } = ui;
        this.feeAssetID = token ? token.parentID : assetID;
        const { unitInfo: feeUI, name: feeName, symbol: feeSymbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.feeAssetID];
        this.feeUI = feeUI;
        this.inv = { book: 0, bookingFees: 0, swapFeeReserves: 0, cex: 0, orderReserves: 0, slippageBuffer: 0 };
        this.isToken = Boolean(token);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(this.isToken, page.feeTotalBox, page.feeReservesBox, page.feeBalances);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(isQuote, page.slippageBufferBox);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setSrc(div, '[data-logo]', _doc__WEBPACK_IMPORTED_MODULE_1__["default"].logoPath(symbol));
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setText(div, '[data-name]', name);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setText(div, '[data-ticker]', ticker);
        const { conventional: { unit: feeTicker } } = feeUI;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setText(div, '[data-fee-ticker]', feeTicker);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setText(div, '[data-fee-name]', feeName);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setSrc(div, '[data-fee-logo]', _doc__WEBPACK_IMPORTED_MODULE_1__["default"].logoPath(feeSymbol));
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM, page.cexMinInvBox);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb, page.orderReservesBox);
        this.nSwapFees.setValue((_a = cfg.swapFeeN) !== null && _a !== void 0 ? _a : defaultSwapReserves.n);
        this.nSwapFeesSlider.setValue(cfg.swapFeeN / defaultSwapReserves.maxR);
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb) {
            const [v] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toPrecision)((_b = cfg.orderReservesFactor) !== null && _b !== void 0 ? _b : defaultOrderReserves.factor, defaultOrderReserves.prec);
            this.orderReserves.setValue(v);
            this.orderReservesSlider.setValue((v - defaultOrderReserves.minR) / defaultOrderReserves.range);
        }
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicMM) {
            this.minTransfer.prec = Math.log10(ui.conventional.conversionFactor);
            const mkt = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.cexes[cexName].markets[mktID];
            this.minTransfer.min = ((isQuote ? mkt.quoteMinWithdraw : mkt.baseMinWithdraw) / ui.conventional.conversionFactor);
        }
        this.slippageBuffer.setValue(cfg.slippageBufferFactor);
        const { minR, range } = defaultSlippage;
        this.slippageBufferSlider.setValue((cfg.slippageBufferFactor - minR) / range);
        this.setupWalletSettings();
        this.updateBalances();
    }
    commit() {
        const { inv, isToken } = this;
        let commit = inv.book + inv.cex + inv.orderReserves + inv.slippageBuffer;
        if (!isToken)
            commit += inv.bookingFees + inv.swapFeeReserves;
        return commit;
    }
    updateInventory(lots, counterLots, lotSize, dexCommit, cexCommit, fees) {
        this.setLotSize(lotSize);
        const { page, cfg, lotSizeConv, inv, ui, feeUI, isToken, isQuote, pg: { specs: { cexName, botType } } } = this;
        page.bookLots.textContent = String(lots);
        page.bookLotSize.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(lotSizeConv);
        inv.book = lots * lotSizeConv;
        page.bookCommitment.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(inv.book);
        const feesPerLotConv = fees.bookingFeesPerLot / feeUI.conventional.conversionFactor;
        page.bookingFeesPerLot.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(feesPerLotConv);
        page.swapReservesFactor.textContent = fees.swapReservesFactor.toFixed(2);
        page.bookingFeesLots.textContent = String(lots);
        inv.bookingFees = fees.bookingFees / feeUI.conventional.conversionFactor;
        page.bookingFees.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(inv.bookingFees);
        if (cexName) {
            inv.cex = cexCommit / ui.conventional.conversionFactor;
            page.cexMinInv.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(inv.cex);
        }
        if (botType !== _mmutil__WEBPACK_IMPORTED_MODULE_5__.botTypeBasicArb) {
            const totalInventory = Math.max(cexCommit, dexCommit) / ui.conventional.conversionFactor;
            page.orderReservesBasis.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(totalInventory);
            const orderReserves = totalInventory * cfg.orderReservesFactor;
            inv.orderReserves = orderReserves;
            page.orderReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(orderReserves);
        }
        if (isToken) {
            const feesPerSwapConv = fees.tokenFeesPerSwap / feeUI.conventional.conversionFactor;
            page.feeReservesPerSwap.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(feesPerSwapConv);
            inv.swapFeeReserves = feesPerSwapConv * cfg.swapFeeN;
            page.feeReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(inv.swapFeeReserves);
        }
        if (isQuote) {
            const basis = inv.book + inv.cex + inv.orderReserves;
            page.slippageBufferBasis.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatCoinValue(basis * ui.conventional.conversionFactor, ui);
            inv.slippageBuffer = basis * cfg.slippageBufferFactor;
            page.slippageBuffer.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatCoinValue(inv.slippageBuffer * ui.conventional.conversionFactor, ui);
        }
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(fees.bookingFeesPerCounterLot > 0, page.redemptionFeesBox);
        if (fees.bookingFeesPerCounterLot > 0) {
            const feesPerLotConv = fees.bookingFeesPerCounterLot / feeUI.conventional.conversionFactor;
            page.redemptionFeesPerLot.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(feesPerLotConv);
            page.redemptionFeesLots.textContent = String(counterLots);
            page.redeemReservesFactor.textContent = fees.redeemReservesFactor.toFixed(2);
        }
        this.updateCommitTotal();
        this.updateTokenFees();
        this.updateRebalance();
    }
    updateCommitTotal() {
        const { page, assetID, ui } = this;
        const commit = this.commit();
        page.commitTotal.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatCoinValue(Math.round(commit * ui.conventional.conversionFactor), ui);
        page.commitTotalFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(commit * (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[assetID]);
    }
    updateTokenFees() {
        const { page, inv, feeAssetID, feeUI, isToken } = this;
        if (!isToken)
            return;
        const feeReserves = inv.bookingFees + inv.swapFeeReserves;
        page.feeTotal.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatCoinValue(feeReserves * feeUI.conventional.conversionFactor, feeUI);
        page.feeTotalFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(feeReserves * (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[feeAssetID]);
    }
    updateRebalance() {
        const { page, cfg, pg: { updatedConfig: { cexRebalance }, specs: { cexName } } } = this;
        const showRebalance = cexName && cexRebalance;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(showRebalance, page.rebalanceOpts);
        if (!showRebalance)
            return;
        const totalInventory = this.commit();
        const [minV, maxV] = [this.minTransfer.min, Math.max(this.minTransfer.min * 2, totalInventory)];
        const rangeV = maxV - minV;
        this.minTransfer.setValue(minV + cfg.transferFactor * rangeV);
        this.minTransferSlider.setValue((cfg.transferFactor - defaultTransfer.minR) / defaultTransfer.range);
    }
    setupWalletSettings() {
        const { page, assetID, walletConfig } = this;
        const walletSettings = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().currentWalletDefinition(assetID);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].empty(page.walletSettings);
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(!walletSettings.multifundingopts, page.walletSettingsNone);
        if (!walletSettings.multifundingopts)
            return;
        const optToDiv = {};
        const dependentOpts = {};
        const addDependentOpt = (optKey, optSetting, dependentOn) => {
            if (!dependentOpts[dependentOn])
                dependentOpts[dependentOn] = [];
            dependentOpts[dependentOn].push(optKey);
            optToDiv[optKey] = optSetting;
        };
        const setDependentOptsVis = (parentOptKey, vis) => {
            const optKeys = dependentOpts[parentOptKey];
            if (!optKeys)
                return;
            for (const optKey of optKeys)
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(vis, optToDiv[optKey]);
        };
        const addOpt = (opt) => {
            if (opt.quoteAssetOnly && !this.isQuote)
                return;
            const currVal = walletConfig[opt.key];
            let div;
            if (opt.isboolean) {
                div = page.boolSettingTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(div);
                tmpl.name.textContent = opt.displayname;
                tmpl.input.checked = currVal === 'true';
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].bind(tmpl.input, 'change', () => {
                    walletConfig[opt.key] = tmpl.input.checked ? 'true' : 'false';
                    setDependentOptsVis(opt.key, Boolean(tmpl.input.checked));
                });
                if (opt.description)
                    tmpl.tooltip.dataset.tooltip = opt.description;
            }
            else if (opt.xyRange) {
                const { start, end, xUnit } = opt.xyRange;
                const range = end.x - start.x;
                div = page.rangeSettingTmpl.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].parseTemplate(div);
                tmpl.name.textContent = opt.displayname;
                if (opt.description)
                    tmpl.tooltip.dataset.tooltip = opt.description;
                if (xUnit)
                    tmpl.unit.textContent = xUnit;
                else
                    _doc__WEBPACK_IMPORTED_MODULE_1__["default"].hide(tmpl.unit);
                const input = new _doc__WEBPACK_IMPORTED_MODULE_1__.NumberInput(tmpl.value, {
                    prec: 1,
                    changed: (rawV) => {
                        const [v, s] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)(rawV, 1);
                        walletConfig[opt.key] = s;
                        slider.setValue((v - start.x) / range);
                    }
                });
                const slider = new _doc__WEBPACK_IMPORTED_MODULE_1__.MiniSlider(tmpl.slider, (r) => {
                    const rawV = start.x + r * range;
                    const [v, s] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)(rawV, 1);
                    walletConfig[opt.key] = s;
                    input.setValue(v);
                });
                // TODO: default value should be smaller or none for base asset.
                const [v, s] = (0,_doc__WEBPACK_IMPORTED_MODULE_1__.toFourSigFigs)((0,_doc__WEBPACK_IMPORTED_MODULE_1__.parseFloatDefault)(currVal, start.x), 3);
                walletConfig[opt.key] = s;
                slider.setValue((v - start.x) / range);
                input.setValue(v);
                tmpl.value.textContent = s;
            }
            if (!div)
                return console.error("don't know how to handle opt", opt);
            page.walletSettings.appendChild(div);
            if (opt.dependsOn) {
                addDependentOpt(opt.key, div, opt.dependsOn);
                const parentOptVal = walletConfig[opt.dependsOn];
                _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(parentOptVal === 'true', div);
            }
        };
        if (walletSettings.multifundingopts && walletSettings.multifundingopts.length > 0) {
            for (const opt of walletSettings.multifundingopts)
                addOpt(opt);
        }
        (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().bindTooltips(page.walletSettings);
    }
    updateBalances() {
        const { page, assetID, ui, feeAssetID, feeUI, pg: { specs: { cexName, baseID }, cexBaseBalance, cexQuoteBalance } } = this;
        const { balance: { available } } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[assetID];
        const botInv = this.pg.runningBotInventory(assetID);
        const dexAvail = available - botInv.dex.total;
        let cexAvail = 0;
        _doc__WEBPACK_IMPORTED_MODULE_1__["default"].setVis(cexName, page.balanceBreakdown);
        if (cexName) {
            page.dexAvail.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(dexAvail / ui.conventional.conversionFactor);
            const { available: cexRawAvail } = assetID === baseID ? cexBaseBalance : cexQuoteBalance;
            cexAvail = cexRawAvail - botInv.cex.total;
            page.cexAvail.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(cexAvail / ui.conventional.conversionFactor);
        }
        page.avail.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs((dexAvail + cexAvail) / ui.conventional.conversionFactor);
        if (assetID === feeAssetID)
            return;
        const { balance: { available: feeAvail } } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[feeAssetID];
        page.feeAvail.textContent = _doc__WEBPACK_IMPORTED_MODULE_1__["default"].formatFourSigFigs(feeAvail / feeUI.conventional.conversionFactor);
    }
}


/***/ }),

/***/ "./src/js/mmutil.ts":
/*!**************************!*\
  !*** ./src/js/mmutil.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BotMarket": () => (/* binding */ BotMarket),
/* harmony export */   "CEXDisplayInfos": () => (/* binding */ CEXDisplayInfos),
/* harmony export */   "GapStrategyAbsolute": () => (/* binding */ GapStrategyAbsolute),
/* harmony export */   "GapStrategyAbsolutePlus": () => (/* binding */ GapStrategyAbsolutePlus),
/* harmony export */   "GapStrategyMultiplier": () => (/* binding */ GapStrategyMultiplier),
/* harmony export */   "GapStrategyPercent": () => (/* binding */ GapStrategyPercent),
/* harmony export */   "GapStrategyPercentPlus": () => (/* binding */ GapStrategyPercentPlus),
/* harmony export */   "MM": () => (/* binding */ MM),
/* harmony export */   "PlacementsChart": () => (/* binding */ PlacementsChart),
/* harmony export */   "RunningMarketMakerDisplay": () => (/* binding */ RunningMarketMakerDisplay),
/* harmony export */   "botTypeArbMM": () => (/* binding */ botTypeArbMM),
/* harmony export */   "botTypeBasicArb": () => (/* binding */ botTypeBasicArb),
/* harmony export */   "botTypeBasicMM": () => (/* binding */ botTypeBasicMM),
/* harmony export */   "calculateQuoteLot": () => (/* binding */ calculateQuoteLot),
/* harmony export */   "feesAndCommit": () => (/* binding */ feesAndCommit),
/* harmony export */   "hostedMarketID": () => (/* binding */ hostedMarketID),
/* harmony export */   "liveBotConfig": () => (/* binding */ liveBotConfig),
/* harmony export */   "liveBotStatus": () => (/* binding */ liveBotStatus),
/* harmony export */   "runningBotInventory": () => (/* binding */ runningBotInventory),
/* harmony export */   "setCexElements": () => (/* binding */ setCexElements),
/* harmony export */   "setMarketElements": () => (/* binding */ setMarketElements)
/* harmony export */ });
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _charts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./charts */ "./src/js/charts.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const GapStrategyMultiplier = 'multiplier';
const GapStrategyAbsolute = 'absolute';
const GapStrategyAbsolutePlus = 'absolute-plus';
const GapStrategyPercent = 'percent';
const GapStrategyPercentPlus = 'percent-plus';
const botTypeBasicMM = 'basicMM';
const botTypeArbMM = 'arbMM';
const botTypeBasicArb = 'basicArb';
const CEXDisplayInfos = {
    'Binance': {
        name: 'Binance',
        logo: '/img/binance.com.png'
    },
    'BinanceUS': {
        name: 'Binance U.S.',
        logo: '/img/binance.us.png'
    }
};
/*
 * MarketMakerBot is the front end representation of the server's
 * mm.MarketMaker. MarketMakerBot is a singleton assigned to MM below.
 */
class MarketMakerBot {
    constructor() {
        this.cexBalanceCache = {};
    }
    /*
     * updateBotConfig appends or updates the specified BotConfig.
     */
    updateBotConfig(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/updatebotconfig', cfg);
        });
    }
    /*
     * updateCEXConfig appends or updates the specified CEXConfig.
     */
    updateCEXConfig(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/updatecexconfig', cfg);
        });
    }
    removeBotConfig(host, baseID, quoteID) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/removebotconfig', { host, baseID, quoteID });
        });
    }
    report(host, baseID, quoteID) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/marketreport', { host, baseID, quoteID });
        });
    }
    startBot(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/startmarketmakingbot', { config });
        });
    }
    stopBot(market) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/stopmarketmakingbot', { market });
        });
    }
    status() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.getJSON)('/api/marketmakingstatus')).status;
        });
    }
    // botStats returns the RunStats for a running bot with the specified parameters.
    botStats(baseID, quoteID, host, startTime) {
        for (const botStatus of Object.values((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots)) {
            if (!botStatus.runStats)
                continue;
            const runStats = botStatus.runStats;
            const cfg = botStatus.config;
            if (cfg.baseID === baseID && cfg.quoteID === quoteID && cfg.host === host && runStats.startTime === startTime) {
                return runStats;
            }
        }
    }
    cachedCexBalance(cexName, assetID) {
        var _a;
        return (_a = this.cexBalanceCache[cexName]) === null || _a === void 0 ? void 0 : _a[assetID];
    }
    cexBalance(cexName, assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.cexBalanceCache[cexName])
                this.cexBalanceCache[cexName] = {};
            const cexBalance = (yield (0,_http__WEBPACK_IMPORTED_MODULE_1__.postJSON)('/api/cexbalance', { cexName, assetID })).cexBalance;
            this.cexBalanceCache[cexName][assetID] = cexBalance;
            return cexBalance;
        });
    }
}
// MM is the front end representation of the server's mm.MarketMaker.
const MM = new MarketMakerBot();
function runningBotInventory(assetID) {
    return (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots.reduce((v, { runStats, running }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        if (!running || !runStats)
            return v;
        const { dexBalances: d, cexBalances: c } = runStats;
        v.cex.locked += (_b = (_a = c[assetID]) === null || _a === void 0 ? void 0 : _a.locked) !== null && _b !== void 0 ? _b : 0;
        v.cex.locked += (_d = (_c = c[assetID]) === null || _c === void 0 ? void 0 : _c.reserved) !== null && _d !== void 0 ? _d : 0;
        v.cex.avail += (_f = (_e = c[assetID]) === null || _e === void 0 ? void 0 : _e.available) !== null && _f !== void 0 ? _f : 0;
        v.cex.total = v.cex.avail + v.cex.locked;
        v.dex.locked += (_h = (_g = d[assetID]) === null || _g === void 0 ? void 0 : _g.locked) !== null && _h !== void 0 ? _h : 0;
        v.dex.locked += (_k = (_j = d[assetID]) === null || _j === void 0 ? void 0 : _j.reserved) !== null && _k !== void 0 ? _k : 0;
        v.dex.avail += (_m = (_l = d[assetID]) === null || _l === void 0 ? void 0 : _l.available) !== null && _m !== void 0 ? _m : 0;
        v.dex.total = v.dex.avail + v.dex.locked;
        v.avail += ((_p = (_o = d[assetID]) === null || _o === void 0 ? void 0 : _o.available) !== null && _p !== void 0 ? _p : 0) + ((_r = (_q = c[assetID]) === null || _q === void 0 ? void 0 : _q.available) !== null && _r !== void 0 ? _r : 0);
        v.locked += ((_t = (_s = d[assetID]) === null || _s === void 0 ? void 0 : _s.locked) !== null && _t !== void 0 ? _t : 0) + ((_v = (_u = c[assetID]) === null || _u === void 0 ? void 0 : _u.locked) !== null && _v !== void 0 ? _v : 0);
        return v;
    }, { avail: 0, locked: 0, cex: { avail: 0, locked: 0, total: 0 }, dex: { avail: 0, locked: 0, total: 0 } });
}
function setMarketElements(ancestor, baseID, quoteID, host) {
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-host]', host);
    const { unitInfo: bui, name: baseName, symbol: baseSymbol, token: baseToken } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-base-name]', baseName);
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setSrc(ancestor, '[data-base-logo]', _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(baseSymbol));
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-base-ticker]', bui.conventional.unit);
    const { unitInfo: baseFeeUI, name: baseFeeName, symbol: baseFeeSymbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseToken ? baseToken.parentID : baseID];
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-base-fee-name]', baseFeeName);
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setSrc(ancestor, '[data-base-fee-logo]', _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(baseFeeSymbol));
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-base-fee-ticker]', baseFeeUI.conventional.unit);
    const { unitInfo: qui, name: quoteName, symbol: quoteSymbol, token: quoteToken } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-quote-name]', quoteName);
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setSrc(ancestor, '[data-quote-logo]', _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(quoteSymbol));
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-quote-ticker]', qui.conventional.unit);
    const { unitInfo: quoteFeeUI, name: quoteFeeName, symbol: quoteFeeSymbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteToken ? quoteToken.parentID : quoteID];
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-quote-fee-name]', quoteFeeName);
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setSrc(ancestor, '[data-quote-fee-logo]', _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(quoteFeeSymbol));
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-quote-fee-ticker]', quoteFeeUI.conventional.unit);
}
function setCexElements(ancestor, cexName) {
    const dinfo = CEXDisplayInfos[cexName];
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setText(ancestor, '[data-cex-name]', dinfo.name);
    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setSrc(ancestor, '[data-cex-logo]', dinfo.logo);
    for (const img of _doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(ancestor, '[data-cex-logo]'))
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(img);
}
function calculateQuoteLot(lotSize, baseID, quoteID, spot) {
    const baseRate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[baseID];
    const quoteRate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[quoteID];
    const { unitInfo: { conventional: { conversionFactor: bFactor } } } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
    const { unitInfo: { conventional: { conversionFactor: qFactor } } } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
    if (baseRate && quoteRate) {
        return lotSize * baseRate / quoteRate * qFactor / bFactor;
    }
    else if (spot) {
        return lotSize * spot.rate / _orderutil__WEBPACK_IMPORTED_MODULE_3__.RateEncodingFactor;
    }
    return qFactor;
}
class PlacementsChart extends _charts__WEBPACK_IMPORTED_MODULE_4__.Chart {
    constructor(parent) {
        super(parent, {
            resize: () => this.resized(),
            click: ( /* e: MouseEvent */) => { },
            zoom: ( /* bigger: boolean */) => { }
        });
    }
    resized() {
        this.render();
    }
    draw() { }
    setMarket(cfg) {
        this.cfg = cfg;
        const { loadedCEX, cfg: { cexName } } = this;
        if (cexName && cexName !== loadedCEX) {
            this.loadedCEX = cexName;
            this.cexLogo = new Image();
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(this.cexLogo, 'load', () => { this.render(); });
            this.cexLogo.src = CEXDisplayInfos[cexName || ''].logo;
        }
        this.render();
    }
    render() {
        const { ctx, canvas, theme, cfg } = this;
        if (canvas.width === 0 || !cfg)
            return;
        const { dict: { buyPlacements, sellPlacements, profit }, baseFiatRate, botType } = cfg;
        if (botType === botTypeBasicArb)
            return;
        this.clear();
        const drawDashedLine = (x0, y0, x1, y1, color) => {
            ctx.save();
            ctx.setLineDash([3, 5]);
            ctx.lineWidth = 1.5;
            ctx.strokeStyle = color;
            this.line(x0, y0, x1, y1);
            ctx.restore();
        };
        const isBasicMM = botType === botTypeBasicMM;
        const cx = canvas.width / 2;
        const [cexGapL, cexGapR] = isBasicMM ? [cx, cx] : [0.48 * canvas.width, 0.52 * canvas.width];
        const buyLots = buyPlacements.reduce((v, p) => v + p.lots, 0);
        const sellLots = sellPlacements.reduce((v, p) => v + p.lots, 0);
        const maxLots = Math.max(buyLots, sellLots);
        let widest = 0;
        let fauxSpacer = 0;
        if (isBasicMM) {
            const leftmost = buyPlacements.reduce((v, p) => Math.max(v, p.gapFactor), 0);
            const rightmost = sellPlacements.reduce((v, p) => Math.max(v, p.gapFactor), 0);
            widest = Math.max(leftmost, rightmost);
        }
        else {
            // For arb-mm, we don't know how the orders will be spaced because it
            // depends on the vwap. But we're just trying to capture the general sense
            // of how the parameters will affect order placement, so we'll fake it.
            // Higher match buffer values will lead to orders with less favorable
            // rates, e.g. the spacing will be larger.
            const ps = [...buyPlacements, ...sellPlacements];
            const matchBuffer = ps.reduce((sum, p) => sum + p.gapFactor, 0) / ps.length;
            fauxSpacer = 0.01 * (1 + matchBuffer);
            widest = Math.min(10, Math.max(buyPlacements.length, sellPlacements.length)) * fauxSpacer; // arb-mm
        }
        // Make the range 15% on each side, which will include profit + placements,
        // unless they have orders with larger gap factors.
        const minRange = profit + widest;
        const defaultRange = 0.155;
        const range = Math.max(minRange * 1.05, defaultRange);
        // Increase data height logarithmically up to 1,000,000 USD.
        const maxCommitUSD = maxLots * baseFiatRate;
        const regionHeight = 0.2 + 0.7 * Math.log((0,_doc__WEBPACK_IMPORTED_MODULE_2__.clamp)(maxCommitUSD, 0, 1e6)) / Math.log(1e6);
        // Draw a region in the middle representing the cex gap.
        const plotRegion = new _charts__WEBPACK_IMPORTED_MODULE_4__.Region(ctx, new _charts__WEBPACK_IMPORTED_MODULE_4__.Extents(0, canvas.width, 0, canvas.height));
        if (isBasicMM) {
            drawDashedLine(cx, 0, cx, canvas.height, theme.gapLine);
        }
        else { // arb-mm
            plotRegion.plot(new _charts__WEBPACK_IMPORTED_MODULE_4__.Extents(0, 1, 0, 1), (ctx, tools) => {
                const [y0, y1] = [tools.y(0), tools.y(1)];
                drawDashedLine(cexGapL, y0, cexGapL, y1, theme.gapLine);
                drawDashedLine(cexGapR, y0, cexGapR, y1, theme.gapLine);
                const y = tools.y(0.95);
                ctx.drawImage(this.cexLogo, cx - 8, y, 16, 16);
                this.applyLabelStyle(18);
                ctx.fillText('δ', cx, y + 29);
            });
        }
        const plotSide = (isBuy, placements) => {
            if (!(placements === null || placements === void 0 ? void 0 : placements.length))
                return;
            const [xMin, xMax] = isBuy ? [0, cexGapL] : [cexGapR, canvas.width];
            const reg = new _charts__WEBPACK_IMPORTED_MODULE_4__.Region(ctx, new _charts__WEBPACK_IMPORTED_MODULE_4__.Extents(xMin, xMax, canvas.height * (1 - regionHeight), canvas.height));
            const [l, r] = isBuy ? [-range, 0] : [0, range];
            reg.plot(new _charts__WEBPACK_IMPORTED_MODULE_4__.Extents(l, r, 0, maxLots), (ctx, tools) => {
                ctx.lineWidth = 2.5;
                ctx.strokeStyle = isBuy ? theme.buyLine : theme.sellLine;
                ctx.fillStyle = isBuy ? theme.buyFill : theme.sellFill;
                ctx.beginPath();
                const sideFactor = isBuy ? -1 : 1;
                const firstPt = placements[0];
                const y0 = tools.y(0);
                const firstX = tools.x((isBasicMM ? firstPt.gapFactor : profit + fauxSpacer) * sideFactor);
                ctx.moveTo(firstX, y0);
                let cumulativeLots = 0;
                for (let i = 0; i < placements.length; i++) {
                    const p = placements[i];
                    // For arb-mm, we don't know exactly
                    const rawX = isBasicMM ? p.gapFactor : profit + (i + 1) * fauxSpacer;
                    const x = tools.x(rawX * sideFactor);
                    ctx.lineTo(x, tools.y(cumulativeLots));
                    cumulativeLots += p.lots;
                    ctx.lineTo(x, tools.y(cumulativeLots));
                }
                const xInfinity = isBuy ? canvas.width * -0.1 : canvas.width * 1.1;
                ctx.lineTo(xInfinity, tools.y(cumulativeLots));
                ctx.stroke();
                ctx.lineTo(xInfinity, y0);
                ctx.lineTo(firstX, y0);
                ctx.closePath();
                ctx.globalAlpha = 0.25;
                ctx.fill();
            }, true);
        };
        plotSide(false, sellPlacements);
        plotSide(true, buyPlacements);
    }
}
function hostedMarketID(host, baseID, quoteID) {
    return `${host}-${baseID}-${quoteID}`; // same as MarketWithHost.String()
}
function liveBotConfig(host, baseID, quoteID) {
    const s = liveBotStatus(host, baseID, quoteID);
    if (s)
        return s.config;
}
function liveBotStatus(host, baseID, quoteID) {
    const statuses = ((0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots || []).filter((s) => {
        return s.config.baseID === baseID && s.config.quoteID === quoteID && s.config.host === host;
    });
    if (statuses.length)
        return statuses[0];
}
function sumLots(lots, p) {
    return lots + p.lots;
}
function emptyProjection() {
    return { book: 0, bookingFees: 0, swapFeeReserves: 0, cex: 0, orderReserves: 0, slippageBuffer: 0 };
}
class BotMarket {
    constructor(cfg) {
        const host = this.host = cfg.host;
        const baseID = this.baseID = cfg.baseID;
        const quoteID = this.quoteID = cfg.quoteID;
        this.cexName = cfg.cexName;
        const status = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots.find(({ config: c }) => c.baseID === baseID && c.quoteID === quoteID && c.host === host);
        if (!status)
            throw Error('where\'s the bot status?');
        this.cfg = status.config;
        const { token: baseToken, symbol: baseSymbol, unitInfo: bui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[baseID];
        this.baseSymbol = baseSymbol;
        this.baseTicker = bui.conventional.unit;
        this.bui = bui;
        this.baseFactor = bui.conventional.conversionFactor;
        this.baseToken = baseToken;
        const baseFeeID = this.baseFeeID = baseToken ? baseToken.parentID : baseID;
        const { unitInfo: baseFeeUI, symbol: baseFeeSymbol, wallet: baseWallet } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.baseFeeID];
        const traitAccountLocker = 1 << 14;
        this.baseIsAccountLocker = (baseWallet.traits & traitAccountLocker) > 0;
        this.baseFeeUI = baseFeeUI;
        this.baseFeeTicker = baseFeeUI.conventional.unit;
        this.baseFeeSymbol = baseFeeSymbol;
        this.baseFeeFactor = this.baseFeeUI.conventional.conversionFactor;
        const { token: quoteToken, symbol: quoteSymbol, unitInfo: qui } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[quoteID];
        this.quoteSymbol = quoteSymbol;
        this.quoteTicker = qui.conventional.unit;
        this.qui = qui;
        this.quoteFactor = qui.conventional.conversionFactor;
        this.quoteToken = quoteToken;
        const quoteFeeID = this.quoteFeeID = quoteToken ? quoteToken.parentID : quoteID;
        const { unitInfo: quoteFeeUI, symbol: quoteFeeSymbol, wallet: quoteWallet } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.quoteFeeID];
        this.quoteIsAccountLocker = (quoteWallet.traits & traitAccountLocker) > 0;
        this.quoteFeeUI = quoteFeeUI;
        this.quoteFeeTicker = quoteFeeUI.conventional.unit;
        this.quoteFeeSymbol = quoteFeeSymbol;
        this.quoteFeeFactor = this.quoteFeeUI.conventional.conversionFactor;
        this.id = hostedMarketID(host, baseID, quoteID);
        this.mktID = `${baseSymbol}_${quoteSymbol}`;
        const { markets } = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host];
        const { lotsize: lotSize, ratestep: rateStep } = markets[this.mktID];
        this.lotSize = lotSize;
        this.lotSizeConv = lotSize / bui.conventional.conversionFactor;
        this.rateStep = rateStep;
        this.quoteLot = calculateQuoteLot(lotSize, baseID, quoteID);
        this.quoteLotConv = this.quoteLot / qui.conventional.conversionFactor;
        this.baseFeeFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[baseFeeID];
        this.quoteFeeFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().fiatRatesMap[quoteFeeID];
        if (cfg.arbMarketMakingConfig) {
            this.botType = botTypeArbMM;
            this.baseLots = cfg.arbMarketMakingConfig.sellPlacements.reduce(sumLots, 0);
            this.quoteLots = cfg.arbMarketMakingConfig.buyPlacements.reduce(sumLots, 0);
            this.nBuyPlacements = cfg.arbMarketMakingConfig.buyPlacements.length;
            this.nSellPlacements = cfg.arbMarketMakingConfig.sellPlacements.length;
        }
        else if (cfg.simpleArbConfig) {
            this.botType = botTypeBasicArb;
            this.baseLots = cfg.uiConfig.simpleArbLots;
            this.quoteLots = cfg.uiConfig.simpleArbLots;
        }
        else if (cfg.basicMarketMakingConfig) { // basicmm
            this.botType = botTypeBasicMM;
            this.baseLots = cfg.basicMarketMakingConfig.sellPlacements.reduce(sumLots, 0);
            this.quoteLots = cfg.basicMarketMakingConfig.buyPlacements.reduce(sumLots, 0);
            this.nBuyPlacements = cfg.basicMarketMakingConfig.buyPlacements.length;
            this.nSellPlacements = cfg.basicMarketMakingConfig.sellPlacements.length;
        }
    }
    initialize(startupBalanceCache) {
        return __awaiter(this, void 0, void 0, function* () {
            const { host, baseID, quoteID, lotSizeConv, quoteLotConv, cexName } = this;
            const res = yield MM.report(host, baseID, quoteID);
            const r = this.marketReport = res.report;
            this.lotSizeUSD = lotSizeConv * r.baseFiatRate;
            this.quoteLotUSD = quoteLotConv * r.quoteFiatRate;
            this.proj = this.projectedAllocations();
            if (cexName) {
                const b = startupBalanceCache[baseID] = startupBalanceCache[baseID] || MM.cexBalance(cexName, baseID);
                const q = startupBalanceCache[quoteID] = startupBalanceCache[quoteID] || MM.cexBalance(cexName, quoteID);
                this.cexBaseBalance = yield b;
                this.cexQuoteBalance = yield q;
            }
        });
    }
    status() {
        const { baseID, quoteID } = this;
        const botStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots.find((s) => s.config.baseID === baseID && s.config.quoteID === quoteID);
        if (!botStatus)
            return { botCfg: {}, running: false, runStats: {} };
        const { config: botCfg, running, runStats, latestEpoch, cexProblems } = botStatus;
        return { botCfg, running, runStats, latestEpoch, cexProblems };
    }
    /*
    * adjustedBalances calculates the user's available balances and fee-asset
    * balances for a market, with consideration for currently running bots.
    */
    adjustedBalances() {
        const { baseID, quoteID, baseFeeID, quoteFeeID, cexBaseBalance, cexQuoteBalance, baseFactor, quoteFactor, baseFeeFactor, quoteFeeFactor } = this;
        const [baseWallet, quoteWallet] = [(0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[quoteID]];
        const [bInv, qInv] = [runningBotInventory(baseID), runningBotInventory(quoteID)];
        // In these available balance calcs, only subtract the available balance of
        // running bots, since the locked/reserved/immature is already subtracted
        // from the wallet's total available balance.
        const [cexBaseAvail, cexQuoteAvail] = [((cexBaseBalance === null || cexBaseBalance === void 0 ? void 0 : cexBaseBalance.available) || 0) - bInv.cex.avail, ((cexQuoteBalance === null || cexQuoteBalance === void 0 ? void 0 : cexQuoteBalance.available) || 0) - qInv.cex.avail];
        const [dexBaseAvail, dexQuoteAvail] = [baseWallet.balance.available - bInv.dex.avail, quoteWallet.balance.available - qInv.dex.avail];
        const baseAvail = dexBaseAvail + cexBaseAvail;
        const quoteAvail = dexQuoteAvail + cexQuoteAvail;
        const baseFeeWallet = baseFeeID === baseID ? baseWallet : (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[baseFeeID];
        const quoteFeeWallet = quoteFeeID === quoteID ? quoteWallet : (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().walletMap[quoteFeeID];
        let [baseFeeAvail, dexBaseFeeAvail, cexBaseFeeAvail] = [baseAvail, dexBaseAvail, cexBaseAvail];
        if (baseFeeID !== baseID) {
            const bFeeInv = runningBotInventory(baseID);
            dexBaseFeeAvail = baseFeeWallet.balance.available - bFeeInv.dex.total;
            cexBaseFeeAvail = ((cexBaseBalance === null || cexBaseBalance === void 0 ? void 0 : cexBaseBalance.available) || 0) - bFeeInv.cex.total;
            baseFeeAvail = dexBaseFeeAvail + cexBaseFeeAvail;
        }
        let [quoteFeeAvail, dexQuoteFeeAvail, cexQuoteFeeAvail] = [quoteAvail, dexQuoteAvail, cexQuoteAvail];
        if (quoteFeeID !== quoteID) {
            const qFeeInv = runningBotInventory(quoteID);
            dexQuoteFeeAvail = quoteFeeWallet.balance.available - qFeeInv.dex.total;
            cexQuoteFeeAvail = ((cexQuoteBalance === null || cexQuoteBalance === void 0 ? void 0 : cexQuoteBalance.available) || 0) - qFeeInv.cex.total;
            quoteFeeAvail = dexQuoteFeeAvail + cexQuoteFeeAvail;
        }
        return {
            baseAvail: baseAvail / baseFactor,
            quoteAvail: quoteAvail / quoteFactor,
            dexBaseAvail: dexBaseAvail / baseFactor,
            dexQuoteAvail: dexQuoteAvail / quoteFactor,
            cexBaseAvail: cexBaseAvail / baseFactor,
            cexQuoteAvail: cexQuoteAvail / quoteFactor,
            baseFeeAvail: baseFeeAvail / baseFeeFactor,
            quoteFeeAvail: quoteFeeAvail / quoteFeeFactor,
            dexBaseFeeAvail: dexBaseFeeAvail / baseFeeFactor,
            dexQuoteFeeAvail: dexQuoteFeeAvail / quoteFeeFactor,
            cexBaseFeeAvail: cexBaseFeeAvail / baseFeeFactor,
            cexQuoteFeeAvail: cexQuoteFeeAvail / quoteFeeFactor
        };
    }
    /*
     * feesAndCommit generates a snapshot of current market fees, as well as a
     * "commit", which is the funding dedicated to being on order. The commit
     * values do not include booking fees, order reserves, etc. just the order
     * quantity.
     */
    feesAndCommit() {
        const { baseID, quoteID, marketReport: { baseFees, quoteFees }, lotSize, baseLots, quoteLots, baseFeeID, quoteFeeID, baseIsAccountLocker, quoteIsAccountLocker, cfg: { uiConfig: { baseConfig, quoteConfig } } } = this;
        return feesAndCommit(baseID, quoteID, baseFees, quoteFees, lotSize, baseLots, quoteLots, baseFeeID, quoteFeeID, baseIsAccountLocker, quoteIsAccountLocker, baseConfig.orderReservesFactor, quoteConfig.orderReservesFactor);
    }
    /*
     * projectedAllocations calculates the required asset allocations from the
     * user's configuration settings and the current market state.
     */
    projectedAllocations() {
        const { cfg: { uiConfig: { quoteConfig, baseConfig } }, baseFactor, quoteFactor, baseID, quoteID, lotSizeConv, quoteLotConv, baseFeeFactor, quoteFeeFactor, baseFeeID, quoteFeeID, baseToken, quoteToken, cexName } = this;
        const { commit, fees } = this.feesAndCommit();
        const bProj = emptyProjection();
        const qProj = emptyProjection();
        bProj.book = commit.dex.base.lots * lotSizeConv;
        qProj.book = commit.cex.base.lots * quoteLotConv;
        bProj.orderReserves = Math.max(commit.cex.base.val, commit.dex.base.val) * baseConfig.orderReservesFactor / baseFactor;
        qProj.orderReserves = Math.max(commit.cex.quote.val, commit.dex.quote.val) * quoteConfig.orderReservesFactor / quoteFactor;
        if (cexName) {
            bProj.cex = commit.cex.base.lots * lotSizeConv;
            qProj.cex = commit.cex.quote.lots * quoteLotConv;
        }
        bProj.bookingFees = fees.base.bookingFees / baseFeeFactor;
        qProj.bookingFees = fees.quote.bookingFees / quoteFeeFactor;
        if (baseToken)
            bProj.swapFeeReserves = fees.base.tokenFeesPerSwap * baseConfig.swapFeeN / baseFeeFactor;
        if (quoteToken)
            qProj.swapFeeReserves = fees.quote.tokenFeesPerSwap * quoteConfig.swapFeeN / quoteFeeFactor;
        qProj.slippageBuffer = (qProj.book + qProj.cex + qProj.orderReserves) * quoteConfig.slippageBufferFactor;
        const alloc = {};
        const addAlloc = (assetID, amt) => { var _a; alloc[assetID] = ((_a = alloc[assetID]) !== null && _a !== void 0 ? _a : 0) + amt; };
        addAlloc(baseID, Math.round((bProj.book + bProj.cex + bProj.orderReserves) * baseFactor));
        addAlloc(baseFeeID, Math.round((bProj.bookingFees + bProj.swapFeeReserves) * baseFeeFactor));
        addAlloc(quoteID, Math.round((qProj.book + qProj.cex + qProj.orderReserves + qProj.slippageBuffer) * quoteFactor));
        addAlloc(quoteFeeID, Math.round((qProj.bookingFees + qProj.swapFeeReserves) * quoteFeeFactor));
        return { qProj, bProj, alloc };
    }
    /*
     * fundingState examines the projected allocations and the user's wallet
     * balances to determine whether the user can fund the bot fully, unbalanced,
     * or starved, and what funding source options might be available.
     */
    fundingState() {
        const { proj: { bProj, qProj }, baseID, quoteID, baseFeeID, quoteFeeID, cfg: { uiConfig: { cexRebalance } }, cexName } = this;
        const { baseAvail, quoteAvail, dexBaseAvail, dexQuoteAvail, cexBaseAvail, cexQuoteAvail, dexBaseFeeAvail, dexQuoteFeeAvail } = this.adjustedBalances();
        const canRebalance = Boolean(cexName && cexRebalance);
        // Three possible states.
        // 1. We have the funding in the projection, and its in the right places.
        //    Give them some options for which wallet to pull order reserves from,
        //    but they can start immediately..
        // 2. We have the funding, but it's in the wrong place or the wrong asset,
        //    but we have deposits and withdraws enabled. We can offer them the
        //    option to start in an unbalanced state.
        // 3. We don't have the funds. We offer them an option to start in a
        //    starved state.
        const cexMinBaseAlloc = bProj.cex;
        let [dexMinBaseAlloc, transferableBaseAlloc, dexBaseFeeReq] = [bProj.book, 0, 0];
        // Only add booking fees if this is the fee asset.
        if (baseID === baseFeeID)
            dexMinBaseAlloc += bProj.bookingFees;
        // Base asset is a token.
        else
            dexBaseFeeReq += bProj.bookingFees + bProj.swapFeeReserves;
        // If we can rebalance, the order reserves could potentially be withdrawn.
        if (canRebalance)
            transferableBaseAlloc += bProj.orderReserves;
        // If we can't rebalance, order reserves are required in dex balance.
        else
            dexMinBaseAlloc += bProj.orderReserves;
        // Handle the special case where the base asset it the quote asset's fee
        // asset.
        if (baseID === quoteFeeID) {
            if (canRebalance)
                transferableBaseAlloc += qProj.bookingFees + qProj.swapFeeReserves;
            else
                dexMinBaseAlloc += qProj.bookingFees + qProj.swapFeeReserves;
        }
        let [dexMinQuoteAlloc, cexMinQuoteAlloc, transferableQuoteAlloc, dexQuoteFeeReq] = [qProj.book, qProj.cex, 0, 0];
        if (quoteID === quoteFeeID)
            dexMinQuoteAlloc += qProj.bookingFees;
        else
            dexQuoteFeeReq += qProj.bookingFees + qProj.swapFeeReserves;
        if (canRebalance)
            transferableQuoteAlloc += qProj.orderReserves + qProj.slippageBuffer;
        else {
            // The slippage reserves reserves should be split between cex and dex.
            dexMinQuoteAlloc += qProj.orderReserves;
            const basis = qProj.book + qProj.cex + qProj.orderReserves;
            dexMinQuoteAlloc += (qProj.book + qProj.orderReserves) / basis * qProj.slippageBuffer;
            cexMinQuoteAlloc += qProj.cex / basis * qProj.slippageBuffer;
        }
        if (quoteID === baseFeeID) {
            if (canRebalance)
                transferableQuoteAlloc += bProj.bookingFees + bProj.swapFeeReserves;
            else
                dexMinQuoteAlloc += bProj.bookingFees + bProj.swapFeeReserves;
        }
        const dexBaseFunded = dexBaseAvail >= dexMinBaseAlloc;
        const cexBaseFunded = cexBaseAvail >= cexMinBaseAlloc;
        const dexQuoteFunded = dexQuoteAvail >= dexMinQuoteAlloc;
        const cexQuoteFunded = cexQuoteAvail >= cexMinQuoteAlloc;
        const totalBaseReq = dexMinBaseAlloc + cexMinBaseAlloc + transferableBaseAlloc;
        const totalQuoteReq = dexMinQuoteAlloc + cexMinQuoteAlloc + transferableQuoteAlloc;
        const baseFundedAndBalanced = dexBaseFunded && cexBaseFunded && baseAvail >= totalBaseReq;
        const quoteFundedAndBalanced = dexQuoteFunded && cexQuoteFunded && quoteAvail >= totalQuoteReq;
        const baseFeesFunded = dexBaseFeeAvail >= dexBaseFeeReq;
        const quoteFeesFunded = dexQuoteFeeAvail >= dexQuoteFeeReq;
        const fundedAndBalanced = baseFundedAndBalanced && quoteFundedAndBalanced && baseFeesFunded && quoteFeesFunded;
        // Are we funded but not balanced, but able to rebalance with a cex?
        let fundedAndNotBalanced = !fundedAndBalanced;
        if (!fundedAndBalanced) {
            const ordersFunded = baseAvail >= totalBaseReq && quoteAvail >= totalQuoteReq;
            const feesFunded = baseFeesFunded && quoteFeesFunded;
            fundedAndNotBalanced = ordersFunded && feesFunded && canRebalance;
        }
        return {
            base: {
                dex: {
                    avail: dexBaseAvail,
                    req: dexMinBaseAlloc,
                    funded: dexBaseFunded
                },
                cex: {
                    avail: cexBaseAvail,
                    req: cexMinBaseAlloc,
                    funded: cexBaseFunded
                },
                transferable: transferableBaseAlloc,
                fees: {
                    avail: dexBaseFeeAvail,
                    req: dexBaseFeeReq,
                    funded: baseFeesFunded
                },
                fundedAndBalanced: baseFundedAndBalanced,
                fundedAndNotBalanced: !baseFundedAndBalanced && baseAvail >= totalBaseReq && canRebalance
            },
            quote: {
                dex: {
                    avail: dexQuoteAvail,
                    req: dexMinQuoteAlloc,
                    funded: dexQuoteFunded
                },
                cex: {
                    avail: cexQuoteAvail,
                    req: cexMinQuoteAlloc,
                    funded: cexQuoteFunded
                },
                transferable: transferableQuoteAlloc,
                fees: {
                    avail: dexQuoteFeeAvail,
                    req: dexQuoteFeeReq,
                    funded: quoteFeesFunded
                },
                fundedAndBalanced: quoteFundedAndBalanced,
                fundedAndNotBalanced: !quoteFundedAndBalanced && quoteAvail >= totalQuoteReq && canRebalance
            },
            fundedAndBalanced,
            fundedAndNotBalanced,
            starved: !fundedAndBalanced && !fundedAndNotBalanced
        };
    }
}
class RunningMarketMakerDisplay {
    constructor(div, forms, orderReportForm, page) {
        this.div = div;
        this.page = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(div);
        this.orderReportFormEl = orderReportForm;
        this.orderReportForm = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].idDescendants(orderReportForm);
        this.dexBalancesRowTmpl = this.orderReportForm.dexBalancesRowTmpl;
        this.placementRowTmpl = this.orderReportForm.placementRowTmpl;
        this.placementAmtRowTmpl = this.orderReportForm.placementAmtRowTmpl;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].cleanTemplates(this.dexBalancesRowTmpl, this.placementRowTmpl, this.placementAmtRowTmpl);
        this.forms = forms;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(this.page.stopBttn, 'click', () => this.stop());
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(this.page.runLogsBttn, 'click', () => {
            const { mkt: { baseID, quoteID, host }, startTime } = this;
            (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loadPage('mmlogs', { baseID, quoteID, host, startTime, returnPage: page });
        });
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(this.page.buyOrdersBttn, 'click', () => this.showOrderReport('buys'));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].bind(this.page.sellOrdersBttn, 'click', () => this.showOrderReport('sells'));
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, mkt: { host, baseID, quoteID } } = this;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().loading(page.stopBttn);
            yield MM.stopBot({ host, baseID: baseID, quoteID: quoteID });
            loaded();
        });
    }
    setMarket(host, baseID, quoteID) {
        return __awaiter(this, void 0, void 0, function* () {
            const botStatus = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().mmStatus.bots.find(({ config: c }) => c.baseID === baseID && c.quoteID === quoteID && c.host === host);
            if (!botStatus)
                return;
            const mkt = new BotMarket(botStatus.config);
            yield mkt.initialize({});
            this.setBotMarket(mkt);
        });
    }
    setBotMarket(mkt) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            this.mkt = mkt;
            const { page, div, mkt: { host, baseID, quoteID, baseFeeID, quoteFeeID, cexName, baseFeeSymbol, quoteFeeSymbol, baseFeeTicker, quoteFeeTicker, cfg, baseFactor, quoteFactor } } = this;
            setMarketElements(div, baseID, quoteID, host);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseFeeID !== baseID, page.baseFeeReservesBox);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(quoteFeeID !== quoteID, page.quoteFeeReservesBox);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(Boolean(cexName), ..._doc__WEBPACK_IMPORTED_MODULE_2__["default"].applySelector(div, '[data-cex-show]'));
            page.baseFeeLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(baseFeeSymbol);
            page.baseFeeTicker.textContent = baseFeeTicker;
            page.quoteFeeLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(quoteFeeSymbol);
            page.quoteFeeTicker.textContent = quoteFeeTicker;
            const basicCfg = cfg.basicMarketMakingConfig;
            const gapStrategy = (_a = basicCfg === null || basicCfg === void 0 ? void 0 : basicCfg.gapStrategy) !== null && _a !== void 0 ? _a : GapStrategyPercent;
            let gapFactor = (_e = (_c = (_b = cfg.arbMarketMakingConfig) === null || _b === void 0 ? void 0 : _b.profit) !== null && _c !== void 0 ? _c : (_d = cfg.simpleArbConfig) === null || _d === void 0 ? void 0 : _d.profitTrigger) !== null && _e !== void 0 ? _e : 0;
            if (basicCfg) {
                const buys = [...basicCfg.buyPlacements].sort((a, b) => a.gapFactor - b.gapFactor);
                const sells = [...basicCfg.sellPlacements].sort((a, b) => a.gapFactor - b.gapFactor);
                if (buys.length > 0) {
                    if (sells.length > 0) {
                        gapFactor = (buys[0].gapFactor + sells[0].gapFactor) / 2;
                    }
                    else {
                        gapFactor = buys[0].gapFactor;
                    }
                }
                else
                    gapFactor = sells[0].gapFactor;
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(page.profitLabel, page.gapLabel, page.multiplierLabel, page.profitUnit, page.gapUnit, page.multiplierUnit);
            switch (gapStrategy) {
                case GapStrategyPercent:
                case GapStrategyPercentPlus:
                    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.profitLabel, page.profitUnit);
                    page.gapFactor.textContent = (gapFactor * 100).toFixed(2);
                    break;
                case GapStrategyMultiplier:
                    _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.multiplierLabel, page.multiplierUnit);
                    page.gapFactor.textContent = (gapFactor * 100).toFixed(2);
                    break;
                default:
                    page.gapFactor.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(gapFactor / _orderutil__WEBPACK_IMPORTED_MODULE_3__.RateEncodingFactor * baseFactor / quoteFactor);
            }
            this.update();
            this.readBook();
        });
    }
    handleBalanceNote(n) {
        if (!this.mkt)
            return;
        const { baseID, quoteID, baseFeeID, quoteFeeID } = this.mkt;
        if (n.assetID !== baseID && n.assetID !== baseFeeID && n.assetID !== quoteID && n.assetID !== quoteFeeID)
            return;
        this.update();
    }
    handleEpochReportNote(n) {
        if (!this.mkt)
            return;
        const { baseID, quoteID, host } = this.mkt;
        if (n.baseID !== baseID || n.quoteID !== quoteID || n.host !== host)
            return;
        if (!n.report)
            return;
        this.latestEpoch = n.report;
        if (this.forms.currentForm === this.orderReportFormEl) {
            const orderReport = this.displayedSide === 'buys' ? n.report.buysReport : n.report.sellsReport;
            if (orderReport)
                this.updateOrderReport(orderReport, this.displayedSide, n.report.epochNum);
            else
                this.forms.close();
        }
        this.update();
    }
    handleCexProblemsNote(n) {
        if (!this.mkt)
            return;
        const { baseID, quoteID, host } = this.mkt;
        if (n.baseID !== baseID || n.quoteID !== quoteID || n.host !== host)
            return;
        this.cexProblems = n.problems;
        this.update();
    }
    setTicker() {
        this.page.runTime.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hmsSince(this.startTime);
    }
    update() {
        var _a, _b, _c, _d;
        const { div, page, mkt: { baseID, quoteID, baseFeeID, quoteFeeID, baseFactor, quoteFactor, baseFeeFactor, quoteFeeFactor, marketReport: { baseFiatRate, quoteFiatRate } } } = this;
        // Get fresh stats
        const { botCfg: { cexName, basicMarketMakingConfig: bmmCfg }, runStats, latestEpoch, cexProblems } = this.mkt.status();
        if (latestEpoch)
            this.latestEpoch = latestEpoch;
        if (cexProblems)
            this.cexProblems = cexProblems;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].hide(page.stats, page.cexRow, page.pendingDepositBox, page.pendingWithdrawalBox);
        if (!runStats) {
            if (this.ticker) {
                clearInterval(this.ticker);
                this.ticker = undefined;
            }
            return;
        }
        else if (!this.ticker) {
            this.startTime = runStats.startTime;
            this.setTicker();
            this.ticker = setInterval(() => this.setTicker(), 1000);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.stats);
        setSignedValue(runStats.profitLoss.profitRatio * 100, page.profit, page.profitSign, 2);
        setSignedValue(runStats.profitLoss.profit, page.profitLoss, page.plSign, 2);
        this.startTime = runStats.startTime;
        const summedBalance = (b) => {
            if (!b)
                return 0;
            return b.available + b.locked + b.pending + b.reserved;
        };
        const dexBaseInv = summedBalance(runStats.dexBalances[baseID]) / baseFactor;
        page.walletBaseInventory.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dexBaseInv);
        page.walletBaseInvFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dexBaseInv * baseFiatRate, 2);
        const dexQuoteInv = summedBalance(runStats.dexBalances[quoteID]) / quoteFactor;
        page.walletQuoteInventory.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dexQuoteInv);
        page.walletQuoteInvFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(dexQuoteInv * quoteFiatRate, 2);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(cexName, page.cexRow);
        if (cexName) {
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].show(page.pendingDepositBox, page.pendingWithdrawalBox);
            setCexElements(div, cexName);
            const cexBaseInv = summedBalance(runStats.cexBalances[baseID]) / baseFactor;
            page.cexBaseInventory.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cexBaseInv);
            page.cexBaseInventoryFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cexBaseInv * baseFiatRate, 2);
            const cexQuoteInv = summedBalance(runStats.cexBalances[quoteID]) / quoteFactor;
            page.cexQuoteInventory.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cexQuoteInv);
            page.cexQuoteInventoryFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(cexQuoteInv * quoteFiatRate, 2);
        }
        if (baseFeeID !== baseID) {
            const feeBalance = summedBalance(runStats.dexBalances[baseFeeID]) / baseFeeFactor;
            page.baseFeeReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(feeBalance);
        }
        if (quoteFeeID !== quoteID) {
            const feeBalance = summedBalance(runStats.dexBalances[quoteFeeID]) / quoteFeeFactor;
            page.quoteFeeReserves.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(feeBalance);
        }
        page.pendingDeposits.textContent = String(Math.round(runStats.pendingDeposits));
        page.pendingWithdrawals.textContent = String(Math.round(runStats.pendingWithdrawals));
        page.completedMatches.textContent = String(Math.round(runStats.completedMatches));
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(runStats.tradedUSD, page.tradedUSDBox);
        if (runStats.tradedUSD > 0)
            page.tradedUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(runStats.tradedUSD);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(baseFiatRate, page.roundTripFeesBox);
        if (baseFiatRate)
            page.roundTripFeesUSD.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs((((_a = runStats.feeGap) === null || _a === void 0 ? void 0 : _a.roundTripFees) / baseFactor * baseFiatRate) || 0);
        const basisPrice = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().conventionalRate(baseID, quoteID, ((_b = runStats.feeGap) === null || _b === void 0 ? void 0 : _b.basisPrice) || 0);
        page.basisPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(basisPrice);
        const displayFeeGap = !bmmCfg || bmmCfg.gapStrategy === GapStrategyAbsolutePlus || bmmCfg.gapStrategy === GapStrategyPercentPlus;
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(displayFeeGap, page.feeGapBox);
        if (displayFeeGap) {
            const feeGap = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().conventionalRate(baseID, quoteID, ((_c = runStats.feeGap) === null || _c === void 0 ? void 0 : _c.feeGap) || 0);
            page.feeGap.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(feeGap);
            page.feeGapPct.textContent = (feeGap / basisPrice * 100 || 0).toFixed(2);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(bmmCfg, page.gapStrategyBox);
        if (bmmCfg)
            page.gapStrategy.textContent = bmmCfg.gapStrategy;
        const remoteGap = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().conventionalRate(baseID, quoteID, ((_d = runStats.feeGap) === null || _d === void 0 ? void 0 : _d.remoteGap) || 0);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(remoteGap, page.remoteGapBox);
        if (remoteGap) {
            page.remoteGap.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(remoteGap);
            page.remoteGapPct.textContent = (remoteGap / basisPrice * 100 || 0).toFixed(2);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(latestEpoch === null || latestEpoch === void 0 ? void 0 : latestEpoch.buysReport, page.buyOrdersReportBox);
        if (latestEpoch === null || latestEpoch === void 0 ? void 0 : latestEpoch.buysReport) {
            const allPlaced = allOrdersPlaced(latestEpoch.buysReport);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(allPlaced, page.buyOrdersSuccess);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!allPlaced, page.buyOrdersFailed);
        }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(latestEpoch === null || latestEpoch === void 0 ? void 0 : latestEpoch.sellsReport, page.sellOrdersReportBox);
        if (latestEpoch === null || latestEpoch === void 0 ? void 0 : latestEpoch.sellsReport) {
            const allPlaced = allOrdersPlaced(latestEpoch.sellsReport);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(allPlaced, page.sellOrdersSuccess);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!allPlaced, page.sellOrdersFailed);
        }
        const preOrderProblemMessages = botProblemMessages(latestEpoch === null || latestEpoch === void 0 ? void 0 : latestEpoch.preOrderProblems, this.mkt.cexName, this.mkt.host);
        const cexErrorMessages = cexProblemMessages(this.cexProblems);
        const allMessages = [...preOrderProblemMessages, ...cexErrorMessages];
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(allMessages.length > 0, page.preOrderProblemsBox);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].empty(page.preOrderProblemsBox);
        for (const msg of allMessages) {
            const spanEl = document.createElement('span');
            spanEl.textContent = `- ${msg}`;
            page.preOrderProblemsBox.appendChild(spanEl);
        }
    }
    updateOrderReport(report, side, epochNum) {
        const form = this.orderReportForm;
        const sideTxt = side === 'buys' ? _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_BUY) : _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_SELL);
        form.orderReportTitle.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ORDER_REPORT_TITLE, { side: sideTxt, epochNum: `${epochNum}` });
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(report.error, form.orderReportError);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(!report.error, form.orderReportDetails);
        if (report.error) {
            const problemMessages = botProblemMessages(report.error, this.mkt.cexName, this.mkt.host);
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].empty(form.orderReportError);
            for (const msg of problemMessages) {
                const spanEl = document.createElement('span');
                spanEl.textContent = `- ${msg}`;
                form.orderReportError.appendChild(spanEl);
            }
            return;
        }
        form.cexLogo.src = CEXDisplayInfos[this.mkt.cexName].logo;
        form.cexBalancesTitle.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CEX_BALANCES, { cexName: CEXDisplayInfos[this.mkt.cexName].name });
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].empty(form.dexBalancesBody, form.placementsBody);
        const createRow = (assetID) => {
            const row = this.dexBalancesRowTmpl.cloneNode(true);
            const rowTmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(row);
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
            rowTmpl.asset.textContent = asset.symbol.toUpperCase();
            rowTmpl.assetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(asset.symbol);
            const unitInfo = asset.unitInfo;
            const available = report.availableDexBals[assetID] ? report.availableDexBals[assetID].available : 0;
            const required = report.requiredDexBals[assetID] ? report.requiredDexBals[assetID] : 0;
            const remaining = report.remainingDexBals[assetID] ? report.remainingDexBals[assetID] : 0;
            const pending = report.availableDexBals[assetID] ? report.availableDexBals[assetID].pending : 0;
            const locked = report.availableDexBals[assetID] ? report.availableDexBals[assetID].locked : 0;
            const used = report.usedDexBals[assetID] ? report.usedDexBals[assetID] : 0;
            rowTmpl.available.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(available, unitInfo);
            rowTmpl.locked.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(locked, unitInfo);
            rowTmpl.required.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(required, unitInfo);
            rowTmpl.remaining.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(remaining, unitInfo);
            rowTmpl.pending.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(pending, unitInfo);
            rowTmpl.used.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(used, unitInfo);
            const deficiency = safeSub(required, available);
            rowTmpl.deficiency.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(deficiency, unitInfo);
            if (deficiency > 0)
                rowTmpl.deficiency.classList.add('text-danger');
            const deficiencyWithPending = safeSub(deficiency, pending);
            rowTmpl.deficiencyWithPending.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(deficiencyWithPending, unitInfo);
            if (deficiencyWithPending > 0)
                rowTmpl.deficiencyWithPending.classList.add('text-danger');
            return [row, deficiency];
        };
        const setDeficiencyVisibility = (deficiency, rows) => {
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(deficiency, form.dexDeficiencyHeader, form.dexDeficiencyWithPendingHeader);
            for (const row of rows) {
                const rowTmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(row);
                _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(deficiency, rowTmpl.deficiency, rowTmpl.deficiencyWithPending);
            }
        };
        const assetIDs = [this.mkt.baseID, this.mkt.quoteID];
        if (!assetIDs.includes(this.mkt.baseFeeID))
            assetIDs.push(this.mkt.baseFeeID);
        if (!assetIDs.includes(this.mkt.quoteFeeID))
            assetIDs.push(this.mkt.quoteFeeID);
        let totalDeficiency = 0;
        const rows = [];
        for (const assetID of assetIDs) {
            const [row, deficiency] = createRow(assetID);
            totalDeficiency += deficiency;
            form.dexBalancesBody.appendChild(row);
            rows.push(row);
        }
        setDeficiencyVisibility(totalDeficiency > 0, rows);
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(this.mkt.cexName, form.cexBalancesTable, form.counterTradeRateHeader);
        let cexAsset;
        if (this.mkt.cexName) {
            const cexAssetID = side === 'buys' ? this.mkt.baseID : this.mkt.quoteID;
            cexAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[cexAssetID];
            form.cexAsset.textContent = cexAsset.symbol.toUpperCase();
            form.cexAssetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(cexAsset.symbol);
            const availableCexBal = report.availableCexBal ? report.availableCexBal.available : 0;
            const requiredCexBal = report.requiredCexBal ? report.requiredCexBal : 0;
            const remainingCexBal = report.remainingCexBal ? report.remainingCexBal : 0;
            const pendingCexBal = report.availableCexBal ? report.availableCexBal.pending : 0;
            const reservedCexBal = report.availableCexBal ? report.availableCexBal.reserved : 0;
            const usedCexBal = report.usedCexBal ? report.usedCexBal : 0;
            const deficiencyCexBal = safeSub(requiredCexBal, availableCexBal);
            const deficiencyWithPendingCexBal = safeSub(deficiencyCexBal, pendingCexBal);
            form.cexAvailable.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(availableCexBal, cexAsset.unitInfo);
            form.cexLocked.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(reservedCexBal, cexAsset.unitInfo);
            form.cexRequired.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(requiredCexBal, cexAsset.unitInfo);
            form.cexRemaining.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(remainingCexBal, cexAsset.unitInfo);
            form.cexPending.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(pendingCexBal, cexAsset.unitInfo);
            form.cexUsed.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(usedCexBal, cexAsset.unitInfo);
            const deficient = deficiencyCexBal > 0;
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(deficient, form.cexDeficiencyHeader, form.cexDeficiencyWithPendingHeader, form.cexDeficiency, form.cexDeficiencyWithPending);
            if (deficient) {
                form.cexDeficiency.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(deficiencyCexBal, cexAsset.unitInfo);
                form.cexDeficiencyWithPending.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(deficiencyWithPendingCexBal, cexAsset.unitInfo);
            }
        }
        let anyErrors = false;
        for (const placement of report.placements)
            if (placement.error) {
                anyErrors = true;
                break;
            }
        _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(anyErrors, form.errorHeader);
        const createPlacementRow = (placement, priority) => {
            const row = this.placementRowTmpl.cloneNode(true);
            const rowTmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(row);
            const baseUI = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.mkt.baseID].unitInfo;
            const quoteUI = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[this.mkt.quoteID].unitInfo;
            rowTmpl.priority.textContent = String(priority);
            rowTmpl.rate.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatRateFullPrecision(placement.rate, baseUI, quoteUI, this.mkt.rateStep);
            rowTmpl.lots.textContent = String(placement.lots);
            rowTmpl.standingLots.textContent = String(placement.standingLots);
            rowTmpl.orderedLots.textContent = String(placement.orderedLots);
            if (placement.standingLots + placement.orderedLots < placement.lots) {
                rowTmpl.lots.classList.add('text-danger');
                rowTmpl.standingLots.classList.add('text-danger');
                rowTmpl.orderedLots.classList.add('text-danger');
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(placement.counterTradeRate > 0, rowTmpl.counterTradeRate);
            rowTmpl.counterTradeRate.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatRateFullPrecision(placement.counterTradeRate, baseUI, quoteUI, this.mkt.rateStep);
            for (const assetID of assetIDs) {
                const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[assetID];
                const unitInfo = asset.unitInfo;
                const requiredAmt = placement.requiredDex[assetID] ? placement.requiredDex[assetID] : 0;
                const usedAmt = placement.usedDex[assetID] ? placement.usedDex[assetID] : 0;
                const requiredRow = this.placementAmtRowTmpl.cloneNode(true);
                const requiredRowTmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(requiredRow);
                const usedRow = this.placementAmtRowTmpl.cloneNode(true);
                const usedRowTmpl = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].parseTemplate(usedRow);
                requiredRowTmpl.amt.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(requiredAmt, unitInfo);
                requiredRowTmpl.assetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(asset.symbol);
                requiredRowTmpl.assetSymbol.textContent = asset.symbol.toUpperCase();
                usedRowTmpl.amt.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(usedAmt, unitInfo);
                usedRowTmpl.assetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].logoPath(asset.symbol);
                usedRowTmpl.assetSymbol.textContent = asset.symbol.toUpperCase();
                rowTmpl.requiredDEX.appendChild(requiredRow);
                rowTmpl.usedDEX.appendChild(usedRow);
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(this.mkt.cexName, rowTmpl.requiredCEX, rowTmpl.usedCEX);
            if (this.mkt.cexName) {
                const requiredAmt = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(placement.requiredCex, cexAsset.unitInfo);
                rowTmpl.requiredCEX.textContent = `${requiredAmt} ${cexAsset.symbol.toUpperCase()}`;
                const usedAmt = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatCoinValue(placement.usedCex, cexAsset.unitInfo);
                rowTmpl.usedCEX.textContent = `${usedAmt} ${cexAsset.symbol.toUpperCase()}`;
            }
            _doc__WEBPACK_IMPORTED_MODULE_2__["default"].setVis(anyErrors, rowTmpl.error);
            if (placement.error) {
                const errMessages = botProblemMessages(placement.error, this.mkt.cexName, this.mkt.host);
                rowTmpl.error.textContent = errMessages.join('\n');
            }
            return row;
        };
        for (let i = 0; i < report.placements.length; i++) {
            form.placementsBody.appendChild(createPlacementRow(report.placements[i], i + 1));
        }
    }
    showOrderReport(side) {
        if (!this.latestEpoch)
            return;
        const report = side === 'buys' ? this.latestEpoch.buysReport : this.latestEpoch.sellsReport;
        if (!report)
            return;
        this.updateOrderReport(report, side, this.latestEpoch.epochNum);
        this.displayedSide = side;
        this.forms.show(this.orderReportFormEl);
    }
    readBook() {
        if (!this.mkt)
            return;
        const { page, mkt: { host, mktID } } = this;
        const orders = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().exchanges[host].markets[mktID].orders || [];
        page.nBookedOrders.textContent = String(orders.filter((ord) => ord.status === _orderutil__WEBPACK_IMPORTED_MODULE_3__.StatusBooked).length);
    }
}
function allOrdersPlaced(report) {
    if (report.error)
        return false;
    for (let i = 0; i < report.placements.length; i++) {
        const placement = report.placements[i];
        if (placement.orderedLots + placement.standingLots < placement.lots)
            return false;
        if (placement.error)
            return false;
    }
    return true;
}
function setSignedValue(v, vEl, signEl, maxDecimals) {
    vEl.textContent = _doc__WEBPACK_IMPORTED_MODULE_2__["default"].formatFourSigFigs(v, maxDecimals);
    signEl.classList.toggle('ico-plus', v > 0);
    signEl.classList.toggle('text-good', v > 0);
    // signEl.classList.toggle('ico-minus', v < 0)
}
function feesAndCommit(baseID, quoteID, baseFees, quoteFees, lotSize, baseLots, quoteLots, baseFeeID, quoteFeeID, baseIsAccountLocker, quoteIsAccountLocker, baseOrderReservesFactor, quoteOrderReservesFactor) {
    const quoteLot = calculateQuoteLot(lotSize, baseID, quoteID);
    const [cexBaseLots, cexQuoteLots] = [quoteLots, baseLots];
    const commit = {
        dex: {
            base: {
                lots: baseLots,
                val: baseLots * lotSize
            },
            quote: {
                lots: quoteLots,
                val: quoteLots * quoteLot
            }
        },
        cex: {
            base: {
                lots: cexBaseLots,
                val: cexBaseLots * lotSize
            },
            quote: {
                lots: cexQuoteLots,
                val: cexQuoteLots * quoteLot
            }
        }
    };
    let baseTokenFeesPerSwap = 0;
    let baseRedeemReservesPerLot = 0;
    if (baseID !== baseFeeID) { // token
        baseTokenFeesPerSwap += baseFees.estimated.swap;
        if (baseFeeID === quoteFeeID)
            baseTokenFeesPerSwap += quoteFees.estimated.redeem;
    }
    let baseBookingFeesPerLot = baseFees.max.swap;
    if (baseID === quoteFeeID)
        baseBookingFeesPerLot += quoteFees.max.redeem;
    if (baseIsAccountLocker) {
        baseBookingFeesPerLot += baseFees.max.refund;
        if (!quoteIsAccountLocker && baseFeeID !== quoteFeeID)
            baseRedeemReservesPerLot = baseFees.max.redeem;
    }
    let quoteTokenFeesPerSwap = 0;
    let quoteRedeemReservesPerLot = 0;
    if (quoteID !== quoteFeeID) {
        quoteTokenFeesPerSwap += quoteFees.estimated.swap;
        if (quoteFeeID === baseFeeID)
            quoteTokenFeesPerSwap += baseFees.estimated.redeem;
    }
    let quoteBookingFeesPerLot = quoteFees.max.swap;
    if (quoteID === baseFeeID)
        quoteBookingFeesPerLot += baseFees.max.redeem;
    if (quoteIsAccountLocker) {
        quoteBookingFeesPerLot += quoteFees.max.refund;
        if (!baseIsAccountLocker && quoteFeeID !== baseFeeID)
            quoteRedeemReservesPerLot = quoteFees.max.redeem;
    }
    const baseReservesFactor = 1 + baseOrderReservesFactor;
    const quoteReservesFactor = 1 + quoteOrderReservesFactor;
    const baseBookingFees = (baseBookingFeesPerLot * baseLots) * baseReservesFactor;
    const baseRedeemFees = (baseRedeemReservesPerLot * quoteLots) * quoteReservesFactor;
    const quoteBookingFees = (quoteBookingFeesPerLot * quoteLots) * quoteReservesFactor;
    const quoteRedeemFees = (quoteRedeemReservesPerLot * baseLots) * baseReservesFactor;
    const fees = {
        base: Object.assign(Object.assign({}, baseFees), { bookingFeesPerLot: baseBookingFeesPerLot, bookingFeesPerCounterLot: baseRedeemReservesPerLot, bookingFees: baseBookingFees + baseRedeemFees, swapReservesFactor: baseReservesFactor, redeemReservesFactor: quoteReservesFactor, tokenFeesPerSwap: baseTokenFeesPerSwap }),
        quote: Object.assign(Object.assign({}, quoteFees), { bookingFeesPerLot: quoteBookingFeesPerLot, bookingFeesPerCounterLot: quoteRedeemReservesPerLot, bookingFees: quoteBookingFees + quoteRedeemFees, swapReservesFactor: quoteReservesFactor, redeemReservesFactor: baseReservesFactor, tokenFeesPerSwap: quoteTokenFeesPerSwap })
    };
    return { commit, fees };
}
function botProblemMessages(problems, cexName, dexHost) {
    if (!problems)
        return [];
    const msgs = [];
    if (problems.walletNotSynced) {
        for (const [assetID, notSynced] of Object.entries(problems.walletNotSynced)) {
            if (notSynced) {
                msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_NOT_SYNCED, { assetSymbol: (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[Number(assetID)].symbol.toUpperCase() }));
            }
        }
    }
    if (problems.noWalletPeers) {
        for (const [assetID, noPeers] of Object.entries(problems.noWalletPeers)) {
            if (noPeers) {
                msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_NO_PEERS, { assetSymbol: (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[Number(assetID)].symbol.toUpperCase() }));
            }
        }
    }
    if (problems.accountSuspended) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ACCOUNT_SUSPENDED, { dexHost: dexHost }));
    }
    if (problems.userLimitTooLow) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_USER_LIMIT_TOO_LOW, { dexHost: dexHost }));
    }
    if (problems.noPriceSource) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NO_PRICE_SOURCE));
    }
    if (problems.cexOrderbookUnsynced) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CEX_ORDERBOOK_UNSYNCED, { cexName: cexName }));
    }
    if (problems.causesSelfMatch) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CAUSES_SELF_MATCH));
    }
    return msgs;
}
function cexProblemMessages(problems) {
    if (!problems)
        return [];
    const msgs = [];
    if (problems.depositErr) {
        for (const [assetID, depositErr] of Object.entries(problems.depositErr)) {
            msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_DEPOSIT_ERROR, {
                assetSymbol: (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[Number(assetID)].symbol.toUpperCase(),
                time: new Date(depositErr.stamp * 1000).toLocaleString(),
                error: depositErr.error
            }));
        }
    }
    if (problems.withdrawErr) {
        for (const [assetID, withdrawErr] of Object.entries(problems.withdrawErr)) {
            msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WITHDRAW_ERROR, {
                assetSymbol: (0,_registry__WEBPACK_IMPORTED_MODULE_0__.app)().assets[Number(assetID)].symbol.toUpperCase(),
                time: new Date(withdrawErr.stamp * 1000).toLocaleString(),
                error: withdrawErr.error
            }));
        }
    }
    if (problems.tradeErr) {
        msgs.push(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CEX_TRADE_ERROR, {
            time: new Date(problems.tradeErr.stamp * 1000).toLocaleString(),
            error: problems.tradeErr.error
        }));
    }
    return msgs;
}
function safeSub(a, b) {
    return a - b > 0 ? a - b : 0;
}
window.mmstatus = function () {
    return MM.status();
};


/***/ }),

/***/ "./src/js/notifications.ts":
/*!*********************************!*\
  !*** ./src/js/notifications.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DATA": () => (/* binding */ DATA),
/* harmony export */   "ERROR": () => (/* binding */ ERROR),
/* harmony export */   "IGNORE": () => (/* binding */ IGNORE),
/* harmony export */   "Notifier": () => (/* binding */ Notifier),
/* harmony export */   "POKE": () => (/* binding */ POKE),
/* harmony export */   "SUCCESS": () => (/* binding */ SUCCESS),
/* harmony export */   "WARNING": () => (/* binding */ WARNING),
/* harmony export */   "defaultDesktopNtfnSettings": () => (/* binding */ defaultDesktopNtfnSettings),
/* harmony export */   "desktopNotify": () => (/* binding */ desktopNotify),
/* harmony export */   "desktopNtfnLabels": () => (/* binding */ desktopNtfnLabels),
/* harmony export */   "fetchDesktopNtfnSettings": () => (/* binding */ fetchDesktopNtfnSettings),
/* harmony export */   "insertRichNote": () => (/* binding */ insertRichNote),
/* harmony export */   "make": () => (/* binding */ make),
/* harmony export */   "plainNote": () => (/* binding */ plainNote),
/* harmony export */   "updateNtfnSetting": () => (/* binding */ updateNtfnSetting)
/* harmony export */ });
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const IGNORE = 0;
const DATA = 1;
const POKE = 2;
const SUCCESS = 3;
const WARNING = 4;
const ERROR = 5;
/*
 * make constructs a new notification. The notification structure is a mirror of
 * the structure of notifications sent from the web server.
 * NOTE: I'm hoping to make this function obsolete, since errors generated in
 * javascript should usually be displayed/cached somewhere better. For example,
 * if the error is generated during submission of a form, the error should be
 * displayed on or near the form itself, not in the notifications.
 */
function make(subject, details, severity) {
    return {
        subject: subject,
        details: details,
        severity: severity,
        stamp: new Date().getTime(),
        acked: false,
        type: 'internal',
        topic: 'internal',
        id: ''
    };
}
const NoteTypeOrder = 'order';
const NoteTypeMatch = 'match';
const NoteTypeBondPost = 'bondpost';
const NoteTypeConnEvent = 'conn';
function desktopNtfnSettingsKey() {
    return `desktop_notifications-${window.location.host}`;
}
const desktopNtfnLabels = {
    [NoteTypeOrder]: _locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_ORDERS,
    [NoteTypeMatch]: _locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_MATCHES,
    [NoteTypeBondPost]: _locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_BONDS,
    [NoteTypeConnEvent]: _locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_CONNECTIONS
};
const defaultDesktopNtfnSettings = {
    [NoteTypeOrder]: true,
    [NoteTypeMatch]: true,
    [NoteTypeBondPost]: true,
    [NoteTypeConnEvent]: true
};
let desktopNtfnSettings;
// BrowserNotifier is a wrapper around the browser's notification API.
class BrowserNotifier {
    static ntfnPermissionGranted() {
        return window.Notification.permission === 'granted';
    }
    static ntfnPermissionDenied() {
        return window.Notification.permission === 'denied';
    }
    static requestNtfnPermission() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!('Notification' in window)) {
                return;
            }
            if (BrowserNotifier.ntfnPermissionGranted()) {
                BrowserNotifier.sendDesktopNotification(_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_ENABLED));
            }
            else if (!BrowserNotifier.ntfnPermissionDenied()) {
                yield Notification.requestPermission();
                BrowserNotifier.sendDesktopNotification(_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_ENABLED));
            }
        });
    }
    static sendDesktopNotification(title, body) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!BrowserNotifier.ntfnPermissionGranted())
                return;
            const ntfn = new window.Notification(title, {
                body: body,
                icon: '/img/softened-icon.png'
            });
            return ntfn;
        });
    }
}
// OSDesktopNotifier manages OS desktop notifications via the same interface
// as BrowserNotifier, but sends notifications using an underlying Go
// notification library exposed to the webview.
class OSDesktopNotifier {
    static ntfnPermissionGranted() {
        return true;
    }
    static ntfnPermissionDenied() {
        return false;
    }
    static requestNtfnPermission() {
        return __awaiter(this, void 0, void 0, function* () {
            yield OSDesktopNotifier.sendDesktopNotification(_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_BROWSER_NTFN_ENABLED));
            return Promise.resolve();
        });
    }
    static sendDesktopNotification(title, body) {
        return __awaiter(this, void 0, void 0, function* () {
            // webview/linux or webview/windows
            if (isDesktopWebview())
                yield window.sendOSNotification(title, body);
            // webkit/darwin
            // See: client/cmd/bisonw-desktop/app_darwin.go#L673-#L697
            else if (isDesktopWebkit())
                yield window.webkit.messageHandlers.bwHandler.postMessage(['sendOSNotification', title, body]);
            else
                console.error('sendDesktopNotification: unknown environment');
        });
    }
}
// isDesktopWebview checks if we are running in webview
function isDesktopWebview() {
    return window.isWebview !== undefined;
}
// isDesktopDarwin returns true if we are running in a webview on darwin
// It tests for the existence of the bwHandler webkit message handler.
function isDesktopWebkit() {
    var _a, _b;
    return ((_b = (_a = window.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bwHandler) !== undefined;
}
// determine whether we're running in a webview or in browser, and export
// the appropriate notifier accordingly.
const Notifier = isDesktopWebview() || isDesktopWebkit() ? OSDesktopNotifier : BrowserNotifier;
function desktopNotify(note) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!desktopNtfnSettings.browserNtfnEnabled || !desktopNtfnSettings[note.type])
            return;
        yield Notifier.sendDesktopNotification(note.subject, plainNote(note.details));
    });
}
function fetchDesktopNtfnSettings() {
    var _a;
    if (desktopNtfnSettings !== undefined) {
        return desktopNtfnSettings;
    }
    const k = desktopNtfnSettingsKey();
    desktopNtfnSettings = ((_a = _state__WEBPACK_IMPORTED_MODULE_1__["default"].fetchLocal(k)) !== null && _a !== void 0 ? _a : {});
    return desktopNtfnSettings;
}
function updateNtfnSetting(noteType, enabled) {
    fetchDesktopNtfnSettings();
    desktopNtfnSettings[noteType] = enabled;
    _state__WEBPACK_IMPORTED_MODULE_1__["default"].storeLocal(desktopNtfnSettingsKey(), desktopNtfnSettings);
}
const coinExplorerTokenRe = /\{\{\{([^|]+)\|([^}]+)\}\}\}/g;
const orderTokenRe = /\{\{\{order\|([^}]+)\}\}\}/g;
/*
 * insertRichNote replaces tx and order hash tokens in the input string with
 * <a> elements that link to the asset's chain explorer and order details
 * view, and inserts the resulting HTML into the supplied parent element.
 */
function insertRichNote(parent, inputString) {
    const s = inputString.replace(orderTokenRe, (_match, orderToken) => {
        const link = document.createElement('a');
        link.setAttribute('href', '/order/' + orderToken);
        link.setAttribute('class', 'subtlelink');
        link.textContent = orderToken.slice(0, 8);
        return link.outerHTML;
    }).replace(coinExplorerTokenRe, (_match, assetID, hash) => {
        const link = document.createElement('a');
        link.setAttribute('data-explorer-coin', hash);
        link.setAttribute('target', '_blank');
        link.textContent = hash.slice(0, 8);
        (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_2__.setCoinHref)(assetID, link);
        return link.outerHTML;
    });
    const els = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].noderize(s).body;
    while (els.firstChild)
        parent.appendChild(els.firstChild);
}
/*
 * plainNote replaces tx and order hash tokens tokens in the input string with
 * shortened hashes, for rendering in browser notifications and popups.
 */
function plainNote(inputString) {
    const replacedString = inputString.replace(coinExplorerTokenRe, (_match, _assetID, hash) => {
        return hash.slice(0, 8);
    });
    return replacedString;
}


/***/ }),

/***/ "./src/js/opts.ts":
/*!************************!*\
  !*** ./src/js/opts.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BooleanOption": () => (/* binding */ BooleanOption),
/* harmony export */   "Option": () => (/* binding */ Option),
/* harmony export */   "XYRangeHandler": () => (/* binding */ XYRangeHandler),
/* harmony export */   "XYRangeOption": () => (/* binding */ XYRangeOption),
/* harmony export */   "setOptionTemplates": () => (/* binding */ setOptionTemplates)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");

// Having the caller set these vars on load using an exported function makes
// life easier.
let orderOptTmpl, booleanOptTmpl, rangeOptTmpl;
// setOptionTemplates sets the package vars for the templates and application.
function setOptionTemplates(page) {
    [booleanOptTmpl, rangeOptTmpl, orderOptTmpl] = [page.booleanOptTmpl, page.rangeOptTmpl, page.orderOptTmpl];
}
const threeSigFigs = new Intl.NumberFormat(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].languages(), {
    minimumSignificantDigits: 3,
    maximumSignificantDigits: 3
});
/*
 * Option is a base class for option elements. Option stores some common
 * parameters and monitors the toggle switch, calling the child class's
 * enable/disable methods when the user manually turns the option on or off.
 */
class Option {
    constructor(opt, symbol, report) {
        this.opt = opt;
        const node = this.node = orderOptTmpl.cloneNode(true);
        const tmpl = this.tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(node);
        tmpl.optName.textContent = opt.displayname;
        tmpl.tooltip.dataset.tooltip = opt.description;
        // const isBaseChain = (isSwapOption && order.sell) || (!isSwapOption && !order.sell)
        // const symbol = isBaseChain ? this.baseSymbol() : this.quoteSymbol()
        if (symbol)
            tmpl.chainIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.chainIcon);
        this.on = false;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(node, 'click', () => {
            if (this.on)
                return;
            this.on = true;
            node.classList.add('selected');
            report.enable();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.toggle, 'click', e => {
            if (!this.on)
                return;
            e.stopPropagation();
            this.on = false;
            node.classList.remove('selected');
            report.disable();
        });
    }
}
/*
 * BooleanOption is a simple on/off option with a short summary of it's effects.
 * BooleanOrderOption is the handler for a *BooleanConfig from client/asset.
 */
class BooleanOption extends Option {
    constructor(opt, symbol, dict, changed) {
        super(opt, symbol, {
            enable: () => this.enable(),
            disable: () => this.disable()
        });
        this.dict = dict;
        this.changed = () => changed();
        if (opt.boolean === undefined)
            throw Error('not a boolean opt');
        const cfg = opt.boolean;
        const control = this.control = booleanOptTmpl.cloneNode(true);
        // Append to parent's options div.
        this.tmpl.controls.appendChild(control);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(control);
        tmpl.reason.textContent = cfg.reason;
        this.on = typeof dict[opt.key] !== 'undefined' ? dict[opt.key] : opt.default;
        if (this.on)
            this.node.classList.add('selected');
    }
    store() {
        if (this.on === this.opt.default)
            delete this.dict[this.opt.key];
        else
            this.dict[this.opt.key] = this.on;
        this.changed();
    }
    enable() {
        this.store();
    }
    disable() {
        this.store();
    }
}
/*
 * XYRangeOption is an order option that contains an XYRangeHandler. The logic
 * for handling the slider to is defined in XYRangeHandler so that the slider
 * can be used without being contained in an order option.
 */
class XYRangeOption extends Option {
    constructor(opt, symbol, dict, changed) {
        super(opt, symbol, {
            enable: () => this.enable(),
            disable: () => this.disable()
        });
        this.dict = dict;
        this.changed = changed;
        if (opt.xyRange === undefined)
            throw Error('not an xy range opt');
        const cfg = opt.xyRange;
        const setVal = dict[opt.key];
        this.on = typeof setVal !== 'undefined';
        if (this.on) {
            this.node.classList.add('selected');
            this.x = setVal;
        }
        else {
            this.x = opt.default;
        }
        const selected = () => { this.node.classList.add('selected'); };
        this.handler = new XYRangeHandler(cfg, this.x, { changed, selected, settingsDict: dict, settingsKey: opt.key });
        this.tmpl.controls.appendChild(this.handler.control);
    }
    enable() {
        this.dict[this.opt.key] = this.x;
        this.changed();
    }
    disable() {
        delete this.dict[this.opt.key];
        this.changed();
    }
    setValue(x) {
        this.handler.setValue(x);
        this.on = true;
        this.node.classList.add('selected');
    }
}
/*
 * XYRangeHandler is the handler for an *XYRange from client/asset. XYRange
 * has a slider which allows adjusting the x and y, linearly between two limits.
 * The user can also manually enter values for x or y.
 */
class XYRangeHandler {
    constructor(range, initVal, opts) {
        var _a, _b, _c, _d;
        const control = this.control = rangeOptTmpl.cloneNode(true);
        const tmpl = this.tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(control);
        tmpl.rangeLblStart.textContent = range.start.label;
        tmpl.rangeLblEnd.textContent = range.end.label;
        tmpl.xUnit.textContent = range.xUnit;
        tmpl.yUnit.textContent = range.yUnit;
        this.range = range;
        this.initVal = initVal;
        this.settingsDict = opts.settingsDict;
        this.settingsKey = (_a = opts.settingsKey) !== null && _a !== void 0 ? _a : '';
        this.roundX = Boolean(opts.roundX);
        this.roundY = Boolean(opts.roundY);
        this.setDisabled(Boolean(opts.disabled));
        this.changed = (_b = opts.changed) !== null && _b !== void 0 ? _b : (() => { });
        this.selected = (_c = opts.selected) !== null && _c !== void 0 ? _c : (() => { });
        this.updated = (_d = opts.updated) !== null && _d !== void 0 ? _d : (() => { });
        this.convert = opts.convert || ((x) => x);
        const { slider, handle } = tmpl;
        const rangeX = range.end.x - range.start.x;
        const rangeY = range.end.y - range.start.y;
        const normalizeX = (x) => (x - range.start.x) / rangeX;
        // r, x, and y will be updated by the various input event handlers. r is
        // x (or y) normalized on its range, e.g. [x_min, x_max] -> [0, 1]
        this.r = normalizeX(initVal);
        this.scrollingX = this.x = initVal;
        this.y = this.r * rangeY + range.start.y;
        this.accept(this.scrollingX, { skipUpdate: true });
        // Set up the handlers for the x and y text input fields.
        const clickOutX = (e) => {
            if (this.disabled)
                return;
            if (e.type !== 'change' && e.target === tmpl.xInput)
                return;
            const s = tmpl.xInput.value;
            if (s) {
                const xx = parseFloat(s);
                if (!isNaN(xx)) {
                    this.scrollingX = clamp(xx, range.start.x, range.end.x);
                    this.r = normalizeX(this.scrollingX);
                    this.y = this.r * rangeY + range.start.y;
                    this.accept(this.scrollingX);
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.xInput);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.x);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'click', clickOutX);
            this.changed();
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.x, 'click', e => {
            if (this.disabled)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.x);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.xInput);
            tmpl.xInput.focus();
            tmpl.xInput.value = threeSigFigs.format(this.scrollingX);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'click', clickOutX);
            e.stopPropagation();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.xInput, 'change', clickOutX);
        const clickOutY = (e) => {
            if (this.disabled)
                return;
            if (e.type !== 'change' && e.target === tmpl.yInput)
                return;
            const s = tmpl.yInput.value;
            if (s) {
                const yy = parseFloat(s);
                if (!isNaN(yy)) {
                    this.y = clamp(yy, range.start.y, range.end.y);
                    this.r = (this.y - range.start.y) / rangeY;
                    this.scrollingX = range.start.x + this.r * rangeX;
                    this.accept(this.scrollingX);
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.yInput);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.y);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'click', clickOutY);
            this.changed();
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.y, 'click', e => {
            if (this.disabled)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.y);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.yInput);
            tmpl.yInput.focus();
            tmpl.yInput.value = threeSigFigs.format(this.y);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'click', clickOutY);
            e.stopPropagation();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.yInput, 'change', clickOutY);
        // Read the slider.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(handle, 'mousedown', (e) => {
            if (this.disabled)
                return;
            if (e.button !== 0)
                return;
            e.preventDefault();
            e.stopPropagation();
            this.selected();
            const startX = e.pageX;
            const w = slider.clientWidth - handle.offsetWidth;
            const startLeft = normalizeX(this.scrollingX) * w;
            const left = (ee) => Math.max(Math.min(startLeft + (ee.pageX - startX), w), 0);
            const trackMouse = (ee, emit) => {
                ee.preventDefault();
                this.r = left(ee) / w;
                this.scrollingX = this.r * rangeX + range.start.x;
                this.y = this.r * rangeY + range.start.y;
                this.accept(this.scrollingX, { skipChange: !emit });
            };
            const mouseUp = (ee) => {
                trackMouse(ee, true);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'mousemove', trackMouse);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'mouseup', mouseUp);
                this.changed();
            };
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'mousemove', trackMouse);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'mouseup', mouseUp);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(tmpl.sliderBox, 'click', (e) => {
            if (this.disabled)
                return;
            if (e.button !== 0)
                return;
            const x = e.pageX;
            const m = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].layoutMetrics(tmpl.slider);
            this.r = clamp((x - m.bodyLeft) / m.width, 0, 1);
            this.scrollingX = this.r * rangeX + range.start.x;
            this.y = this.r * rangeY + range.start.y;
            this.accept(this.scrollingX);
        });
    }
    setDisabled(disabled) {
        this.control.classList.toggle('disabled', disabled);
        this.disabled = disabled;
    }
    setXLabel(s) {
        this.tmpl.x.textContent = s;
    }
    setYLabel(s) {
        this.tmpl.y.textContent = s;
    }
    accept(x, cfg) {
        const tmpl = this.tmpl;
        if (this.roundX)
            x = Math.round(x);
        if (this.roundY)
            this.y = Math.round(this.y);
        tmpl.x.textContent = threeSigFigs.format(x);
        tmpl.y.textContent = threeSigFigs.format(this.y);
        if (this.roundY)
            tmpl.y.textContent = `${this.y}`;
        const rEffective = clamp(this.r, 0, 1);
        tmpl.handle.style.left = `calc(${rEffective * 100}% - ${rEffective * 14}px)`;
        this.x = x;
        this.scrollingX = x;
        cfg = cfg !== null && cfg !== void 0 ? cfg : {};
        if (this.settingsDict)
            this.settingsDict[this.settingsKey] = this.convert(this.x, this.y);
        if (!cfg.skipUpdate) {
            this.updated(x, this.y);
            if (!cfg.skipChange)
                this.changed();
        }
    }
    setValue(x, skipUpdate) {
        const range = this.range;
        this.r = (x - range.start.x) / (range.end.x - range.start.x);
        this.y = range.start.y + this.r * (range.end.y - range.start.y);
        this.accept(x, { skipUpdate });
    }
    modified() {
        return this.x !== this.initVal;
    }
    reset() {
        this.setValue(this.initVal, true);
    }
}
const clamp = (v, min, max) => v < min ? min : v > max ? max : v;


/***/ }),

/***/ "./src/js/order.ts":
/*!*************************!*\
  !*** ./src/js/order.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OrderPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _opts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./opts */ "./src/js/opts.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









// lockTimeMakerMs must match the value returned from LockTimeMaker func in
// bisonw.
const lockTimeMakerMs = 20 * 60 * 60 * 1000;
// lockTimeTakerMs must match the value returned from LockTimeTaker func in
// bisonw.
const lockTimeTakerMs = 8 * 60 * 60 * 1000;
const animationLength = 500;
class OrderPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(main) {
        super();
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(main);
        this.stampers = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(main, '[data-stamp]');
        // Find the order
        this.orderID = main.dataset.oid || '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.matchCardTmpl);
        const setStamp = () => {
            for (const span of this.stampers) {
                span.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(parseInt(span.dataset.stamp || ''));
            }
        };
        setStamp();
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => {
                if (this.refreshOnPopupClose) {
                    window.location.replace(window.location.href);
                    return;
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            });
        });
        // Some static elements on this page contain assets that can be linked
        // to blockchain explorers (such as Etherscan) so users can easily
        // examine funding/acceleration coins data there. We'd need to set up
        // such hyperlinks here.
        main.querySelectorAll('[data-explorer-id]').forEach((link) => {
            const assetID = parseInt(link.dataset.explorerId || '');
            (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_8__.setCoinHref)(assetID, link);
        });
        if (page.cancelBttn) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.cancelBttn, 'click', () => {
                this.showForm(page.cancelForm);
            });
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.accelerateBttn, 'click', () => {
            this.showAccelerateForm();
        });
        const success = () => {
            this.refreshOnPopupClose = true;
        };
        // Do not call cleanTemplates before creating the AccelerateOrderForm
        (0,_opts__WEBPACK_IMPORTED_MODULE_7__.setOptionTemplates)(page);
        this.accelerateOrderForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.AccelerateOrderForm(page.accelerateForm, success);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.booleanOptTmpl, page.rangeOptTmpl, page.orderOptTmpl);
        // If the user clicks outside of a form, it should close the page overlay.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                if (this.refreshOnPopupClose) {
                    window.location.reload();
                    return;
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            }
        });
        // Cancel order form
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.cancelForm, page.cancelSubmit, () => __awaiter(this, void 0, void 0, function* () { this.submitCancel(); }));
        this.secondTicker = window.setInterval(() => {
            setStamp();
        }, 10000); // update every 10 seconds
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().registerNoteFeeder({
            order: (note) => { this.handleOrderNote(note); },
            match: (note) => { this.handleMatchNote(note); }
        });
        this.start();
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            let ord = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().order(this.orderID);
            // app().order can only access active orders. If the order is not active,
            // we'll need to get the data from the database.
            if (ord)
                this.order = ord;
            else {
                ord = yield this.fetchOrder();
            }
            // Swap out the dot-notation symbols with token-aware symbols.
            this.page.mktBaseSymbol.replaceWith(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[ord.baseID]));
            this.page.mktQuoteSymbol.replaceWith(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[ord.quoteID]));
            this.setAccelerationButtonVis();
            this.showMatchCards();
        });
    }
    unload() {
        clearInterval(this.secondTicker);
    }
    /* fetchOrder fetches the order from the client. */
    fetchOrder() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_4__.postJSON)('/api/order', this.orderID);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res))
                throw res.msg;
            this.order = res.order;
            return this.order;
        });
    }
    /*
     * setImmutableMatchCardElements sets the match card elements that are never
     * changed.
     */
    setImmutableMatchCardElements(matchCard, match) {
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(matchCard);
        tmpl.matchID.textContent = match.matchID;
        const time = new Date(match.stamp);
        tmpl.matchTime.textContent = time.toLocaleTimeString(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].languages(), {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
        tmpl.matchTimeAgo.dataset.stamp = match.stamp.toString();
        tmpl.matchTimeAgo.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(match.stamp);
        this.stampers.push(tmpl.matchTimeAgo);
        const orderPortion = _orderutil__WEBPACK_IMPORTED_MODULE_2__.orderPortion(this.order, match);
        const baseSymbol = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bipSymbol(this.order.baseID);
        const quoteSymbol = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bipSymbol(this.order.quoteID);
        const baseUnitInfo = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().unitInfo(this.order.baseID);
        const quoteUnitInfo = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().unitInfo(this.order.quoteID);
        const [bUnit, qUnit] = [baseUnitInfo.conventional.unit.toLowerCase(), quoteUnitInfo.conventional.unit.toLowerCase()];
        const quoteAmount = _orderutil__WEBPACK_IMPORTED_MODULE_2__.baseToQuote(match.rate, match.qty);
        if (match.isCancel) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.cancelInfoDiv);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.infoDiv, tmpl.status, tmpl.statusHdr);
            if (this.order.sell) {
                tmpl.cancelAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(match.qty, baseUnitInfo);
                tmpl.cancelIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.baseID);
            }
            else {
                tmpl.cancelAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(quoteAmount, quoteUnitInfo);
                tmpl.cancelIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.quoteID);
            }
            tmpl.cancelOrderPortion.textContent = orderPortion;
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.infoDiv);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.cancelInfoDiv);
        tmpl.orderPortion.textContent = orderPortion;
        if (match.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) {
            tmpl.side.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_MAKER);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.makerSwapYou, tmpl.makerRedeemYou, tmpl.takerSwapThem, tmpl.takerRedeemThem);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.takerSwapYou, tmpl.takerRedeemYou, tmpl.makerSwapThem, tmpl.makerRedeemThem);
        }
        else {
            tmpl.side.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_TAKER);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.makerSwapYou, tmpl.makerRedeemYou, tmpl.takerSwapThem, tmpl.takerRedeemThem);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.takerSwapYou, tmpl.takerRedeemYou, tmpl.makerSwapThem, tmpl.makerRedeemThem);
        }
        if ((match.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker && this.order.sell) ||
            (match.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Taker && !this.order.sell)) {
            tmpl.makerSwapAsset.textContent = bUnit;
            tmpl.takerSwapAsset.textContent = qUnit;
            tmpl.makerRedeemAsset.textContent = qUnit;
            tmpl.takerRedeemAsset.textContent = bUnit;
        }
        else {
            tmpl.makerSwapAsset.textContent = qUnit;
            tmpl.takerSwapAsset.textContent = bUnit;
            tmpl.makerRedeemAsset.textContent = bUnit;
            tmpl.takerRedeemAsset.textContent = qUnit;
        }
        const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().conventionalRate(this.order.baseID, this.order.quoteID, match.rate);
        tmpl.rate.textContent = `${rate} ${bUnit}/${qUnit}`;
        if (this.order.sell) {
            tmpl.refundAsset.textContent = baseSymbol;
            tmpl.fromAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(match.qty, baseUnitInfo);
            tmpl.toAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(quoteAmount, quoteUnitInfo);
            tmpl.fromIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.baseID);
            tmpl.toIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.quoteID);
        }
        else {
            tmpl.refundAsset.textContent = quoteSymbol;
            tmpl.fromAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(quoteAmount, quoteUnitInfo);
            tmpl.toAmount.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(match.qty, baseUnitInfo);
            tmpl.fromIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.quoteID);
            tmpl.toIcon.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPathFromID(this.order.baseID);
        }
    }
    /*
     * setMutableMatchCardElements sets the match card elements which may get
     * updated on each update to the match.
     */
    setMutableMatchCardElements(matchCard, m) {
        if (m.isCancel)
            return;
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(matchCard);
        tmpl.status.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_2__.matchStatusString(m);
        const tryShowCoin = (pendingEl, coinLink, coin) => {
            if (!coin) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(coinLink);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(pendingEl);
                return;
            }
            coinLink.textContent = (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_8__.formatCoinID)(coin.stringID);
            coinLink.dataset.explorerCoin = coin.stringID;
            (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_8__.setCoinHref)(coin.assetID, coinLink);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(coinLink);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(pendingEl);
        };
        tryShowCoin(tmpl.makerSwapPending, tmpl.makerSwapCoin, makerSwapCoin(m));
        tryShowCoin(tmpl.takerSwapPending, tmpl.takerSwapCoin, takerSwapCoin(m));
        tryShowCoin(tmpl.makerRedeemPending, tmpl.makerRedeemCoin, makerRedeemCoin(m));
        tryShowCoin(tmpl.takerRedeemPending, tmpl.takerRedeemCoin, takerRedeemCoin(m));
        if (!m.refund) {
            // Special messaging for pending refunds.
            let lockTime = lockTimeMakerMs;
            if (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Taker)
                lockTime = lockTimeTakerMs;
            const refundAfter = new Date(m.stamp + lockTime);
            if (Date.now() > refundAfter.getTime())
                tmpl.refundPending.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_REFUND_IMMINENT);
            else {
                const refundAfterStr = refundAfter.toLocaleTimeString(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].languages(), {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });
                tmpl.refundPending.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_REFUND_WILL_HAPPEN_AFTER, { refundAfterTime: refundAfterStr });
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.refundCoin);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.refundPending);
        }
        else {
            tmpl.refundCoin.textContent = (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_8__.formatCoinID)(m.refund.stringID);
            tmpl.refundCoin.dataset.explorerCoin = m.refund.stringID;
            (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_8__.setCoinHref)(m.refund.assetID, tmpl.refundCoin);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.refundCoin);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.refundPending);
        }
        if (m.status === _orderutil__WEBPACK_IMPORTED_MODULE_2__.MakerSwapCast && !m.revoked && !m.refund) {
            const c = makerSwapCoin(m);
            tmpl.makerSwapMsg.textContent = confirmationString(c);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.takerSwapMsg, tmpl.makerRedeemMsg, tmpl.takerRedeemMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.makerSwapMsg);
        }
        else if (m.status === _orderutil__WEBPACK_IMPORTED_MODULE_2__.TakerSwapCast && !m.revoked && !m.refund) {
            const c = takerSwapCoin(m);
            tmpl.takerSwapMsg.textContent = confirmationString(c);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.makerSwapMsg, tmpl.makerRedeemMsg, tmpl.takerRedeemMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.takerSwapMsg);
        }
        else if (inConfirmingMakerRedeem(m) && !m.revoked && !m.refund) {
            tmpl.makerRedeemMsg.textContent = confirmationString(m.redeem);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.makerSwapMsg, tmpl.takerSwapMsg, tmpl.takerRedeemMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.makerRedeemMsg);
        }
        else if (inConfirmingTakerRedeem(m) && !m.revoked && !m.refund) {
            tmpl.takerRedeemMsg.textContent = confirmationString(m.redeem);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.makerSwapMsg, tmpl.takerSwapMsg, tmpl.makerRedeemMsg);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.takerRedeemMsg);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.makerSwapMsg, tmpl.takerSwapMsg, tmpl.makerRedeemMsg, tmpl.takerRedeemMsg);
        }
        if (!m.revoked) {
            // Match is still following the usual success-path, it is desirable for the
            // user to see it in full (even if to learn how atomic swap is supposed to
            // work).
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(makerSwapCoin(m) || m.active, tmpl.makerSwap);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(takerSwapCoin(m) || m.active, tmpl.takerSwap);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(makerRedeemCoin(m) || m.active, tmpl.makerRedeem);
            // When maker isn't aware of taker redeem coin, once the match becomes inactive
            // (nothing else maker is expected to do in this match) just hide taker redeem.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(takerRedeemCoin(m) || m.active, tmpl.takerRedeem);
            // Refunding isn't a usual part of success-path, but don't rule it out.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(m.refund, tmpl.refund);
        }
        else {
            // Match diverged from the usual success-path, since this could have happened
            // at any step it is hard (maybe impossible) to predict the final state this
            // match will end up in, so show only steps that already happened plus all
            // the possibilities on the next step ahead.
            // If we don't have swap coins after revocation, we won't show the pending message.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(makerSwapCoin(m), tmpl.makerSwap);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(takerSwapCoin(m), tmpl.takerSwap);
            const takerRefundsAfter = new Date(m.stamp + lockTimeTakerMs);
            const takerLockTimeExpired = Date.now() > takerRefundsAfter.getTime();
            // When match is revoked and both swaps are present, maker redeem might still show up:
            // - as maker, we'll try to redeem until taker locktime expires (if taker refunds
            //   we won't be able to redeem; even if taker hasn't refunded just yet - it
            //   becomes too dangerous to redeem after taker locktime expired because maker
            //   reveals his secret when redeeming, and taker might be able to submit both
            //   redeem and refund transactions before maker's redeem gets mined), so we'll
            //   have to show redeem pending element until maker redeem shows up, or until
            //   we give up on redeeming due to taker locktime expiry.
            // - as taker, we should expect maker redeeming any time, so we'll have to show
            //   redeem pending element until maker redeem shows up, or until we refund.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(makerRedeemCoin(m) || (takerSwapCoin(m) && m.active && !m.refund && !takerLockTimeExpired), tmpl.makerRedeem);
            // When maker isn't aware of taker redeem coin, once the match becomes inactive
            // (nothing else maker is expected to do in this match) just hide taker redeem.
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(takerRedeemCoin(m) || (makerRedeemCoin(m) && m.active && !m.refund), tmpl.takerRedeem);
            // As taker, show refund placeholder only if we have outstanding swap to refund.
            // There is no need to wait for anything else, we can show refund placeholder
            // (to inform the user that it is likely to happen) right after match revocation.
            let expectingRefund = Boolean(takerSwapCoin(m)); // as taker
            if (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) {
                // As maker, show refund placeholder only if we have outstanding swap to refund.
                // If we don't have taker swap there is no need to wait for anything else, we
                // can show refund placeholder (to inform the user that it is likely to happen)
                // right after match revocation.
                expectingRefund = Boolean(makerSwapCoin(m));
                // If we discover taker swap we'll be trying to redeem it (instead of trying
                // to refund our own swap) until taker refunds, so start showing refund
                // placeholder only after taker is expected to start his refund process in
                // this case.
                if (takerSwapCoin(m)) {
                    expectingRefund = expectingRefund && takerLockTimeExpired;
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(m.refund || (m.active && !m.redeem && !m.counterRedeem && expectingRefund), tmpl.refund);
        }
    }
    /*
     * addNewMatchCard adds a new card to the list of match cards.
     */
    addNewMatchCard(match) {
        const page = this.page;
        const matchCard = page.matchCardTmpl.cloneNode(true);
        (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().bindUrlHandlers(matchCard);
        matchCard.dataset.matchID = match.matchID;
        this.setImmutableMatchCardElements(matchCard, match);
        this.setMutableMatchCardElements(matchCard, match);
        page.matchBox.appendChild(matchCard);
    }
    /*
     * showMatchCards creates cards for each match in the order.
     */
    showMatchCards() {
        const order = this.order;
        if (!order)
            return;
        if (!order.matches)
            return;
        order.matches.sort((a, b) => a.stamp - b.stamp);
        order.matches.forEach((match) => this.addNewMatchCard(match));
    }
    /* showCancel shows a form to confirm submission of a cancel order. */
    showCancel() {
        const order = this.order;
        const page = this.page;
        const remaining = order.qty - order.filled;
        const asset = _orderutil__WEBPACK_IMPORTED_MODULE_2__.isMarketBuy(order) ? (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[order.quoteID] : (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().assets[order.baseID];
        page.cancelRemain.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(remaining, asset.unitInfo);
        page.cancelUnit.textContent = asset.unitInfo.conventional.unit.toUpperCase();
        this.showForm(page.cancelForm);
    }
    /* showForm shows a modal form with a little animation. */
    showForm(form) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentForm = form;
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.cancelForm, page.accelerateForm);
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, form);
            const shift = (page.forms.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0px';
        });
    }
    /* submitCancel submits a cancellation for the order. */
    submitCancel() {
        return __awaiter(this, void 0, void 0, function* () {
            // this will be the page.cancelSubmit button (evt.currentTarget)
            const page = this.page;
            const order = this.order;
            const req = {
                orderID: order.id
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(page.cancelForm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_4__.postJSON)('/api/cancel', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().checkResponse(res))
                return;
            page.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CANCELING);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            order.cancelling = true;
        });
    }
    /*
     * setAccelerationButtonVis shows the acceleration button if the order can
     * be accelerated.
     */
    setAccelerationButtonVis() {
        const order = this.order;
        if (!order)
            return;
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis((0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().canAccelerateOrder(order), page.accelerateBttn, page.actionsLabel);
    }
    /* showAccelerateForm shows a form to accelerate an order */
    showAccelerateForm() {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_6__.app)().loading(this.page.accelerateBttn);
            this.accelerateOrderForm.refresh(this.order);
            loaded();
            this.showForm(this.page.accelerateForm);
        });
    }
    /*
     * handleOrderNote is the handler for the 'order'-type notification, which are
     * used to update an order's status.
     */
    handleOrderNote(note) {
        const page = this.page;
        const order = note.order;
        if (order.id !== this.orderID)
            return;
        this.order = order;
        const bttn = page.cancelBttn;
        if (bttn && order.status > _orderutil__WEBPACK_IMPORTED_MODULE_2__.StatusBooked)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(bttn);
        page.status.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_2__.statusString(order);
        for (const m of order.matches || [])
            this.processMatch(m);
        this.setAccelerationButtonVis();
    }
    /* handleMatchNote handles a 'match' notification. */
    handleMatchNote(note) {
        if (note.orderID !== this.orderID)
            return;
        this.processMatch(note.match);
        this.setAccelerationButtonVis();
    }
    /*
     * processMatch synchronizes a match's card with a match received in a
     * 'order' or 'match' notification.
     */
    processMatch(m) {
        let card = null;
        for (const div of _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(this.page.matchBox, '.match-card')) {
            if (div.dataset.matchID === m.matchID) {
                card = div;
                break;
            }
        }
        if (card) {
            this.setMutableMatchCardElements(card, m);
        }
        else {
            this.addNewMatchCard(m);
        }
    }
}
/*
 * confirmationString is a string describing the state of confirmations for a
 * coin.
 * */
function confirmationString(coin) {
    if (!coin.confs || coin.confs.required === 0)
        return '';
    return `${coin.confs.count} / ${coin.confs.required} ${_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CONFIRMATIONS)}`;
}
// makerSwapCoin return's the maker's swap coin.
function makerSwapCoin(m) {
    return (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) ? m.swap : m.counterSwap;
}
// takerSwapCoin return's the taker's swap coin.
function takerSwapCoin(m) {
    return (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) ? m.counterSwap : m.swap;
}
// makerRedeemCoin return's the maker's redeem coin.
function makerRedeemCoin(m) {
    return (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) ? m.redeem : m.counterRedeem;
}
// takerRedeemCoin return's the taker's redeem coin.
function takerRedeemCoin(m) {
    return (m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker) ? m.counterRedeem : m.redeem;
}
/*
* inConfirmingMakerRedeem will be true if we are the maker, and we are waiting
* on confirmations for our own redeem.
*/
function inConfirmingMakerRedeem(m) {
    return m.status < _orderutil__WEBPACK_IMPORTED_MODULE_2__.MatchConfirmed && m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Maker && m.status >= _orderutil__WEBPACK_IMPORTED_MODULE_2__.MakerRedeemed;
}
/*
* inConfirmingTakerRedeem will be true if we are the taker, and we are waiting
* on confirmations for our own redeem.
*/
function inConfirmingTakerRedeem(m) {
    return m.status < _orderutil__WEBPACK_IMPORTED_MODULE_2__.MatchConfirmed && m.side === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Taker && m.status >= _orderutil__WEBPACK_IMPORTED_MODULE_2__.MatchComplete;
}


/***/ }),

/***/ "./src/js/orderbook.ts":
/*!*****************************!*\
  !*** ./src/js/orderbook.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OrderBook)
/* harmony export */ });
class OrderBook {
    constructor(mktBook, baseSymbol, quoteSymbol) {
        this.base = mktBook.base;
        this.baseSymbol = baseSymbol;
        this.quote = mktBook.quote;
        this.quoteSymbol = quoteSymbol;
        // Books are sorted mid-gap first.
        this.buys = mktBook.book.buys || [];
        this.sells = mktBook.book.sells || [];
    }
    /* add adds an order to the order book. */
    add(ord) {
        if (ord.qtyAtomic === 0) {
            // TODO: Somebody, for the love of god, figure out why the hell this helps
            // with the ghost orders problem. As far as I know, this order is a booked
            // order that had more than one match in an epoch and completely filled.
            // Because the first match didn't exhaust the order, there would be a
            // 'update_remaining' notification scheduled for the order. But by the
            // time OrderRouter generates the notification long after matching, the
            // order has zero qty left to fill. It's all good though, kinda, because
            // the notification is quickly followed with an 'unbook_order'
            // notification. I have tried my damnedest to catch an update_remaining
            // note without an accompanying unbook_order note, and have thus failed.
            // Yet, this fix somehow seems to work. It's infuriating, tbh.
            window.log('zeroqty', 'zero quantity order encountered', ord);
            return;
        }
        const side = ord.sell ? this.sells : this.buys;
        side.splice(findIdx(side, ord.rate, !ord.sell), 0, ord);
    }
    /* remove removes an order from the order book. */
    remove(token) {
        if (this.removeFromSide(this.sells, token))
            return;
        this.removeFromSide(this.buys, token);
    }
    /* removeFromSide removes an order from the list of orders. */
    removeFromSide(side, token) {
        const [ord, i] = this.findOrder(side, token);
        if (ord) {
            side.splice(i, 1);
            return true;
        }
        return false;
    }
    /* findOrder finds an order in a specified side */
    findOrder(side, token) {
        for (let i = 0; i < side.length; i++) {
            if (side[i].token === token) {
                return [side[i], i];
            }
        }
        return [null, -1];
    }
    /* updates the remaining quantity of an order. */
    updateRemaining(token, qty, qtyAtomic) {
        if (this.updateRemainingSide(this.sells, token, qty, qtyAtomic))
            return;
        this.updateRemainingSide(this.buys, token, qty, qtyAtomic);
    }
    /*
     * updateRemainingSide looks for the order in the side and updates the
     * quantity, returning true on success, false if order not found.
     */
    updateRemainingSide(side, token, qty, qtyAtomic) {
        const ord = this.findOrder(side, token)[0];
        if (ord) {
            ord.qty = qty;
            ord.qtyAtomic = qtyAtomic;
            return true;
        }
        return false;
    }
    /*
     * setEpoch sets the current epoch and clear any orders from previous epochs.
     */
    setEpoch(epochIdx) {
        const approve = (ord) => ord.epoch === undefined || ord.epoch === 0 || ord.epoch === epochIdx;
        this.sells = this.sells.filter(approve);
        this.buys = this.buys.filter(approve);
    }
    /* empty will return true if both the buys and sells lists are empty. */
    empty() {
        return !this.sells.length && !this.buys.length;
    }
    /* count is the total count of both buy and sell orders. */
    count() {
        return this.sells.length + this.buys.length;
    }
    /* bestGapOrder will return the best non-epoch order if one exists, or the
     * best epoch order if there are only epoch orders, or null if there are no
     * orders.
     */
    bestGapOrder(side) {
        let best = null;
        for (const ord of side) {
            if (!ord.epoch)
                return ord;
            if (!best) {
                best = ord;
            }
        }
        return best;
    }
    bestGapBuy() {
        return this.bestGapOrder(this.buys);
    }
    bestGapSell() {
        return this.bestGapOrder(this.sells);
    }
}
/*
 * findIdx find the index at which to insert the order into the list of orders.
 */
function findIdx(side, rate, less) {
    for (let i = 0; i < side.length; i++) {
        if ((side[i].rate < rate) === less)
            return i;
    }
    return side.length;
}


/***/ }),

/***/ "./src/js/orders.ts":
/*!**************************!*\
  !*** ./src/js/orders.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OrdersPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const orderBatchSize = 50;
const animationLength = 500;
class OrdersPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(main) {
        super();
        this.main = main;
        // if offset is '', there are no more orders available to auto-load for
        // never-ending scrolling.
        this.offset = '';
        this.loading = false;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(main);
        this.orderTmpl = page.rowTmpl;
        this.orderTmpl.remove();
        // filterState will store arrays of strings. The assets and statuses
        // sub-filters will need to be converted to ints for JSON encoding.
        const filterState = this.filterState = {
            hosts: [],
            assets: [],
            statuses: []
        };
        const search = new URLSearchParams(window.location.search);
        const readFilter = (form, filterKey) => {
            const v = search.get(filterKey);
            if (!v || v.length === 0)
                return;
            const subFilter = v.split(',');
            if (v) {
                filterState[filterKey] = subFilter; // Kinda janky
            }
            form.querySelectorAll('input').forEach(bttn => {
                if (subFilter.indexOf(bttn.value) >= 0)
                    bttn.checked = true;
            });
        };
        readFilter(page.hostFilter, 'hosts');
        readFilter(page.assetFilter, 'assets');
        readFilter(page.statusFilter, 'statuses');
        const applyButtons = [];
        const monitorFilter = (form, filterKey) => {
            const applyBttn = form.querySelector('.apply-bttn');
            applyButtons.push(applyBttn);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(applyBttn, 'click', () => {
                this.submitFilter();
                applyButtons.forEach(bttn => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(bttn));
            });
            form.querySelectorAll('input').forEach(bttn => {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(bttn, 'change', () => {
                    const subFilter = parseSubFilter(form);
                    if (compareSubFilter(subFilter, filterState[filterKey])) {
                        // Same as currently loaded. Hide the apply button.
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(applyBttn);
                    }
                    else {
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(applyBttn);
                    }
                });
            });
        };
        monitorFilter(page.hostFilter, 'hosts');
        monitorFilter(page.assetFilter, 'assets');
        monitorFilter(page.statusFilter, 'statuses');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(this.main, 'scroll', () => {
            if (this.loading)
                return;
            const belowBottom = page.ordersTable.offsetHeight - this.main.offsetHeight - this.main.scrollTop;
            if (belowBottom < 0) {
                this.nextPage();
            }
        });
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            });
        });
        // If the user clicks outside of a form, it should close the page overlay.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            }
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.exportOrders, 'click', () => {
            this.exportOrders();
        });
        page.showArchivedDateField.addEventListener('change', () => {
            if (page.showArchivedDateField.checked)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.archivedDateField);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.archivedDateField, page.deleteArchivedRecordsErr);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.deleteArchivedRecords, 'click', () => {
            const page = this.page;
            page.showArchivedDateField.checked = false;
            page.saveMatchesToFile.checked = false;
            page.saveOrdersToFile.checked = false;
            page.deleteArchivedRecordsErr.textContent = '';
            page.archivedRecordsLocation.textContent = '';
            page.deleteArchivedRecordsMsg.textContent = '';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.deleteArchivedResult, page.deleteArchivedRecordsErr, page.deleteArchivedRecordsMsg, page.archivedRecordsLocation, page.archivedDateField);
            this.showForm(page.deleteArchivedRecordsForm);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.deleteArchivedRecordsSubmit, 'click', () => {
            let date = 0;
            if (page.showArchivedDateField.checked) {
                date = Date.parse(page.olderThan.value || '');
                if (isNaN(date) || date <= 0) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.deleteArchivedRecordsErr, _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_INVALID_DATE_ERR_MSG));
                    return;
                }
            }
            this.deleteArchivedRecords(date);
        });
        this.submitFilter();
    }
    /* showForm shows a modal form with a little animation. */
    showForm(form) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentForm = form;
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.deleteArchivedRecordsForm);
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, form);
            const shift = (page.forms.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0px';
        });
    }
    /* setOrders empties the order table and appends the specified orders. */
    setOrders(orders) {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(this.page.tableBody);
        this.appendOrders(orders);
    }
    /* appendOrders appends orders to the orders table. */
    appendOrders(orders) {
        const tbody = this.page.tableBody;
        for (const ord of orders) {
            const tr = this.orderTmpl.cloneNode(true);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tr);
            let fromSymbol, toSymbol, fromUnit, toUnit, fromQty;
            let toQty = '';
            const xc = (0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().exchanges[ord.host] || undefined;
            if ((!(0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().assets[ord.baseID] && !xc.assets[ord.baseID]) || (!(0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().assets[ord.quoteID] && !xc.assets[ord.quoteID]))
                continue;
            const [baseUnitInfo, quoteUnitInfo] = [(0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().unitInfo(ord.baseID, xc), (0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().unitInfo(ord.quoteID, xc)];
            if (ord.sell) {
                [fromSymbol, toSymbol] = [ord.baseSymbol, ord.quoteSymbol];
                [fromUnit, toUnit] = [baseUnitInfo.conventional.unit, quoteUnitInfo.conventional.unit];
                fromQty = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Limit) {
                    toQty = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty / _orderutil__WEBPACK_IMPORTED_MODULE_2__.RateEncodingFactor * ord.rate, quoteUnitInfo);
                }
            }
            else {
                [fromSymbol, toSymbol] = [ord.quoteSymbol, ord.baseSymbol];
                [fromUnit, toUnit] = [quoteUnitInfo.conventional.unit, baseUnitInfo.conventional.unit];
                if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Market) {
                    fromQty = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                }
                else {
                    fromQty = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty / _orderutil__WEBPACK_IMPORTED_MODULE_2__.RateEncodingFactor * ord.rate, quoteUnitInfo);
                    toQty = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                }
            }
            const mktID = `${baseUnitInfo.conventional.unit}-${quoteUnitInfo.conventional.unit}`;
            tmpl.host.textContent = `${mktID} @ ${ord.host}`;
            tmpl.fromQty.textContent = fromQty;
            tmpl.fromLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(fromSymbol);
            tmpl.fromSymbol.textContent = fromUnit;
            tmpl.toQty.textContent = toQty;
            tmpl.toLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(toSymbol);
            tmpl.toSymbol.textContent = toUnit;
            tmpl.type.textContent = `${_orderutil__WEBPACK_IMPORTED_MODULE_2__.typeString(ord)} ${_orderutil__WEBPACK_IMPORTED_MODULE_2__.sellString(ord)}`;
            let rate = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue((0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().conventionalRate(ord.baseID, ord.quoteID, ord.rate, xc));
            if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_2__.Market)
                rate = _orderutil__WEBPACK_IMPORTED_MODULE_2__.averageMarketOrderRateString(ord);
            tmpl.rate.textContent = rate;
            tmpl.status.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_2__.statusString(ord);
            tmpl.filled.textContent = `${(_orderutil__WEBPACK_IMPORTED_MODULE_2__.filled(ord) / ord.qty * 100).toFixed(1)}%`;
            tmpl.settled.textContent = `${(_orderutil__WEBPACK_IMPORTED_MODULE_2__.settled(ord) / ord.qty * 100).toFixed(1)}%`;
            const dateTime = new Date(ord.submitTime).toLocaleString();
            tmpl.timeAgo.textContent = `${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(ord.submitTime)} ago`;
            tmpl.time.textContent = dateTime;
            const link = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(tr, 'link');
            link.href = `order/${ord.id}`;
            (0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().bindInternalNavigation(tr);
            tbody.appendChild(tr);
        }
        if (orders.length === orderBatchSize) {
            this.offset = orders[orders.length - 1].id;
        }
        else {
            this.offset = '';
        }
    }
    /* submitFilter submits the current filter and reloads the order table. */
    submitFilter() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.offset = '';
            const filterState = this.filterState;
            filterState.hosts = parseSubFilter(page.hostFilter);
            filterState.assets = parseSubFilter(page.assetFilter).map((s) => parseInt(s));
            filterState.statuses = parseSubFilter(page.statusFilter).map((s) => parseInt(s));
            this.setOrders(yield this.fetchOrders());
        });
    }
    /* fetchOrders fetches orders using the current filter. */
    fetchOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().loading(this.main);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_4__.postJSON)('/api/orders', this.currentFilter());
            loaded();
            return res.orders;
        });
    }
    /* exportOrders downloads a csv of the user's orders based on the current filter. */
    exportOrders() {
        this.offset = '';
        const filterState = this.currentFilter();
        const url = new URL(window.location.href);
        const search = new URLSearchParams('');
        const setQuery = (k) => {
            const subFilter = filterState[k];
            subFilter.forEach((v) => {
                search.append(k, v);
            });
        };
        setQuery('hosts');
        setQuery('assets');
        setQuery('statuses');
        url.search = search.toString();
        url.pathname = '/orders/export';
        window.open(url.toString());
    }
    /* deleteArchivedRecords removes the user's archived orders and matches
     * created before user specified date time in millisecond. Deleted archived
     * records are saved to a CSV file if the user specify so.
     */
    deleteArchivedRecords(olderThanMs) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const saveMatchesToFIle = page.saveMatchesToFile.checked || false;
            const saveOrdersToFile = page.saveOrdersToFile.checked || false;
            const reqBody = {
                olderThanMs: olderThanMs,
                saveMatchesToFile: saveMatchesToFIle,
                saveOrdersToFile: saveOrdersToFile
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().loading(this.main);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_4__.postJSON)('/api/deletearchivedrecords', reqBody);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_5__.app)().checkResponse(res)) {
                return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.deleteArchivedRecordsErr, res.msg);
            }
            if (res.archivedRecordsDeleted > 0) {
                page.deleteArchivedRecordsMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_DELETE_ARCHIVED_RECORDS_RESULT, { nRecords: res.archivedRecordsDeleted });
                if (saveMatchesToFIle || saveOrdersToFile) {
                    page.archivedRecordsLocation.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_ARCHIVED_RECORDS_PATH, { path: res.archivedRecordsPath });
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.archivedRecordsLocation);
                }
                // Update the order page.
                this.submitFilter();
            }
            else {
                page.deleteArchivedRecordsMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_3__.prep(_locales__WEBPACK_IMPORTED_MODULE_3__.ID_NO_ARCHIVED_RECORDS);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.deleteArchivedResult, page.deleteArchivedRecordsMsg);
        });
    }
    /*
     * currentFilter converts the local filter type (which is all strings) to the
     * server's filter type.
     */
    currentFilter() {
        var _a, _b;
        const filterState = this.filterState;
        return {
            hosts: filterState.hosts,
            assets: (_a = filterState.assets) === null || _a === void 0 ? void 0 : _a.map((s) => parseInt(s)),
            statuses: (_b = filterState.statuses) === null || _b === void 0 ? void 0 : _b.map((s) => parseInt(s)),
            n: orderBatchSize,
            offset: this.offset
        };
    }
    /*
     * nextPage resubmits the filter with the offset set to the last loaded order.
     */
    nextPage() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.offset === '' || this.loading)
                return;
            this.loading = true;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.orderLoader);
            const orders = yield this.fetchOrders();
            this.loading = false;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.orderLoader);
            this.appendOrders(orders);
        });
    }
}
/*
 * parseSubFilter parses a bool-map from the checkbox inputs in the specified
 * ancestor element.
 */
function parseSubFilter(form) {
    const entries = [];
    form.querySelectorAll('input').forEach(box => {
        if (box.checked)
            entries.push(box.value);
    });
    return entries;
}
/* compareSubFilter compares the two filter arrays for unordered equivalence. */
function compareSubFilter(filter1, filter2) {
    if (filter1.length !== filter2.length)
        return false;
    for (const entry of filter1) {
        if (filter2.indexOf(entry) === -1)
            return false;
    }
    return true;
}


/***/ }),

/***/ "./src/js/orderutil.ts":
/*!*****************************!*\
  !*** ./src/js/orderutil.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cancel": () => (/* binding */ Cancel),
/* harmony export */   "ImmediateTiF": () => (/* binding */ ImmediateTiF),
/* harmony export */   "Limit": () => (/* binding */ Limit),
/* harmony export */   "Maker": () => (/* binding */ Maker),
/* harmony export */   "MakerRedeemed": () => (/* binding */ MakerRedeemed),
/* harmony export */   "MakerSwapCast": () => (/* binding */ MakerSwapCast),
/* harmony export */   "Market": () => (/* binding */ Market),
/* harmony export */   "MatchComplete": () => (/* binding */ MatchComplete),
/* harmony export */   "MatchConfirmed": () => (/* binding */ MatchConfirmed),
/* harmony export */   "MatchSideMaker": () => (/* binding */ MatchSideMaker),
/* harmony export */   "MatchSideTaker": () => (/* binding */ MatchSideTaker),
/* harmony export */   "NewlyMatched": () => (/* binding */ NewlyMatched),
/* harmony export */   "OrderTypeCancel": () => (/* binding */ OrderTypeCancel),
/* harmony export */   "OrderTypeLimit": () => (/* binding */ OrderTypeLimit),
/* harmony export */   "OrderTypeMarket": () => (/* binding */ OrderTypeMarket),
/* harmony export */   "RateEncodingFactor": () => (/* binding */ RateEncodingFactor),
/* harmony export */   "StandingTiF": () => (/* binding */ StandingTiF),
/* harmony export */   "StatusBooked": () => (/* binding */ StatusBooked),
/* harmony export */   "StatusCanceled": () => (/* binding */ StatusCanceled),
/* harmony export */   "StatusEpoch": () => (/* binding */ StatusEpoch),
/* harmony export */   "StatusExecuted": () => (/* binding */ StatusExecuted),
/* harmony export */   "StatusRevoked": () => (/* binding */ StatusRevoked),
/* harmony export */   "StatusUnknown": () => (/* binding */ StatusUnknown),
/* harmony export */   "Taker": () => (/* binding */ Taker),
/* harmony export */   "TakerSwapCast": () => (/* binding */ TakerSwapCast),
/* harmony export */   "averageMarketOrderRateString": () => (/* binding */ averageMarketOrderRateString),
/* harmony export */   "averageRate": () => (/* binding */ averageRate),
/* harmony export */   "baseToQuote": () => (/* binding */ baseToQuote),
/* harmony export */   "filled": () => (/* binding */ filled),
/* harmony export */   "hasActiveMatches": () => (/* binding */ hasActiveMatches),
/* harmony export */   "isCancellable": () => (/* binding */ isCancellable),
/* harmony export */   "isMarketBuy": () => (/* binding */ isMarketBuy),
/* harmony export */   "matchStatusString": () => (/* binding */ matchStatusString),
/* harmony export */   "optionElement": () => (/* binding */ optionElement),
/* harmony export */   "orderPortion": () => (/* binding */ orderPortion),
/* harmony export */   "orderTypeText": () => (/* binding */ orderTypeText),
/* harmony export */   "sellString": () => (/* binding */ sellString),
/* harmony export */   "settled": () => (/* binding */ settled),
/* harmony export */   "statusString": () => (/* binding */ statusString),
/* harmony export */   "typeString": () => (/* binding */ typeString)
/* harmony export */ });
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _opts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opts */ "./src/js/opts.ts");
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");




const Limit = 1; // TODO: Delete for the versions below
const Market = 2; // TODO: Delete for the versions below
const Cancel = 3; // TODO: Delete for the versions below
const OrderTypeLimit = 1;
const OrderTypeMarket = 2;
const OrderTypeCancel = 3;
/* The time-in-force specifiers are a mirror of dex/order.TimeInForce. */
const ImmediateTiF = 0;
const StandingTiF = 1;
/* The order statuses are a mirror of dex/order.OrderStatus. */
const StatusUnknown = 0;
const StatusEpoch = 1;
const StatusBooked = 2;
const StatusExecuted = 3;
const StatusCanceled = 4;
const StatusRevoked = 5;
/* The match statuses are a mirror of dex/order.MatchStatus. */
const NewlyMatched = 0;
const MakerSwapCast = 1;
const TakerSwapCast = 2;
const MakerRedeemed = 3;
const MatchComplete = 4;
const MatchConfirmed = 5;
/* The match sides are a mirror of dex/order.MatchSide. */
const Maker = 0; // TODO: Delete for the versions below
const Taker = 1; // TODO: Delete for the versions below
const MatchSideMaker = 0;
const MatchSideTaker = 1;
/*
 * RateEncodingFactor is used when encoding an atomic exchange rate as an
 * integer. See docs on message-rate encoding @
 * https://github.com/decred/dcrdex/blob/master/spec/comm.mediawiki#Rate_Encoding
 */
const RateEncodingFactor = 1e8;
function sellString(ord) {
    const key = ord.sell ? _locales__WEBPACK_IMPORTED_MODULE_0__.ID_SELL : _locales__WEBPACK_IMPORTED_MODULE_0__.ID_BUY;
    const lang = document.documentElement.lang.toLowerCase();
    return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(key).toLocaleLowerCase(lang);
}
function typeString(ord) {
    return ord.type === Limit ? (ord.tif === ImmediateTiF ? _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_LIMIT_ORDER_IMMEDIATE_TIF) : _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_LIMIT_ORDER)) : _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MARKET_ORDER);
}
/* isMarketBuy will return true if the order is a market buy order. */
function isMarketBuy(ord) {
    return ord.type === Market && !ord.sell;
}
/*
 * hasActiveMatches returns true if the order has matches that have not completed
 * settlement yet.
 */
function hasActiveMatches(order) {
    if (!order.matches)
        return false;
    for (const match of order.matches) {
        if (match.active)
            return true;
    }
    return false;
}
/**
 * statusString converts the order status to a string.
 *
 * IMPORTANT: we have similar function in Golang, it must match this one exactly,
 * when updating make sure to update both!
 */
function statusString(order) {
    if (!order.id)
        return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_ORDER_SUBMITTING); // order ID is empty.
    const isLive = hasActiveMatches(order);
    switch (order.status) {
        case StatusUnknown: return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_UNKNOWN);
        case StatusEpoch: return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_EPOCH);
        case StatusBooked:
            if (order.cancelling)
                return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_CANCELING);
            return isLive ? `${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_BOOKED)}/${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_SETTLING)}` : _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_BOOKED);
        case StatusExecuted:
            if (isLive)
                return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_SETTLING);
            if (order.filled === 0 && order.type !== Cancel)
                return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_NO_MATCH);
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_EXECUTED);
        case StatusCanceled:
            return isLive ? `${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_CANCELED)}/${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_SETTLING)}` : _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_CANCELED);
        case StatusRevoked:
            return isLive ? `${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_REVOKED)}/${_locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_SETTLING)}` : _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_REVOKED);
    }
    return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_UNKNOWN);
}
/* filled sums the quantities of non-cancel matches available. */
function filled(order) {
    if (!order.matches)
        return 0;
    const qty = isMarketBuy(order) ? (m) => m.qty * m.rate / RateEncodingFactor : (m) => m.qty;
    return order.matches.reduce((filled, match) => {
        if (match.isCancel)
            return filled;
        return filled + qty(match);
    }, 0);
}
/* settled sums the quantities of the matches that have completed. */
function settled(order) {
    if (!order.matches)
        return 0;
    const qty = isMarketBuy(order) ? (m) => m.qty * m.rate / RateEncodingFactor : (m) => m.qty;
    return order.matches.reduce((settled, match) => {
        if (match.isCancel)
            return settled;
        const redeemed = (match.side === Maker && match.status >= MakerRedeemed) ||
            (match.side === Taker && match.status >= MatchComplete);
        return redeemed ? settled + qty(match) : settled;
    }, 0);
}
/* averageRateString returns a formatting string containing the average rate of
the matches that have been filled for a market order. */
function averageMarketOrderRateString(ord) {
    var _a;
    if (!((_a = ord.matches) === null || _a === void 0 ? void 0 : _a.length))
        return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MARKET_ORDER);
    let rateStr = _doc__WEBPACK_IMPORTED_MODULE_3__["default"].formatCoinValue((0,_registry__WEBPACK_IMPORTED_MODULE_1__.app)().conventionalRate(ord.baseID, ord.quoteID, averageRate(ord)));
    if (ord.matches.length > 1)
        rateStr = '~ ' + rateStr; // "~" only makes sense if the order has more than one match.
    return rateStr;
}
/* averageRate returns a the average rate of the matches that have been filled
in an order. */
function averageRate(ord) {
    var _a;
    if (!((_a = ord.matches) === null || _a === void 0 ? void 0 : _a.length))
        return 0;
    let rateProduct = 0;
    let baseQty = 0;
    for (const m of ord.matches) {
        baseQty += m.qty;
        rateProduct += (m.rate * m.qty); // order ~ 1e16
    }
    return rateProduct / baseQty;
}
/* baseToQuote returns the quantity of the quote asset. */
function baseToQuote(rate, base) {
    return rate * base / RateEncodingFactor;
}
/* orderPortion returns a string stating the percentage of the order a match
   makes up. */
function orderPortion(order, match) {
    let matchQty = match.qty;
    if (isMarketBuy(order)) {
        matchQty = baseToQuote(match.rate, match.qty);
    }
    return ((matchQty / order.qty) * 100).toFixed(1) + ' %';
}
/*
 * matchStatusString is a string used to create a displayable string describing
 * describing the match status.
 */
function matchStatusString(m) {
    if (m.revoked) {
        // When revoked, match status is less important than pending action if still
        // active, or the outcome if inactive.
        if (m.active) {
            if (m.redeem)
                return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEMPTION_SENT); // must require confirmation if active
            // If maker and we have not redeemed, waiting to refund, assuming it's not
            // revoked while waiting for confs on an unspent/unexpired taker swap.
            if (m.side === Maker)
                return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REFUND_PENDING);
            // As taker, resolution depends on maker's actions while waiting to refund.
            if (m.counterRedeem)
                return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEEM_PENDING); // this should be very brief if we see the maker's redeem
            return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REFUND_PENDING); // may switch to redeem if maker redeems on the sly
        }
        if (m.refund) {
            return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REFUNDED);
        }
        if (m.redeem) {
            return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEMPTION_CONFIRMED);
        }
        return revokedMatchStatus(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_COMPLETE); // i.e. we sent no swap
    }
    switch (m.status) {
        case NewlyMatched:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_NEWLY_MATCHED);
        case MakerSwapCast:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_MAKER_SWAP_CAST);
        case TakerSwapCast:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_TAKER_SWAP_CAST);
        case MakerRedeemed:
            if (m.side === Maker) {
                return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEMPTION_SENT);
            }
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_MAKER_REDEEMED);
        case MatchComplete:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEMPTION_SENT);
        case MatchConfirmed:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REDEMPTION_CONFIRMED);
    }
    return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_UNKNOWN);
}
// revokedMatchStatus is a helper function that returns the revoked match status
// string.
function revokedMatchStatus(matchStatus) {
    return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MATCH_STATUS_REVOKED, { status: _locales__WEBPACK_IMPORTED_MODULE_0__.prep(matchStatus) });
}
/*
 * optionElement is a getter for an element matching the *OrderOption from
 * client/asset. change is a function with no arguments that is called when the
 * returned option's value has changed.
 */
function optionElement(opt, order, change, isSwap) {
    const isBaseChain = (isSwap && order.sell) || (!isSwap && !order.sell);
    const symbol = isBaseChain ? dexAssetSymbol(order.host, order.base) : dexAssetSymbol(order.host, order.quote);
    switch (true) {
        case !!opt.boolean:
            return new _opts__WEBPACK_IMPORTED_MODULE_2__.BooleanOption(opt, symbol, order.options, change).node;
        case !!opt.xyRange:
            return new _opts__WEBPACK_IMPORTED_MODULE_2__.XYRangeOption(opt, symbol, order.options, change).node;
        default:
            console.error('no option type specified', opt);
    }
    console.error('unknown option type', opt);
    return document.createElement('div');
}
function dexAssetSymbol(host, assetID) {
    return (0,_registry__WEBPACK_IMPORTED_MODULE_1__.app)().exchanges[host].assets[assetID].symbol;
}
function isCancellable(ord) {
    return ord.type === Limit && ord.tif === StandingTiF && ord.status < StatusExecuted;
}
function orderTypeText(ordType) {
    switch (ordType) {
        case OrderTypeLimit:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_LIMIT_ORDER);
        case OrderTypeMarket:
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_MARKET_ORDER);
        default: // OrderTypeCancel
            return _locales__WEBPACK_IMPORTED_MODULE_0__.prep(_locales__WEBPACK_IMPORTED_MODULE_0__.ID_CANCEL_ORDER);
    }
}


/***/ }),

/***/ "./src/js/register.ts":
/*!****************************!*\
  !*** ./src/js/register.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RegistrationPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RegistrationPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(body, data) {
        super();
        this.body = body;
        this.data = data;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(body);
        if (data.host && page.dexAddrForm.classList.contains('selected')) {
            page.dexAddrForm.classList.remove('selected');
            page.discoverAcctForm.classList.add('selected');
            page.discoverAcctForm.dataset.host = data.host;
        }
        // Hide the form closers for the registration process except for the
        // password reset form closer.
        for (const el of body.querySelectorAll('.form-closer'))
            if (el !== page.resetPassFormCloser)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(el);
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.NewWalletForm(page.newWalletForm, assetID => this.newWalletCreated(assetID, this.confirmRegisterForm.tier), () => this.animateRegAsset(page.newWalletForm));
        // ADD DEX
        this.dexAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.DEXAddressForm(page.dexAddrForm, (xc, certFile) => __awaiter(this, void 0, void 0, function* () {
            this.requestFeepayment(page.dexAddrForm, xc, certFile);
        }));
        const addr = page.discoverAcctForm.dataset.host;
        if (addr) {
            this.discoverAcctForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.DiscoverAccountForm(page.discoverAcctForm, addr, (xc) => __awaiter(this, void 0, void 0, function* () {
                this.requestFeepayment(page.discoverAcctForm, xc, '');
            }));
        }
        // SELECT REG ASSET
        this.regAssetForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.FeeAssetSelectionForm(page.regAssetForm, (assetID, tier) => __awaiter(this, void 0, void 0, function* () {
            if (assetID === _registry__WEBPACK_IMPORTED_MODULE_4__.PrepaidBondID) {
                this.registerDEXSuccess();
                return;
            }
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().assets[assetID];
            const wallet = asset.wallet;
            if (wallet) {
                const bondAsset = this.xc.bondAssets[asset.symbol];
                const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.regAssetForm);
                this.confirmRegisterForm.setAsset(assetID, tier, bondsFeeBuffer);
                if (wallet.synced && wallet.balance.available >= 2 * bondAsset.amount + bondsFeeBuffer) {
                    this.animateConfirmForm(page.regAssetForm);
                    return;
                }
                this.walletWaitForm.setWallet(assetID, bondsFeeBuffer, tier);
                (0,_forms__WEBPACK_IMPORTED_MODULE_3__.slideSwap)(page.regAssetForm, page.walletWait);
                return;
            }
            this.confirmRegisterForm.tier = tier;
            this.newWalletForm.setAsset(assetID);
            (0,_forms__WEBPACK_IMPORTED_MODULE_3__.slideSwap)(page.regAssetForm, page.newWalletForm);
        }));
        this.walletWaitForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.WalletWaitForm(page.walletWait, () => {
            this.animateConfirmForm(page.walletWait);
        }, () => { this.animateRegAsset(page.walletWait); });
        // SUBMIT DEX REGISTRATION
        this.confirmRegisterForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.ConfirmRegistrationForm(page.confirmRegForm, () => {
            this.registerDEXSuccess();
        }, () => {
            this.animateRegAsset(page.confirmRegForm);
        });
        const currentForm = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].safeSelector(page.forms, ':scope > form.selected');
        currentForm.classList.remove('selected');
        switch (currentForm) {
            case page.dexAddrForm:
                this.dexAddrForm.animate();
                break;
            case page.discoverAcctForm:
                this.discoverAcctForm.animate();
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(currentForm);
        // There's nothing on the page.discoverAcctForm except to receive user pass
        // before attempting to discover user account and there's no need to have
        // them click another button when we can carry on without user interaction.
        if (currentForm === page.discoverAcctForm) {
            this.discoverAcctForm.page.submit.click();
        }
        if ((0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().authed)
            this.auth();
    }
    // auth should be called once user is known to be authed with the server.
    auth() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().fetchUser();
        });
    }
    requestFeepayment(oldForm, xc, certFile) {
        return __awaiter(this, void 0, void 0, function* () {
            this.xc = xc;
            this.confirmRegisterForm.setExchange(xc, certFile);
            this.walletWaitForm.setExchange(xc);
            this.regAssetForm.setExchange(xc, certFile);
            this.animateRegAsset(oldForm);
        });
    }
    /* Swap in the asset selection form and run the animation. */
    animateRegAsset(oldForm) {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(oldForm);
            this.regAssetForm.animate();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.regAssetForm);
        });
    }
    /* Swap in the confirmation form and run the animation. */
    animateConfirmForm(oldForm) {
        return __awaiter(this, void 0, void 0, function* () {
            this.confirmRegisterForm.animate();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(oldForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.confirmRegForm);
        });
    }
    // Retrieve an estimate for the tx fee needed to create new bond reserves.
    getBondsFeeBuffer(assetID, form) {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().loading(form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/bondsfeebuffer', { assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().checkResponse(res)) {
                return 0;
            }
            return res.feeBuffer;
        });
    }
    /* gets the contents of the cert file */
    getCertFile() {
        return __awaiter(this, void 0, void 0, function* () {
            let cert = '';
            if (this.dexAddrForm.page.certFile.value) {
                const files = this.dexAddrForm.page.certFile.files;
                if (files && files.length)
                    cert = yield files[0].text();
            }
            return cert;
        });
    }
    /* Called after successful registration to a DEX. */
    registerDEXSuccess() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().fetchUser();
            (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().updateMenuItemsDisplay();
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().loadPage(this.data.backTo || 'markets');
        });
    }
    newWalletCreated(assetID, tier) {
        return __awaiter(this, void 0, void 0, function* () {
            this.regAssetForm.refresh();
            const user = yield (0,_registry__WEBPACK_IMPORTED_MODULE_4__.app)().fetchUser();
            if (!user)
                return;
            const page = this.page;
            const asset = user.assets[assetID];
            const wallet = asset.wallet;
            const bondAmt = this.xc.bondAssets[asset.symbol].amount;
            const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.newWalletForm);
            this.walletWaitForm.setWallet(assetID, bondsFeeBuffer, tier);
            this.confirmRegisterForm.setAsset(assetID, tier, bondsFeeBuffer);
            if (wallet.synced && wallet.balance.available >= 2 * bondAmt + bondsFeeBuffer) {
                yield this.animateConfirmForm(page.newWalletForm);
                return;
            }
            yield (0,_forms__WEBPACK_IMPORTED_MODULE_3__.slideSwap)(page.newWalletForm, page.walletWait);
        });
    }
}


/***/ }),

/***/ "./src/js/registry.ts":
/*!****************************!*\
  !*** ./src/js/registry.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApprovalStatus": () => (/* binding */ ApprovalStatus),
/* harmony export */   "ConnectionStatus": () => (/* binding */ ConnectionStatus),
/* harmony export */   "PeerSource": () => (/* binding */ PeerSource),
/* harmony export */   "PrepaidBondID": () => (/* binding */ PrepaidBondID),
/* harmony export */   "app": () => (/* binding */ app),
/* harmony export */   "registerApplication": () => (/* binding */ registerApplication)
/* harmony export */ });
var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus[ConnectionStatus["Disconnected"] = 0] = "Disconnected";
    ConnectionStatus[ConnectionStatus["Connected"] = 1] = "Connected";
    ConnectionStatus[ConnectionStatus["InvalidCert"] = 2] = "InvalidCert";
})(ConnectionStatus || (ConnectionStatus = {}));
var ApprovalStatus;
(function (ApprovalStatus) {
    ApprovalStatus[ApprovalStatus["Approved"] = 0] = "Approved";
    ApprovalStatus[ApprovalStatus["Pending"] = 1] = "Pending";
    ApprovalStatus[ApprovalStatus["NotApproved"] = 2] = "NotApproved";
})(ApprovalStatus || (ApprovalStatus = {}));
// changing the order of the elements in this enum will affect
// the sorting of the peers table in wallets.ts.
var PeerSource;
(function (PeerSource) {
    PeerSource[PeerSource["WalletDefault"] = 0] = "WalletDefault";
    PeerSource[PeerSource["UserAdded"] = 1] = "UserAdded";
    PeerSource[PeerSource["Discovered"] = 2] = "Discovered";
})(PeerSource || (PeerSource = {}));
const PrepaidBondID = 2147483647;
// TODO: Define an interface for Application?
let application;
function registerApplication(a) {
    application = a;
}
function app() {
    return application;
}


/***/ }),

/***/ "./src/js/settings.ts":
/*!****************************!*\
  !*** ./src/js/settings.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SettingsPage)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./notifications */ "./src/js/notifications.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};









const animationLength = 300;
class SettingsPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(body) {
        super();
        this.body = body;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(body);
        this.forms = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.forms, ':scope > form');
        this.fiatRateSources = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.fiatRateSources, 'input[type=checkbox]');
        page.darkMode.checked = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_2__["default"].darkModeLK) === '1';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.darkMode, 'click', () => {
            _state__WEBPACK_IMPORTED_MODULE_2__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_2__["default"].darkModeLK, page.darkMode.checked || false ? '1' : '0');
            if (page.darkMode.checked) {
                document.body.classList.add('dark');
            }
            else {
                document.body.classList.remove('dark');
            }
        });
        page.showPokes.checked = _state__WEBPACK_IMPORTED_MODULE_2__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_2__["default"].popupsLK) === '1';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showPokes, 'click', () => {
            const show = page.showPokes.checked || false;
            _state__WEBPACK_IMPORTED_MODULE_2__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_2__["default"].popupsLK, show ? '1' : '0');
            (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().showPopups = show;
        });
        page.commitHash.textContent = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().commitHash.substring(0, 7);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.addADex, 'click', () => {
            this.dexAddrForm.refresh();
            this.showForm(page.dexAddrForm);
        });
        this.fiatRateSources.forEach(src => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(src, 'change', () => __awaiter(this, void 0, void 0, function* () {
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/toggleratesource', {
                    disable: !src.checked,
                    source: src.value
                });
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(res)) {
                    src.checked = !src.checked;
                }
                // Update asset rate values and disable conversion status.
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().fetchUser();
            }));
        });
        // Asset selection
        this.regAssetForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.FeeAssetSelectionForm(page.regAssetForm, (assetID, tier) => __awaiter(this, void 0, void 0, function* () {
            if (assetID === _registry__WEBPACK_IMPORTED_MODULE_8__.PrepaidBondID) {
                yield (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().fetchUser();
                window.location.reload();
                return;
            }
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().assets[assetID];
            const wallet = asset.wallet;
            if (wallet) {
                const bondAsset = this.currentDEX.bondAssets[asset.symbol];
                const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.regAssetForm);
                this.confirmRegisterForm.setAsset(assetID, tier, bondsFeeBuffer);
                if (wallet.synced && wallet.balance.available >= 2 * bondAsset.amount + bondsFeeBuffer) {
                    this.animateConfirmForm(page.regAssetForm);
                    return;
                }
                this.walletWaitForm.setWallet(assetID, bondsFeeBuffer, tier);
                this.slideSwap(page.walletWait);
                return;
            }
            this.confirmRegisterForm.setAsset(assetID, tier, 0);
            this.newWalletForm.setAsset(assetID);
            this.slideSwap(page.newWalletForm);
        }));
        // Approve fee payment
        this.confirmRegisterForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.ConfirmRegistrationForm(page.confirmRegForm, () => {
            this.registerDEXSuccess();
        }, () => {
            this.animateRegAsset(page.confirmRegForm);
        });
        // Create a new wallet
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.NewWalletForm(page.newWalletForm, assetID => this.newWalletCreated(assetID, this.confirmRegisterForm.tier), () => this.animateRegAsset(page.newWalletForm));
        this.walletWaitForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.WalletWaitForm(page.walletWait, () => {
            this.animateConfirmForm(page.walletWait);
        }, () => { this.animateRegAsset(page.walletWait); });
        // Enter an address for a new DEX
        this.dexAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.DEXAddressForm(page.dexAddrForm, (xc, certFile) => __awaiter(this, void 0, void 0, function* () {
            this.currentDEX = xc;
            this.confirmRegisterForm.setExchange(xc, certFile);
            this.walletWaitForm.setExchange(xc);
            this.regAssetForm.setExchange(xc, certFile);
            this.animateRegAsset(page.dexAddrForm);
        }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.importAccount, 'click', () => this.prepareAccountImport(page.authorizeAccountImportForm));
        _forms__WEBPACK_IMPORTED_MODULE_4__.bind(page.authorizeAccountImportForm, page.authorizeImportAccountConfirm, () => this.importAccount());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.changeAppPW, 'click', () => this.showForm(page.changeAppPWForm));
        _forms__WEBPACK_IMPORTED_MODULE_4__.bind(page.changeAppPWForm, page.submitNewPW, () => this.changeAppPW());
        this.appPassResetForm = new _forms__WEBPACK_IMPORTED_MODULE_4__.AppPassResetForm(page.resetAppPWForm, () => __awaiter(this, void 0, void 0, function* () {
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loadPage('login');
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
        }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.resetAppPW, 'click', () => {
            this.appPassResetForm.refresh();
            this.showForm(page.resetAppPWForm);
            this.appPassResetForm.focus();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.accountFile, 'change', () => this.onAccountFileChange());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.removeAccount, 'click', () => this.clearAccountFile());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.addAccount, 'click', () => page.accountFile.click());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.exportSeed, 'click', () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.exportSeedErr);
            this.showForm(page.exportSeedAuth);
        });
        _forms__WEBPACK_IMPORTED_MODULE_4__.bind(page.exportSeedAuth, page.exportSeedSubmit, () => this.submitExportSeedReq());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.gameCodeLink, 'click', () => this.showForm(page.gameCodeForm));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.gameCodeSubmit, 'click', () => this.submitGameCode());
        const closePopups = () => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            page.exportSeedPW.value = '';
            page.legacySeed.textContent = '';
            page.mnemonic.textContent = '';
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                closePopups();
            }
        });
        this.keyup = (e) => {
            if (e.key === 'Escape') {
                closePopups();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'keyup', this.keyup);
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => { closePopups(); });
        });
        this.renderDesktopNtfnSettings();
    }
    updateNtfnSetting(e) {
        const checkbox = e.target;
        const noteType = checkbox.getAttribute('name');
        if (noteType === null)
            return;
        const enabled = checkbox.checked;
        (0,_notifications__WEBPACK_IMPORTED_MODULE_7__.updateNtfnSetting)(noteType, enabled);
    }
    getBrowserNtfnSettings() {
        const permissions = (0,_notifications__WEBPACK_IMPORTED_MODULE_7__.fetchDesktopNtfnSettings)();
        return permissions;
    }
    renderDesktopNtfnSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const ntfnSettings = this.getBrowserNtfnSettings();
            const labels = _notifications__WEBPACK_IMPORTED_MODULE_7__.desktopNtfnLabels;
            const tmpl = page.browserNtfnCheckboxTemplate;
            tmpl.removeAttribute('id');
            const container = page.browserNtfnCheckboxContainer;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.browserNtfnCheckboxContainer);
            Object.keys(labels).forEach((noteType) => {
                const html = tmpl.cloneNode(true);
                const enabled = ntfnSettings[noteType];
                const checkbox = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(html, 'checkbox');
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(html, 'label').textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(labels[noteType]);
                checkbox.setAttribute('name', noteType);
                if (enabled)
                    checkbox.setAttribute('checked', 'checked');
                container.appendChild(html);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(checkbox, 'click', this.updateNtfnSetting);
            });
            const enabledCheckbox = page.browserNtfnEnabled;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(enabledCheckbox, 'click', (e) => __awaiter(this, void 0, void 0, function* () {
                if (_notifications__WEBPACK_IMPORTED_MODULE_7__.Notifier.ntfnPermissionDenied())
                    return;
                const checkbox = e.target;
                if (checkbox.checked) {
                    yield _notifications__WEBPACK_IMPORTED_MODULE_7__.Notifier.requestNtfnPermission();
                    checkbox.checked = !_notifications__WEBPACK_IMPORTED_MODULE_7__.Notifier.ntfnPermissionDenied();
                }
                this.updateNtfnSetting(e);
                checkbox.dispatchEvent(new Event('change'));
            }));
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(enabledCheckbox, 'change', (e) => {
                const checkbox = e.target;
                const permDenied = _notifications__WEBPACK_IMPORTED_MODULE_7__.Notifier.ntfnPermissionDenied();
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(checkbox.checked, page.browserNtfnCheckboxContainer);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(permDenied, page.browserNtfnBlockedMsg);
                checkbox.disabled = permDenied;
            });
            enabledCheckbox.checked = (_notifications__WEBPACK_IMPORTED_MODULE_7__.Notifier.ntfnPermissionGranted() && ntfnSettings.browserNtfnEnabled);
            enabledCheckbox.dispatchEvent(new Event('change'));
        });
    }
    /*
     * slideSwap animates the replacement of the currently shown form with the
     * newForm and sets this.currentForm.
     */
    slideSwap(newForm) {
        _forms__WEBPACK_IMPORTED_MODULE_4__.slideSwap(this.currentForm, newForm);
        this.currentForm = newForm;
    }
    // Retrieve an estimate for the tx fee needed to create new bond reserves.
    getBondsFeeBuffer(assetID, form) {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loading(form);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/bondsfeebuffer', { assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(res)) {
                return 0;
            }
            return res.feeBuffer;
        });
    }
    newWalletCreated(assetID, tier) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().fetchUser();
            if (!user)
                return;
            const page = this.page;
            const asset = user.assets[assetID];
            const wallet = asset.wallet;
            const bondAmt = this.currentDEX.bondAssets[asset.symbol].amount;
            const bondsFeeBuffer = yield this.getBondsFeeBuffer(assetID, page.newWalletForm);
            this.confirmRegisterForm.setFees(assetID, bondsFeeBuffer);
            if (wallet.synced && wallet.balance.available >= 2 * bondAmt + bondsFeeBuffer) {
                yield this.animateConfirmForm(page.newWalletForm);
                return;
            }
            this.walletWaitForm.setWallet(assetID, bondsFeeBuffer, tier);
            this.slideSwap(page.walletWait);
        });
    }
    onAccountFileChange() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const files = page.accountFile.files;
            if (!files || !files.length)
                return;
            page.selectedAccount.textContent = files[0].name;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.removeAccount);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.addAccount);
        });
    }
    /* clearAccountFile cleanup accountFile value and selectedAccount text */
    clearAccountFile() {
        const page = this.page;
        page.accountFile.value = '';
        page.selectedAccount.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NONE_SELECTED);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.removeAccount);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.addAccount);
    }
    prepareAccountImport(authorizeAccountImportForm) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            page.importAccountErr.textContent = '';
            this.showForm(authorizeAccountImportForm);
        });
    }
    // importAccount imports the account
    importAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            let accountString = '';
            if (page.accountFile.value) {
                const files = page.accountFile.files;
                if (!files || !files.length) {
                    console.error('importAccount: no file specified');
                    return;
                }
                accountString = yield files[0].text();
            }
            let account;
            try {
                account = JSON.parse(accountString);
            }
            catch (e) {
                page.importAccountErr.textContent = e.message;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.importAccountErr);
                return;
            }
            if (typeof account === 'undefined') {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.importAccountErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ACCT_UNDEFINED));
                return;
            }
            const { bonds = [] } = account, acctInf = __rest(account, ["bonds"]);
            const req = {
                account: acctInf,
                bonds: bonds
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/importaccount', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.importAccountErr, res.msg);
                return;
            }
            yield (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().fetchUser();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
            // Initial method of displaying imported account.
            window.location.reload();
        });
    }
    submitExportSeedReq() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const pw = page.exportSeedPW.value;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/exportseed', { pass: pw });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.exportSeedErr, res.msg);
                return;
            }
            page.exportSeedPW.value = '';
            if (res.seed.length === 128 && res.seed.split(' ').length === 1) {
                page.legacySeed.textContent = res.seed.match(/.{1,32}/g).map((chunk) => { var _a; return (_a = chunk.match(/.{1,8}/g)) === null || _a === void 0 ? void 0 : _a.join(' '); }).join('\n');
            }
            else
                page.mnemonic.textContent = res.seed;
            this.showForm(page.authorizeSeedDisplay);
        });
    }
    /* showForm shows a modal form with a little animation. */
    showForm(form) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.currentForm = form;
            this.forms.forEach(form => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form));
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, form);
            const shift = (page.forms.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0';
        });
    }
    /* gets the contents of the cert file */
    getCertFile() {
        return __awaiter(this, void 0, void 0, function* () {
            let cert = '';
            if (this.dexAddrForm.page.certFile.value) {
                const files = this.dexAddrForm.page.certFile.files;
                if (files && files.length)
                    cert = yield files[0].text();
            }
            return cert;
        });
    }
    /* Called after successful registration to a DEX. */
    registerDEXSuccess() {
        return __awaiter(this, void 0, void 0, function* () {
            window.location.reload();
        });
    }
    /* Change application password  */
    changeAppPW() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.changePWErrMsg);
            const clearValues = () => {
                page.appPW.value = '';
                page.newAppPW.value = '';
                page.confirmNewPW.value = '';
            };
            // Ensure password fields are nonempty.
            if (!page.appPW.value || !page.newAppPW.value || !page.confirmNewPW.value) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.changePWErrMsg, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NO_APP_PASS_ERROR_MSG));
                clearValues();
                return;
            }
            // Ensure password confirmation matches.
            if (page.newAppPW.value !== page.confirmNewPW.value) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.changePWErrMsg, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_PASSWORD_NOT_MATCH));
                clearValues();
                return;
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loading(page.changeAppPW);
            const req = {
                appPW: page.appPW.value,
                newAppPW: page.newAppPW.value
            };
            clearValues();
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/changeapppass', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.changePWErrMsg, res.msg);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.forms);
        });
    }
    /*
     * unload is called by the Application when the user navigates away from
     * the /settings page.
     */
    unload() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'keyup', this.keyup);
    }
    /* Swap in the asset selection form and run the animation. */
    animateRegAsset(oldForm) {
        return __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(oldForm);
            const form = this.page.regAssetForm;
            this.currentForm = form;
            this.regAssetForm.animate();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(form);
        });
    }
    /* Swap in the confirmation form and run the animation. */
    animateConfirmForm(oldForm) {
        return __awaiter(this, void 0, void 0, function* () {
            this.confirmRegisterForm.animate();
            const form = this.page.confirmRegForm;
            this.currentForm = form;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(oldForm);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(form);
        });
    }
    submitGameCode() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.gameCodeErr);
            const code = page.gameCodeInput.value;
            if (!code) {
                page.gameCodeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NO_CODE_PROVIDED);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.gameCodeErr);
                return;
            }
            const msg = page.gameCodeMsg.value || '';
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().loading(page.gameCodeForm);
            const resp = yield (0,_http__WEBPACK_IMPORTED_MODULE_3__.postJSON)('/api/redeemgamecode', { code, msg });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().checkResponse(resp)) {
                page.gameCodeErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_API_ERROR, { msg: resp.msg });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.gameCodeErr);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.gameCodeSuccess);
            page.gameRedeemTx.dataset.explorerCoin = resp.coinString;
            const dcrBipID = 42;
            (0,_coinexplorers__WEBPACK_IMPORTED_MODULE_6__.setCoinHref)(dcrBipID, page.gameRedeemTx);
            page.gameRedeemTx.textContent = resp.coinString;
            const ui = (0,_registry__WEBPACK_IMPORTED_MODULE_8__.app)().unitInfo(dcrBipID);
            page.gameRedeemValue.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(resp.win, ui);
        });
    }
}


/***/ }),

/***/ "./src/js/state.ts":
/*!*************************!*\
  !*** ./src/js/state.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// State is a set of static methods for working with the user state. It has
// utilities for setting and retrieving cookies and storing user configuration
// to localStorage.
class State {
    static setCookie(cname, cvalue) {
        const d = new Date();
        // Set cookie to expire in ten years.
        d.setTime(d.getTime() + (86400 * 365 * 10 * 1000));
        const expires = 'expires=' + d.toUTCString();
        document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
    }
    /*
     * getCookie returns the value at the specified cookie name, otherwise null.
     */
    static getCookie(cname) {
        for (const cstr of document.cookie.split(';')) {
            const [k, v] = cstr.split('=');
            if (k.trim() === cname)
                return v;
        }
        return null;
    }
    /*
     * removeCookie tells the browser to stop using cookie. It's not enough to simply
     * erase cookie value because browser will still send it to the server (with empty
     * value), and that's not what server expects.
     */
    static removeCookie(cKey) {
        document.cookie = `${cKey}=;expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
    }
    /*
     * isDark returns true if the dark-mode cookie is currently set to '1' = true.
     */
    static isDark() {
        return State.fetchLocal(State.darkModeLK) === '1';
    }
    /* storeLocal puts the key-value pair into Window.localStorage. */
    static storeLocal(k, v) {
        window.localStorage.setItem(k, JSON.stringify(v));
    }
    /*
    * fetchLocal the value associated with the key in Window.localStorage, or
    * null if the no value exists for the key.
    */
    static fetchLocal(k) {
        const v = window.localStorage.getItem(k);
        if (v !== null) {
            return JSON.parse(v);
        }
        return null;
    }
    /* removeLocal removes the key-value pair from Window.localStorage. */
    static removeLocal(k) {
        window.localStorage.removeItem(k);
    }
}
// Cookie keys.
State.darkModeLK = 'darkMode';
State.authCK = 'dexauth';
State.pwKeyCK = 'sessionkey';
// Local storage keys (for data that we don't need at the server).
State.popupsLK = 'popups';
State.loggersLK = 'loggers';
State.recordersLK = 'recorders';
State.lastMarketLK = 'selectedMarket';
State.depthZoomLK = 'depthZoom';
State.lastMMMarketLK = 'mmMarket';
State.optionsExpansionLK = 'mmOptsExpand';
State.leftMarketDockLK = 'leftmarketdock';
State.selectedAssetLK = 'selectedasset';
State.notificationsLK = 'notifications'; // DEPRECATED before v1
State.orderDisclaimerAckedLK = 'ordAck';
State.lastCandleDurationLK = 'lastCandleDuration';
State.localeSpecsKey = 'localeSpecsLK';
State.localeKey = 'localeLK';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (State);
// Setting defaults here, unless specific cookie (or local storage) value was already chosen by the user.
if (State.fetchLocal(State.darkModeLK) === null)
    State.storeLocal(State.darkModeLK, '1');
if (State.fetchLocal(State.popupsLK) === null)
    State.storeLocal(State.popupsLK, '1');
if (State.fetchLocal(State.leftMarketDockLK) === null)
    State.storeLocal(State.leftMarketDockLK, '1');


/***/ }),

/***/ "./src/js/wallets.ts":
/*!***************************!*\
  !*** ./src/js/wallets.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WalletsPage),
/* harmony export */   "ticketStatusExpired": () => (/* binding */ ticketStatusExpired),
/* harmony export */   "ticketStatusImmature": () => (/* binding */ ticketStatusImmature),
/* harmony export */   "ticketStatusLive": () => (/* binding */ ticketStatusLive),
/* harmony export */   "ticketStatusMissed": () => (/* binding */ ticketStatusMissed),
/* harmony export */   "ticketStatusRevoked": () => (/* binding */ ticketStatusRevoked),
/* harmony export */   "ticketStatusTranslationKeys": () => (/* binding */ ticketStatusTranslationKeys),
/* harmony export */   "ticketStatusUnknown": () => (/* binding */ ticketStatusUnknown),
/* harmony export */   "ticketStatusUnmined": () => (/* binding */ ticketStatusUnmined),
/* harmony export */   "ticketStatusUnspent": () => (/* binding */ ticketStatusUnspent),
/* harmony export */   "ticketStatusVoted": () => (/* binding */ ticketStatusVoted),
/* harmony export */   "txTypeAcceleration": () => (/* binding */ txTypeAcceleration),
/* harmony export */   "txTypeApproveToken": () => (/* binding */ txTypeApproveToken),
/* harmony export */   "txTypeCreateBond": () => (/* binding */ txTypeCreateBond),
/* harmony export */   "txTypeMixing": () => (/* binding */ txTypeMixing),
/* harmony export */   "txTypeReceive": () => (/* binding */ txTypeReceive),
/* harmony export */   "txTypeRedeem": () => (/* binding */ txTypeRedeem),
/* harmony export */   "txTypeRedeemBond": () => (/* binding */ txTypeRedeemBond),
/* harmony export */   "txTypeRefund": () => (/* binding */ txTypeRefund),
/* harmony export */   "txTypeRevokeTokenApproval": () => (/* binding */ txTypeRevokeTokenApproval),
/* harmony export */   "txTypeSelfSend": () => (/* binding */ txTypeSelfSend),
/* harmony export */   "txTypeSend": () => (/* binding */ txTypeSend),
/* harmony export */   "txTypeSplit": () => (/* binding */ txTypeSplit),
/* harmony export */   "txTypeString": () => (/* binding */ txTypeString),
/* harmony export */   "txTypeSwap": () => (/* binding */ txTypeSwap),
/* harmony export */   "txTypeSwapOrSend": () => (/* binding */ txTypeSwapOrSend),
/* harmony export */   "txTypeTicketPurchase": () => (/* binding */ txTypeTicketPurchase),
/* harmony export */   "txTypeTicketRevocation": () => (/* binding */ txTypeTicketRevocation),
/* harmony export */   "txTypeTicketVote": () => (/* binding */ txTypeTicketVote),
/* harmony export */   "txTypeUnknown": () => (/* binding */ txTypeUnknown)
/* harmony export */ });
/* harmony import */ var _doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doc */ "./src/js/doc.ts");
/* harmony import */ var _basepage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basepage */ "./src/js/basepage.ts");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ "./src/js/http.ts");
/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forms */ "./src/js/forms.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state */ "./src/js/state.ts");
/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales */ "./src/js/locales.ts");
/* harmony import */ var _orderutil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./orderutil */ "./src/js/orderutil.ts");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./registry */ "./src/js/registry.ts");
/* harmony import */ var _coinexplorers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coinexplorers */ "./src/js/coinexplorers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









const animationLength = 300;
const traitRescanner = 1;
const traitLogFiler = 1 << 2;
const traitRecoverer = 1 << 5;
const traitWithdrawer = 1 << 6;
const traitRestorer = 1 << 8;
const traitTxFeeEstimator = 1 << 9;
const traitPeerManager = 1 << 10;
const traitTokenApprover = 1 << 13;
const traitTicketBuyer = 1 << 15;
const traitHistorian = 1 << 16;
const traitFundsMixer = 1 << 17;
const traitsExtraOpts = traitLogFiler | traitRecoverer | traitRestorer | traitRescanner | traitPeerManager | traitTokenApprover;
const ticketStatusUnknown = 0;
const ticketStatusUnmined = 1;
const ticketStatusImmature = 2;
const ticketStatusLive = 3;
const ticketStatusVoted = 4;
const ticketStatusMissed = 5;
const ticketStatusExpired = 6;
const ticketStatusUnspent = 7;
const ticketStatusRevoked = 8;
const ticketStatusTranslationKeys = [
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_UNKNOWN,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_UNMINED,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_IMMATURE,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_LIVE,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_VOTED,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_MISSED,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_EXPIRED,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_UNSPENT,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKET_STATUS_REVOKED
];
const txTypeUnknown = 0;
const txTypeSend = 1;
const txTypeReceive = 2;
const txTypeSwap = 3;
const txTypeRedeem = 4;
const txTypeRefund = 5;
const txTypeSplit = 6;
const txTypeCreateBond = 7;
const txTypeRedeemBond = 8;
const txTypeApproveToken = 9;
const txTypeAcceleration = 10;
const txTypeSelfSend = 11;
const txTypeRevokeTokenApproval = 12;
const txTypeTicketPurchase = 13;
const txTypeTicketVote = 14;
const txTypeTicketRevocation = 15;
const txTypeSwapOrSend = 16;
const txTypeMixing = 17;
const positiveTxTypes = [
    txTypeReceive,
    txTypeRedeem,
    txTypeRefund,
    txTypeRedeemBond,
    txTypeTicketVote,
    txTypeTicketRevocation
];
const negativeTxTypes = [
    txTypeSend,
    txTypeSwap,
    txTypeCreateBond,
    txTypeTicketPurchase,
    txTypeSwapOrSend
];
const noAmtTxTypes = [
    txTypeSplit,
    txTypeApproveToken,
    txTypeAcceleration,
    txTypeRevokeTokenApproval
];
function txTypeSignAndClass(txType) {
    if (positiveTxTypes.includes(txType))
        return ['+', 'positive-tx'];
    if (negativeTxTypes.includes(txType))
        return ['-', 'negative-tx'];
    return ['', ''];
}
const txTypeTranslationKeys = [
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_UNKNOWN,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_SEND,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_RECEIVE,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_SWAP,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_REDEEM,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_REFUND,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_SPLIT,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_CREATE_BOND,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_REDEEM_BOND,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_APPROVE_TOKEN,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_ACCELERATION,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_SELF_TRANSFER,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_REVOKE_TOKEN_APPROVAL,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_TICKET_PURCHASE,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_TICKET_VOTE,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_TICKET_REVOCATION,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_SWAP_OR_SEND,
    _locales__WEBPACK_IMPORTED_MODULE_5__.ID_TX_TYPE_MIX
];
function txTypeString(txType) {
    return _locales__WEBPACK_IMPORTED_MODULE_5__.prep(txTypeTranslationKeys[txType]);
}
const ticketPageSize = 10;
const scanStartMempool = -1;
let net = 0;
class WalletsPage extends _basepage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(body, data) {
        super();
        this.body = body;
        this.data = data;
        const page = this.page = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].idDescendants(body);
        this.stampers = [];
        net = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().user.net;
        const setStamp = () => {
            for (const span of this.stampers) {
                if (span.dataset.stamp) {
                    span.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(parseInt(span.dataset.stamp || '') * 1000);
                }
            }
        };
        this.secondTicker = window.setInterval(() => {
            setStamp();
        }, 10000); // update every 10 seconds
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.restoreInfoCard, page.connectedIconTmpl, page.disconnectedIconTmpl, page.removeIconTmpl);
        this.restoreInfoCard = page.restoreInfoCard.cloneNode(true);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.connectedIconTmpl, page.disconnectedIconTmpl, page.removeIconTmpl);
        this.forms = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].applySelector(page.forms, ':scope > form');
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => { this.closePopups(); });
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.cancelForce, 'click', () => { this.closePopups(); });
        this.selectedAssetID = -1;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].cleanTemplates(page.iconSelectTmpl, page.balanceDetailRow, page.recentOrderTmpl, page.vspRowTmpl, page.ticketHistoryRowTmpl, page.votingChoiceTmpl, page.votingAgendaTmpl, page.tspendTmpl, page.tkeyTmpl, page.txHistoryRowTmpl, page.txHistoryDateRowTmpl);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.createWallet, 'click', () => this.showNewWallet(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.connectBttn, 'click', () => this.doConnect(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.send, 'click', () => this.showSendForm(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.receive, 'click', () => this.showDeposit(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.unlockBttn, 'click', () => this.openWallet(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.lockBttn, 'click', () => this.lock(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.reconfigureBttn, 'click', () => this.showReconfig(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.needsProviderBttn, 'click', () => this.showReconfig(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.rescanWallet, 'click', () => this.rescanWallet(this.selectedAssetID));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.earlierTxs, 'click', () => this.loadEarlierTxs());
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.copyTxIDBtn, 'click', () => { var _a; (0,_doc__WEBPACK_IMPORTED_MODULE_0__.setupCopyBtn)(((_a = this.currTx) === null || _a === void 0 ? void 0 : _a.id) || '', page.txDetailsID, page.copyTxIDBtn, '#1e7d11'); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.copyRecipientBtn, 'click', () => { var _a; (0,_doc__WEBPACK_IMPORTED_MODULE_0__.setupCopyBtn)(((_a = this.currTx) === null || _a === void 0 ? void 0 : _a.recipient) || '', page.txDetailsRecipient, page.copyRecipientBtn, '#1e7d11'); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.copyBondIDBtn, 'click', () => { var _a, _b; (0,_doc__WEBPACK_IMPORTED_MODULE_0__.setupCopyBtn)(((_b = (_a = this.currTx) === null || _a === void 0 ? void 0 : _a.bondInfo) === null || _b === void 0 ? void 0 : _b.bondID) || '', page.txDetailsBondID, page.copyBondIDBtn, '#1e7d11'); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.copyBondAccountIDBtn, 'click', () => { var _a, _b; (0,_doc__WEBPACK_IMPORTED_MODULE_0__.setupCopyBtn)(((_b = (_a = this.currTx) === null || _a === void 0 ? void 0 : _a.bondInfo) === null || _b === void 0 ? void 0 : _b.accountID) || '', page.txDetailsBondAccountID, page.copyBondAccountIDBtn, '#1e7d11'); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.hideMixTxsCheckbox, 'change', () => { this.showTxHistory(this.selectedAssetID); });
        // Bind the new wallet form.
        this.newWalletForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.NewWalletForm(page.newWalletForm, (assetID) => {
            const fmtParams = { assetName: (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID].name };
            this.assetUpdated(assetID, page.newWalletForm, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NEW_WALLET_SUCCESS, fmtParams));
            this.sortAssetButtons();
            this.updateTicketBuyer(assetID);
            this.updatePrivacy(assetID);
        });
        // Bind the wallet reconfig form.
        this.reconfigForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.WalletConfigForm(page.reconfigInputs, false);
        this.walletCfgGuide = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(page.reconfigForm, 'walletCfgGuide');
        // Bind the send form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.sendForm, page.submitSendForm, () => __awaiter(this, void 0, void 0, function* () { this.stepSend(); }));
        // Send confirmation form.
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.vSendForm, page.vSend, () => __awaiter(this, void 0, void 0, function* () { this.send(); }));
        // Bind the wallet reconfiguration submission.
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.reconfigForm, page.submitReconfig, () => this.reconfig());
        page.forms.querySelectorAll('.form-closer').forEach(el => {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(el, 'click', () => this.closePopups());
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.forms, 'mousedown', (e) => {
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].mouseInElement(e, this.currentForm)) {
                this.closePopups();
            }
        });
        this.mixerToggle = new _doc__WEBPACK_IMPORTED_MODULE_0__.AniToggle(page.toggleMixer, page.mixingErr, false, (newState) => { return this.updateMixerState(newState); });
        this.keyup = (e) => {
            if (e.key === 'Escape') {
                if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(this.page.forms))
                    this.closePopups();
            }
        };
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(document, 'keyup', this.keyup);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.downloadLogs, 'click', () => __awaiter(this, void 0, void 0, function* () { this.downloadLogs(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.exportWallet, 'click', () => __awaiter(this, void 0, void 0, function* () { this.displayExportWalletAuth(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.recoverWallet, 'click', () => __awaiter(this, void 0, void 0, function* () { this.showRecoverWallet(); }));
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.exportWalletAuth, page.exportWalletAuthSubmit, () => __awaiter(this, void 0, void 0, function* () { this.exportWalletAuthSubmit(); }));
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.recoverWalletConfirm, page.recoverWalletSubmit, () => { this.recoverWallet(); });
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.confirmForce, page.confirmForceSubmit, () => __awaiter(this, void 0, void 0, function* () { this.confirmForceSubmit(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.disableWallet, 'click', () => __awaiter(this, void 0, void 0, function* () { this.showToggleWalletStatus(true); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.enableWallet, 'click', () => __awaiter(this, void 0, void 0, function* () { this.showToggleWalletStatus(false); }));
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.toggleWalletStatusConfirm, page.toggleWalletStatusSubmit, () => __awaiter(this, void 0, void 0, function* () { this.toggleWalletStatus(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.managePeers, 'click', () => __awaiter(this, void 0, void 0, function* () { this.showManagePeersForm(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.addPeerSubmit, 'click', () => __awaiter(this, void 0, void 0, function* () { this.submitAddPeer(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.unapproveTokenAllowance, 'click', () => __awaiter(this, void 0, void 0, function* () { this.showUnapproveTokenAllowanceTableForm(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.unapproveTokenSubmit, 'click', () => __awaiter(this, void 0, void 0, function* () { this.submitUnapproveTokenAllowance(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showVSPs, 'click', () => { this.showVSPPicker(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.vspDisplay, 'click', () => { this.showVSPPicker(); });
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.vspPicker, page.customVspSubmit, () => __awaiter(this, void 0, void 0, function* () { this.setCustomVSP(); }));
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.purchaseTicketsBttn, 'click', () => { this.showPurchaseTicketsDialog(); });
        (0,_forms__WEBPACK_IMPORTED_MODULE_3__.bind)(page.purchaseTicketsForm, page.purchaserSubmit, () => { this.purchaseTickets(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.purchaserInput, 'change', () => { this.purchaserInputChanged(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.ticketHistory, 'click', () => { this.showTicketHistory(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.ticketHistoryNextPage, 'click', () => { this.nextTicketPage(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.ticketHistoryPrevPage, 'click', () => { this.prevTicketPage(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.setVotes, 'click', () => { this.showSetVotesDialog(); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.purchaseTicketsErrCloser, 'click', () => { _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.purchaseTicketsErrBox); });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.privacyInfoBttn, 'click', () => { this.showForm(page.mixingInfo); });
        // New deposit address button.
        this.depositAddrForm = new _forms__WEBPACK_IMPORTED_MODULE_3__.DepositAddress(page.deposit);
        // Clicking on the available amount on the Send form populates the
        // amount field.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.walletBal, 'click', () => { this.populateMaxSend(); });
        // Display fiat value for current send amount.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.sendAmt, 'input', () => {
            const { unitInfo: ui } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            const amt = (0,_doc__WEBPACK_IMPORTED_MODULE_0__.parseFloatDefault)(page.sendAmt.value);
            const conversionFactor = ui.conventional.conversionFactor;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.sendValue, amt * conversionFactor, (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[this.selectedAssetID], ui);
        });
        // Clicking on maxSend on the send form should populate the amount field.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.maxSend, 'click', () => { this.populateMaxSend(); });
        // Validate send address on input.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.sendAddr, 'input', () => __awaiter(this, void 0, void 0, function* () {
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            page.sendAddr.classList.remove('border-danger', 'border-success');
            const addr = page.sendAddr.value || '';
            if (!asset || addr === '')
                return;
            const valid = yield this.validateSendAddress(addr, asset.id);
            if (valid)
                page.sendAddr.classList.add('border-success');
            else
                page.sendAddr.classList.add('border-danger');
        }));
        // A link on the wallet reconfiguration form to show/hide the password field.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showChangePW, 'click', () => {
            this.changeWalletPW = !this.changeWalletPW;
            this.setPWSettingViz(this.changeWalletPW);
        });
        // Changing the type of wallet.
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.changeWalletTypeSelect, 'change', () => {
            this.changeWalletType();
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(page.showChangeType, 'click', () => {
            if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isHidden(page.changeWalletType)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.changeWalletType, page.changeTypeHideIcon);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.changeTypeShowIcon);
                page.changeTypeMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_KEEP_WALLET_TYPE);
            }
            else
                this.showReconfig(this.selectedAssetID, { skipAnimation: true });
        });
        (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().registerNoteFeeder({
            fiatrateupdate: (note) => { this.handleRatesNote(note); },
            balance: (note) => { this.handleBalanceNote(note); },
            walletstate: (note) => { this.handleWalletStateNote(note); },
            walletconfig: (note) => { this.handleWalletStateNote(note); },
            walletsync: (note) => { this.updateSyncAndPeers(note.assetID); },
            createwallet: (note) => { this.handleCreateWalletNote(note); },
            walletnote: (note) => { this.handleCustomWalletNote(note); }
        });
        const firstAsset = this.sortAssetButtons();
        let selectedAsset = firstAsset.id;
        const assetIDStr = _state__WEBPACK_IMPORTED_MODULE_4__["default"].fetchLocal(_state__WEBPACK_IMPORTED_MODULE_4__["default"].selectedAssetLK);
        if (assetIDStr)
            selectedAsset = Number(assetIDStr);
        this.setSelectedAsset(selectedAsset);
        setInterval(() => {
            for (const row of this.page.txHistoryTableBody.children) {
                const age = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].tmplElement(row, 'age');
                age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(parseInt(age.dataset.timestamp));
            }
        }, 5000);
    }
    closePopups() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.forms);
        this.currTx = undefined;
        if (this.animation)
            this.animation.stop();
    }
    safePost(path, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const assetID = this.selectedAssetID;
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(path, args);
            if (assetID !== this.selectedAssetID)
                throw Error('asset changed during request. aborting');
            return res;
        });
    }
    // stepSend makes a request to get an estimated fee and displays the confirm
    // send form.
    stepSend() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vSendErr, page.sendErr, page.vSendEstimates, page.txFeeNotAvailable);
            const assetID = parseInt(page.sendForm.dataset.assetID || '');
            const token = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID].token;
            const subtract = page.subtractCheckBox.checked || false;
            const conversionFactor = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID).conventional.conversionFactor;
            const value = Math.round((0,_doc__WEBPACK_IMPORTED_MODULE_0__.parseFloatDefault)(page.sendAmt.value, 0) * conversionFactor);
            const addr = page.sendAddr.value || '';
            if (addr === '')
                return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.sendErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_INVALID_ADDRESS_MSG, { address: addr }));
            const { wallet, unitInfo: ui, symbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
            // txfee will not be available if wallet is not a fee estimator or the
            // request failed.
            let txfee = 0;
            if ((wallet.traits & traitTxFeeEstimator) !== 0) {
                const open = {
                    addr: page.sendAddr.value,
                    assetID: assetID,
                    subtract: subtract,
                    value: value
                };
                const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.sendForm);
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/txfee', open);
                loaded();
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                    page.txFeeNotAvailable.dataset.tooltip = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_TXFEE_ERR_MSG, { err: res.msg });
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txFeeNotAvailable);
                    // We still want to ensure user address is valid before proceeding to send
                    // confirm form if there's an error while calculating the transaction fee.
                    const valid = yield this.validateSendAddress(addr, assetID);
                    if (!valid)
                        return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.sendErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_INVALID_ADDRESS_MSG, { address: addr || '' }));
                }
                else if (res.ok) {
                    if (!res.validaddress)
                        return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.sendErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_INVALID_ADDRESS_MSG, { address: page.sendAddr.value || '' }));
                    txfee = res.txfee;
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vSendEstimates);
                }
            }
            else {
                // Validate only the send address for assets that are not fee estimators.
                const valid = yield this.validateSendAddress(addr, assetID);
                if (!valid)
                    return _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.sendErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_INVALID_ADDRESS_MSG, { address: addr || '' }));
            }
            page.vSendSymbol.textContent = symbol.toUpperCase();
            page.vSendLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
            if (token) {
                const { unitInfo: feeUI, symbol: feeSymbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[token.parentID];
                page.vSendFee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(txfee, feeUI) + ' ' + feeSymbol;
            }
            else {
                page.vSendFee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(txfee, ui);
            }
            const xcRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[assetID];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.vSendFeeFiat, txfee, xcRate, ui);
            page.vSendDestinationAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(value - txfee, ui);
            page.vTotalSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(value, ui);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.vTotalSendFiat, value, xcRate, ui);
            page.vSendAddr.textContent = page.sendAddr.value || '';
            const bal = wallet.balance.available - value;
            page.balanceAfterSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(bal, ui);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.balanceAfterSendFiat, bal, xcRate, ui);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.approxSign);
            // NOTE: All tokens take this route because they cannot pay the fee.
            if (!subtract) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.approxSign);
                page.vSendDestinationAmt.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(value, ui);
                let totalSend = value;
                if (!token)
                    totalSend += txfee;
                page.vTotalSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(totalSend, ui);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.vTotalSendFiat, totalSend, xcRate, ui);
                let bal = wallet.balance.available - value;
                if (!token)
                    bal -= txfee;
                // handle edge cases where bal is not enough to cover totalSend.
                // we don't want a minus display of user bal.
                if (bal <= 0) {
                    page.balanceAfterSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(0, ui);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.balanceAfterSendFiat, 0, xcRate, ui);
                }
                else {
                    page.balanceAfterSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(bal, ui);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.balanceAfterSendFiat, bal, xcRate, ui);
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.sendForm);
            yield this.showForm(page.vSendForm);
        });
    }
    // cancelSend displays the send form if user wants to make modification.
    cancelSend() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vSendForm, page.sendErr);
            yield this.showForm(page.sendForm);
        });
    }
    /*
     * validateSendAddress validates the provided address for an asset.
     */
    validateSendAddress(addr, assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/validateaddress', { addr: addr, assetID: assetID });
            return (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(resp);
        });
    }
    /*
     * setPWSettingViz sets the visibility of the password field section.
     */
    setPWSettingViz(visible) {
        const page = this.page;
        if (visible) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.showIcon);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.hideIcon, page.changePW);
            page.switchPWMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_KEEP_WALLET_PASS);
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.hideIcon, page.changePW);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.showIcon);
        page.switchPWMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NEW_WALLET_PASS);
    }
    /*
     * assetVersionUsedByDEXes returns a map of the versions of the
     * currently selected asset to the DEXes that use that version.
     */
    assetVersionUsedByDEXes() {
        const assetID = this.selectedAssetID;
        const versionToDEXes = {};
        const exchanges = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().exchanges;
        for (const host in exchanges) {
            const exchange = exchanges[host];
            const exchangeAsset = exchange.assets[assetID];
            if (!exchangeAsset)
                continue;
            if (!versionToDEXes[exchangeAsset.version]) {
                versionToDEXes[exchangeAsset.version] = [];
            }
            versionToDEXes[exchangeAsset.version].push(exchange.host);
        }
        return versionToDEXes;
    }
    /*
     * submitUnapproveTokenAllowance submits a request to the server to
     * unapprove a version of the currently selected token's swap contract.
     */
    submitUnapproveTokenAllowance() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const path = '/api/unapprovetoken';
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(path, {
                assetID: this.selectedAssetID,
                version: this.unapprovingTokenVersion
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.unapproveTokenErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.unapproveTokenErr);
                return;
            }
            const assetExplorer = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[this.selectedAssetID];
            if (assetExplorer && assetExplorer[net]) {
                page.unapproveTokenTxID.href = assetExplorer[net](res.txID);
            }
            page.unapproveTokenTxID.textContent = res.txID;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.unapproveTokenSubmissionElements, page.unapproveTokenErr);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.unapproveTokenTxMsg);
        });
    }
    /*
     * showUnapproveTokenAllowanceForm displays the form for unapproving
     * a specific version of the currently selected token's swap contract.
     */
    showUnapproveTokenAllowanceForm(version) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.unapprovingTokenVersion = version;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.unapproveTokenSubmissionElements);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.unapproveTokenTxMsg, page.unapproveTokenErr);
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            if (!asset || !asset.token)
                return;
            const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[asset.token.parentID];
            if (!parentAsset)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.tokenAllowanceRemoveSymbol);
            page.tokenAllowanceRemoveSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(asset, true));
            page.tokenAllowanceRemoveVersion.textContent = version.toString();
            const path = '/api/approvetokenfee';
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(path, {
                assetID: this.selectedAssetID,
                version: version,
                approving: false
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.unapproveTokenErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.unapproveTokenErr);
            }
            else {
                let feeText = `${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(res.txFee, parentAsset.unitInfo)} ${parentAsset.unitInfo.conventional.unit}`;
                const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[parentAsset.id];
                if (rate) {
                    feeText += ` (${_doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFiatConversion(res.txFee, rate, parentAsset.unitInfo)} USD)`;
                }
                page.unapprovalFeeEstimate.textContent = feeText;
            }
            this.showForm(page.unapproveTokenForm);
        });
    }
    /*
     * showUnapproveTokenAllowanceTableForm displays a table showing each of the
     * versions of a token's swap contract that have been approved and allows the
     * user to unapprove any of them.
     */
    showUnapproveTokenAllowanceTableForm() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            if (!asset || !asset.wallet || !asset.wallet.approved)
                return;
            while (page.tokenVersionBody.firstChild) {
                page.tokenVersionBody.removeChild(page.tokenVersionBody.firstChild);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.tokenVersionTableAssetSymbol);
            page.tokenVersionTableAssetSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(asset, true));
            const versionToDEXes = this.assetVersionUsedByDEXes();
            let showTable = false;
            for (let i = 0; i <= asset.wallet.version; i++) {
                const approvalStatus = asset.wallet.approved[i];
                if (approvalStatus === undefined || approvalStatus !== _registry__WEBPACK_IMPORTED_MODULE_7__.ApprovalStatus.Approved) {
                    continue;
                }
                showTable = true;
                const row = page.tokenVersionRow.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                tmpl.version.textContent = i.toString();
                if (versionToDEXes[i]) {
                    tmpl.usedBy.textContent = versionToDEXes[i].join(', ');
                }
                const removeIcon = this.page.removeIconTmpl.cloneNode(true);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(removeIcon, 'click', () => {
                    this.showUnapproveTokenAllowanceForm(i);
                });
                tmpl.remove.appendChild(removeIcon);
                page.tokenVersionBody.appendChild(row);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(showTable, page.tokenVersionTable);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!showTable, page.tokenVersionNone);
            this.showForm(page.unapproveTokenTableForm);
        });
    }
    /*
     * updateWalletPeers retrieves the wallet peers and displays them in the
     * wallet peers table.
     */
    updateWalletPeersTable() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.peerSpinner);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/getwalletpeers', {
                assetID: this.selectedAssetID
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.managePeersErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.managePeersErr);
                return;
            }
            while (page.peersTableBody.firstChild) {
                page.peersTableBody.removeChild(page.peersTableBody.firstChild);
            }
            const peers = res.peers || [];
            peers.sort((a, b) => {
                return a.source - b.source;
            });
            const defaultText = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_DEFAULT);
            const addedText = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ADDED);
            const discoveredText = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_DISCOVERED);
            peers.forEach((peer) => {
                const row = page.peerTableRow.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                tmpl.addr.textContent = peer.addr;
                switch (peer.source) {
                    case _registry__WEBPACK_IMPORTED_MODULE_7__.PeerSource.WalletDefault:
                        tmpl.source.textContent = defaultText;
                        break;
                    case _registry__WEBPACK_IMPORTED_MODULE_7__.PeerSource.UserAdded:
                        tmpl.source.textContent = addedText;
                        break;
                    case _registry__WEBPACK_IMPORTED_MODULE_7__.PeerSource.Discovered:
                        tmpl.source.textContent = discoveredText;
                        break;
                }
                let connectionIcon;
                if (peer.connected) {
                    connectionIcon = this.page.connectedIconTmpl.cloneNode(true);
                }
                else {
                    connectionIcon = this.page.disconnectedIconTmpl.cloneNode(true);
                }
                tmpl.connected.appendChild(connectionIcon);
                if (peer.source === _registry__WEBPACK_IMPORTED_MODULE_7__.PeerSource.UserAdded) {
                    const removeIcon = this.page.removeIconTmpl.cloneNode(true);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(removeIcon, 'click', () => __awaiter(this, void 0, void 0, function* () {
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.managePeersErr);
                        const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/removewalletpeer', {
                            assetID: this.selectedAssetID,
                            addr: peer.addr
                        });
                        if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                            page.managePeersErr.textContent = res.msg;
                            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.managePeersErr);
                            return;
                        }
                        this.spinUntilPeersUpdate();
                    }));
                    tmpl.remove.appendChild(removeIcon);
                }
                page.peersTableBody.appendChild(row);
            });
        });
    }
    // showManagePeersForm displays the manage peers form.
    showManagePeersForm() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            yield this.updateWalletPeersTable();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.managePeersErr);
            this.showForm(page.managePeersForm);
        });
    }
    // submitAddPeers sends a request for the the wallet to connect to a new
    // peer.
    submitAddPeer() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.managePeersErr);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/addwalletpeer', {
                assetID: this.selectedAssetID,
                addr: page.addPeerInput.value
            });
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.managePeersErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.managePeersErr);
                return;
            }
            this.spinUntilPeersUpdate();
            page.addPeerInput.value = '';
        });
    }
    /*
     * spinUntilPeersUpdate will show the spinner on the manage peers fork.
     * If it is still showing after 10 seconds, the peers table will be updated
     * instead of waiting for a notification.
     */
    spinUntilPeersUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.peerSpinner);
            setTimeout(() => {
                if (_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(page.peerSpinner)) {
                    this.updateWalletPeersTable();
                }
            }, 10000);
        });
    }
    /*
     * showToggleWalletStatus displays the toggleWalletStatusConfirm form with
     * relevant help message.
     */
    showToggleWalletStatus(disable) {
        const page = this.page;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.toggleWalletStatusErr, page.walletStatusDisable, page.disableWalletMsg, page.walletStatusEnable, page.enableWalletMsg);
        if (disable)
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.walletStatusDisable, page.disableWalletMsg);
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.walletStatusEnable, page.enableWalletMsg);
        this.showForm(page.toggleWalletStatusConfirm);
    }
    /*
     * toggleWalletStatus toggles a wallets status to either disabled or enabled.
     */
    toggleWalletStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.toggleWalletStatusErr);
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            const disable = !asset.wallet.disabled;
            const url = '/api/togglewalletstatus';
            const req = {
                assetID: this.selectedAssetID,
                disable: disable
            };
            const fmtParams = { assetName: asset.name };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.toggleWalletStatusConfirm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(url, req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                if (res.code === _http__WEBPACK_IMPORTED_MODULE_2__.Errors.activeOrdersErr)
                    page.toggleWalletStatusErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ACTIVE_ORDERS_ERR_MSG, fmtParams);
                else
                    page.toggleWalletStatusErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.toggleWalletStatusErr);
                return;
            }
            let successMsg = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_DISABLED_MSG, fmtParams);
            if (!disable)
                successMsg = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_ENABLED_MSG, fmtParams);
            this.assetUpdated(this.selectedAssetID, page.toggleWalletStatusConfirm, successMsg);
        });
    }
    /*
     * showBox shows the box with a fade-in animation.
     */
    showBox(box, focuser) {
        return __awaiter(this, void 0, void 0, function* () {
            box.style.opacity = '0';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(box);
            if (focuser)
                focuser.focus();
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                box.style.opacity = `${progress}`;
            }, 'easeOut');
            box.style.opacity = '1';
            this.displayed = box;
        });
    }
    /* showForm shows a modal form with a little animation. */
    showForm(form) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.currentForm = form;
            this.forms.forEach(form => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form));
            form.style.right = '10000px';
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.forms, form);
            const shift = (page.forms.offsetWidth + form.offsetWidth) / 2;
            yield _doc__WEBPACK_IMPORTED_MODULE_0__["default"].animate(animationLength, progress => {
                form.style.right = `${(1 - progress) * shift}px`;
            }, 'easeOutHard');
            form.style.right = '0';
        });
    }
    showSuccess(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.forms.forEach(form => _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(form));
            this.currentForm = this.page.checkmarkForm;
            this.animation = (0,_forms__WEBPACK_IMPORTED_MODULE_3__.showSuccess)(this.page, msg);
            yield this.animation.wait();
            this.animation = new _doc__WEBPACK_IMPORTED_MODULE_0__.Animation(1500, () => { }, '', () => {
                if (this.currentForm === this.page.checkmarkForm)
                    this.closePopups();
            });
        });
    }
    /* Show the new wallet form. */
    showNewWallet(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const box = page.newWalletForm;
            this.newWalletForm.setAsset(assetID);
            const defaultsLoaded = this.newWalletForm.loadDefaults();
            yield this.showForm(box);
            yield defaultsLoaded;
        });
    }
    // sortAssetButtons displays supported assets, sorted. Returns first asset in the
    // list.
    sortAssetButtons() {
        const page = this.page;
        this.assetButtons = {};
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.assetSelect);
        const sortedAssets = [...Object.values((0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets)];
        sortedAssets.sort((a, b) => {
            if (a.wallet && !b.wallet)
                return -1;
            if (!a.wallet && b.wallet)
                return 1;
            if (!a.wallet && !b.wallet)
                return a.symbol === 'dcr' ? -1 : 1;
            const [aBal, bBal] = [a.wallet.balance, b.wallet.balance];
            const [aTotal, bTotal] = [aBal.available + aBal.immature + aBal.locked, bBal.available + bBal.immature + bBal.locked];
            if (aTotal === 0 && bTotal === 0)
                return a.symbol.localeCompare(b.symbol);
            else if (aTotal === 0)
                return 1;
            else if (aTotal === 0)
                return -1;
            const [aFiat, bFiat] = [(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[a.id], (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[b.id]];
            if (aFiat && !bFiat)
                return -1;
            if (!aFiat && bFiat)
                return 1;
            return bFiat * bTotal - aFiat * aTotal;
        });
        for (const a of sortedAssets) {
            const bttn = page.iconSelectTmpl.cloneNode(true);
            page.assetSelect.appendChild(bttn);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(bttn);
            this.assetButtons[a.id] = { tmpl, bttn };
            this.updateAssetButton(a.id);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(bttn, 'click', () => {
                this.setSelectedAsset(a.id);
                _state__WEBPACK_IMPORTED_MODULE_4__["default"].storeLocal(_state__WEBPACK_IMPORTED_MODULE_4__["default"].selectedAssetLK, String(a.id));
            });
        }
        page.assetSelect.classList.remove('invisible');
        return sortedAssets[0];
    }
    updateAssetButton(assetID) {
        var _a, _b;
        const a = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
        const { bttn, tmpl } = this.assetButtons[assetID];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.fiatBox, tmpl.noWallet);
        bttn.classList.add('nowallet');
        (_a = tmpl.img).src || (_a.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(a.symbol)); // don't initiate GET if already set (e.g. update on some notification)
        const symbolParts = a.symbol.split('.');
        if (symbolParts.length === 2) {
            const parentSymbol = symbolParts[1];
            tmpl.parentImg.classList.remove('d-hide');
            (_b = tmpl.parentImg).src || (_b.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentSymbol));
        }
        if (this.selectedAssetID === assetID)
            bttn.classList.add('selected');
        tmpl.name.textContent = a.name;
        if (a.wallet) {
            bttn.classList.remove('nowallet');
            const { wallet: { balance: b }, unitInfo: ui } = a;
            const totalBalance = b.available + b.locked + b.immature;
            const [s, unit] = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatBestUnitsFourSigFigs(totalBalance, ui);
            tmpl.balance.textContent = s;
            tmpl.unit.textContent = unit;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.balanceBox);
            const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[a.id];
            if (fiatRate) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.fiatBox);
                tmpl.fiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(totalBalance / ui.conventional.conversionFactor * fiatRate);
            }
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.noWallet);
    }
    setSelectedAsset(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const { assetSelect } = this.page;
            for (const b of assetSelect.children)
                b.classList.remove('selected');
            this.assetButtons[assetID].bttn.classList.add('selected');
            this.selectedAssetID = assetID;
            this.page.hideMixTxsCheckbox.checked = true;
            this.updateDisplayedAsset(assetID);
            this.showAvailableMarkets(assetID);
            const a = this.showRecentActivity(assetID);
            const b = this.showTxHistory(assetID);
            const c = this.updateTicketBuyer(assetID);
            const d = this.updatePrivacy(assetID);
            for (const p of [a, b, c, d])
                yield p;
        });
    }
    updateDisplayedAsset(assetID) {
        if (assetID !== this.selectedAssetID)
            return;
        const { symbol, wallet, name, token, unitInfo } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
        const { page, body } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setText(body, '[data-asset-name]', name);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setText(body, '[data-ticker]', unitInfo.conventional.unit);
        page.assetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.balanceBox, page.fiatBalanceBox, page.createWallet, page.walletDetails, page.sendReceive, page.connectBttnBox, page.statusLocked, page.statusReady, page.statusOff, page.unlockBttnBox, page.lockBttnBox, page.connectBttnBox, page.peerCountBox, page.syncProgressBox, page.statusDisabled, page.tokenInfoBox, page.needsProviderBox, page.feeStateBox, page.txSyncBox, page.txProgress, page.txFindingAddrs);
        this.checkNeedsProvider(assetID);
        if (token) {
            const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[token.parentID];
            page.tokenParentLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
            page.tokenParentName.textContent = parentAsset.name;
            page.contractAddress.textContent = token.contractAddress;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.tokenInfoBox);
        }
        if (wallet) {
            this.updateDisplayedAssetBalance();
            const { feeState, running, disabled, type: walletType } = wallet;
            const walletDef = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletDefinition(assetID, walletType);
            page.walletType.textContent = walletDef.tab;
            if (feeState)
                this.updateFeeState(feeState);
            if (disabled)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.statusDisabled); // wallet is disabled
            else if (running) {
                this.updateSyncAndPeers(wallet.assetID);
            }
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.statusOff, page.connectBttnBox); // wallet not running
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.createWallet); // no wallet
        page.walletDetailsBox.classList.remove('invisible');
    }
    updateSyncAndPeers(assetID) {
        const { page, selectedAssetID } = this;
        if (assetID !== selectedAssetID)
            return;
        const { peerCount, syncProgress, syncStatus, encrypted, open, running } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletMap[assetID];
        if (!running)
            return;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.sendReceive, page.peerCountBox, page.syncProgressBox);
        page.peerCount.textContent = String(peerCount);
        page.syncProgress.textContent = `${(syncProgress * 100).toFixed(1)}%`;
        if (open) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.statusReady);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().haveActiveOrders(assetID) && encrypted)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.lockBttnBox);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.statusLocked, page.unlockBttnBox); // wallet not unlocked
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(syncStatus.txs !== undefined, page.txSyncBox);
        if (syncStatus.txs !== undefined) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txProgress, page.txFindingAddrs);
            if (syncStatus.txs === 0 && syncStatus.blocks >= syncStatus.targetHeight)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txFindingAddrs);
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txProgress);
                const prog = syncStatus.txs / syncStatus.targetHeight;
                page.txProgress.textContent = `${(prog * 100).toFixed(1)}%`;
            }
        }
    }
    updateFeeState(feeState) {
        const { page, selectedAssetID: assetID } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.feeStateBox);
        const { unitInfo: ui, token } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
        const fiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[assetID];
        if (!fiatRate)
            return;
        const feeAssetID = token ? token.parentID : assetID;
        const feeFiatRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[feeAssetID];
        if (token && !feeFiatRate)
            return;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.feeStateBox);
        const feeUI = token ? (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[token.parentID].unitInfo : ui;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatBestRateElement(page.feeStateNetRate, feeAssetID, feeState.rate, feeUI);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatBestValueElement(page.feeStateSendFees, feeAssetID, feeState.send, feeUI);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatBestValueElement(page.feeStateSwapFees, feeAssetID, feeState.swap, feeUI);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatBestValueElement(page.feeStateRedeemFees, feeAssetID, feeState.redeem, feeUI);
        page.feeStateXcRate.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(fiatRate);
        const sendFiat = feeState.send / feeUI.conventional.conversionFactor * feeFiatRate;
        page.feeStateSendFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(sendFiat);
        const swapFiat = feeState.swap / feeUI.conventional.conversionFactor * feeFiatRate;
        page.feeStateSwapFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(swapFiat);
        const redeemFiat = feeState.redeem / feeUI.conventional.conversionFactor * feeFiatRate;
        page.feeStateRedeemFiat.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(redeemFiat);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.feeStateBox);
    }
    checkNeedsProvider(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const needs = yield (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().needsCustomProvider(assetID);
            const { page: { needsProviderBox: box, needsProviderBttn: bttn } } = this;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(needs, box);
            if (!needs)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].blink(bttn);
        });
    }
    updateTicketBuyer(assetID) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.ticketPage = {
                number: 0,
                history: [],
                scanned: false
            };
            const { wallet, unitInfo: ui } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.stakingBox, page.pickVSP, page.stakingSummary, page.stakingErr, page.vspDisplayBox, page.ticketPriceBox, page.purchaseTicketsBox, page.stakingRpcSpvMsg, page.ticketsDisabled);
            if (!(wallet === null || wallet === void 0 ? void 0 : wallet.running) || (wallet.traits & traitTicketBuyer) === 0)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingBox);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.stakingBox);
            const res = yield this.safePost('/api/stakestatus', assetID);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                // Look for common error for RPC + SPV wallet.
                if (res.msg.includes('disconnected from consensus RPC')) {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingRpcSpvMsg);
                    return;
                }
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingErr);
                page.stakingErr.textContent = res.msg;
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingSummary, page.ticketPriceBox);
            const stakeStatus = res.status;
            this.stakeStatus = stakeStatus;
            page.stakingAgendaCount.textContent = String(stakeStatus.stances.agendas.length);
            page.stakingTspendCount.textContent = String(stakeStatus.stances.tspends.length);
            page.purchaserCurrentPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(stakeStatus.ticketPrice / ui.conventional.conversionFactor);
            page.purchaserBal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(wallet.balance.available, ui);
            this.updateTicketStats(stakeStatus.stats, ui, stakeStatus.ticketPrice, stakeStatus.votingSubsidy);
            // If this is an extension wallet, we'll might to disable all controls.
            const disableStaking = (_a = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().extensionWallet(this.selectedAssetID)) === null || _a === void 0 ? void 0 : _a.disableStaking;
            if (disableStaking) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.setVotes, page.showVSPs);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.ticketsDisabled);
                page.extensionModeAppName.textContent = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().user.extensionModeConfig.name;
                return;
            }
            this.setVSPViz(stakeStatus.vsp);
        });
    }
    setVSPViz(vsp) {
        const { page, stakeStatus } = this;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.vspDisplayBox);
        if (vsp) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.vspDisplayBox, page.purchaseTicketsBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.pickVSP);
            page.vspURL.textContent = vsp;
            return;
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!stakeStatus.isRPC, page.pickVSP);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(stakeStatus.isRPC, page.purchaseTicketsBox);
    }
    updateTicketStats(stats, ui, ticketPrice, votingSubsidy) {
        const { page, stakeStatus } = this;
        stakeStatus.stats = stats;
        if (ticketPrice)
            stakeStatus.ticketPrice = ticketPrice;
        if (votingSubsidy)
            stakeStatus.votingSubsidy = votingSubsidy;
        const liveTicketCount = stakeStatus.tickets.filter((tkt) => tkt.status <= ticketStatusLive && tkt.status >= ticketStatusUnmined).length;
        page.stakingTicketCount.textContent = String(liveTicketCount);
        page.immatureTicketCount.textContent = String(stats.mempool);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(stats.mempool > 0, page.immatureTicketCountBox);
        page.queuedTicketCount.textContent = String(stats.queued);
        page.formQueuedTix.textContent = String(stats.queued);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(stats.queued > 0, page.formQueueTixBox, page.queuedTicketCountBox);
        page.totalTicketCount.textContent = String(stats.ticketCount);
        page.totalTicketRewards.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(stats.totalRewards / ui.conventional.conversionFactor);
        page.totalTicketVotes.textContent = String(stats.votes);
        if (ticketPrice)
            page.ticketPrice.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(ticketPrice / ui.conventional.conversionFactor);
        if (votingSubsidy)
            page.votingSubsidy.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(votingSubsidy / ui.conventional.conversionFactor);
    }
    showVSPPicker() {
        return __awaiter(this, void 0, void 0, function* () {
            const assetID = this.selectedAssetID;
            const page = this.page;
            this.showForm(page.vspPicker);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.vspPickerList);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.stakingErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.vspPicker);
            const res = yield this.safePost('/api/listvsps', assetID);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingErr);
                page.stakingErr.textContent = res.msg;
                return;
            }
            const vsps = res.vsps;
            for (const vsp of vsps) {
                const row = page.vspRowTmpl.cloneNode(true);
                page.vspPickerList.appendChild(row);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                tmpl.url.textContent = vsp.url;
                tmpl.feeRate.textContent = vsp.feePercentage.toFixed(2);
                tmpl.voting.textContent = String(vsp.voting);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(row, 'click', () => {
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.stakingErr);
                    this.setVSP(assetID, vsp);
                });
            }
        });
    }
    showPurchaseTicketsDialog() {
        const page = this.page;
        page.purchaserInput.value = '';
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.purchaserErr);
        this.showForm(this.page.purchaseTicketsForm);
        page.purchaserInput.focus();
    }
    purchaserInputChanged() {
        const page = this.page;
        const n = parseInt(page.purchaserInput.value || '0');
        if (n <= 1) {
            page.purchaserInput.value = '1';
            return;
        }
        page.purchaserInput.value = String(n);
    }
    purchaseTickets() {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, selectedAssetID: assetID } = this;
            // DRAFT NOTE: The user will get an actual ticket count somewhere in the
            // range 1 <= tickets_purchased <= n. See notes in
            // (*spvWallet).PurchaseTickets.
            // How do we handle this at the UI. Or do we handle it all in the backend
            // somehow?
            const n = parseInt(page.purchaserInput.value || '0');
            if (n < 1)
                return;
            // TODO: Add confirmation dialog.
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.purchaseTicketsForm);
            const res = yield this.safePost('/api/purchasetickets', { assetID, n });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.purchaserErr.textContent = res.msg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.purchaserErr);
                return;
            }
            this.showSuccess(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_TICKETS_PURCHASED, { n: n.toLocaleString(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].languages()) }));
        });
    }
    processTicketPurchaseUpdate(walletNote) {
        const { stakeStatus, selectedAssetID, page } = this;
        const { assetID } = walletNote;
        const { err, remaining, tickets, stats } = walletNote.payload;
        if (assetID !== selectedAssetID)
            return;
        if (err) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.purchaseTicketsErrBox);
            page.purchaseTicketsErr.textContent = err;
            return;
        }
        if (tickets)
            stakeStatus.tickets = tickets.concat(stakeStatus.tickets);
        if (stats)
            this.updateTicketStats(stats, (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID].unitInfo);
        stakeStatus.stats.queued = remaining;
        page.queuedTicketCount.textContent = String(remaining);
        page.formQueuedTix.textContent = String(remaining);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(remaining > 0, page.queuedTicketCountBox);
    }
    setVSP(assetID, vsp) {
        return __awaiter(this, void 0, void 0, function* () {
            this.closePopups();
            const page = this.page;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.stakingBox);
            const res = yield this.safePost('/api/setvsp', { assetID, url: vsp.url });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.stakingErr);
                page.stakingErr.textContent = res.msg;
                return;
            }
            this.setVSPViz(vsp.url);
        });
    }
    setCustomVSP() {
        const assetID = this.selectedAssetID;
        const vsp = { url: this.page.customVspUrl.value };
        this.setVSP(assetID, vsp);
    }
    pageOfTickets(pgNum) {
        const { stakeStatus, ticketPage } = this;
        let startOffset = pgNum * ticketPageSize;
        const pageOfTickets = [];
        if (startOffset < stakeStatus.tickets.length) {
            pageOfTickets.push(...stakeStatus.tickets.slice(startOffset, startOffset + ticketPageSize));
            if (pageOfTickets.length < ticketPageSize) {
                const need = ticketPageSize - pageOfTickets.length;
                pageOfTickets.push(...ticketPage.history.slice(0, need));
            }
        }
        else {
            startOffset -= stakeStatus.tickets.length;
            pageOfTickets.push(...ticketPage.history.slice(startOffset, startOffset + ticketPageSize));
        }
        return pageOfTickets;
    }
    displayTicketPage(pageNumber, pageOfTickets) {
        const { page, selectedAssetID: assetID } = this;
        const ui = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID);
        const coinLink = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[assetID][(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().user.net];
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.ticketHistoryRows);
        page.ticketHistoryPage.textContent = String(pageNumber);
        for (const { tx, status } of pageOfTickets) {
            const tr = page.ticketHistoryRowTmpl.cloneNode(true);
            page.ticketHistoryRows.appendChild(tr);
            (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().bindUrlHandlers(tr);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(tr);
            tmpl.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(tx.stamp * 1000);
            tmpl.price.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(tx.ticketPrice, ui);
            tmpl.status.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(ticketStatusTranslationKeys[status]);
            tmpl.hashStart.textContent = tx.hash.slice(0, 6);
            tmpl.hashEnd.textContent = tx.hash.slice(-6);
            tmpl.detailsLinkUrl.setAttribute('href', coinLink(tx.hash));
        }
    }
    ticketPageN(pageNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const { page, stakeStatus, ticketPage, selectedAssetID: assetID } = this;
            const pageOfTickets = this.pageOfTickets(pageNumber);
            if (pageOfTickets.length < ticketPageSize && !ticketPage.scanned) {
                const n = ticketPageSize - pageOfTickets.length;
                const lastList = ticketPage.history.length > 0 ? ticketPage.history : stakeStatus.tickets;
                const scanStart = lastList.length > 0 ? lastList[lastList.length - 1].tx.blockHeight : scanStartMempool;
                const skipN = lastList.filter((tkt) => tkt.tx.blockHeight === scanStart).length;
                const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.ticketHistoryForm);
                const res = yield this.safePost('/api/ticketpage', { assetID, scanStart, n, skipN });
                loaded();
                if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                    console.error('error fetching ticket page', res.msg);
                    return;
                }
                this.ticketPage.history.push(...res.tickets);
                pageOfTickets.push(...res.tickets);
                if (res.tickets.length < n)
                    this.ticketPage.scanned = true;
            }
            const totalTix = stakeStatus.tickets.length + ticketPage.history.length;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(totalTix >= ticketPageSize, page.ticketHistoryPagination);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(totalTix > 0, page.ticketHistoryTable);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(totalTix === 0, page.noTicketsMessage);
            if (pageOfTickets.length === 0) {
                // Probably ended with a page of size ticketPageSize, so didn't know we
                // had hit the end until the user clicked the arrow and we went looking
                // for the next. Would be good to figure out a way to hide the arrow in
                // that case.
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.ticketHistoryNextPage);
                return;
            }
            this.displayTicketPage(pageNumber, pageOfTickets);
            ticketPage.number = pageNumber;
            const atEnd = pageNumber * ticketPageSize + pageOfTickets.length === totalTix;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!atEnd || !ticketPage.scanned, page.ticketHistoryNextPage);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(pageNumber > 0, page.ticketHistoryPrevPage);
        });
    }
    showTicketHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            this.showForm(this.page.ticketHistoryForm);
            yield this.ticketPageN(this.ticketPage.number);
        });
    }
    nextTicketPage() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ticketPageN(this.ticketPage.number + 1);
        });
    }
    prevTicketPage() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ticketPageN(this.ticketPage.number - 1);
        });
    }
    showSetVotesDialog() {
        var _a;
        const { page, stakeStatus, selectedAssetID: assetID } = this;
        const ui = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.votingFormErr);
        const coinLink = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[assetID][(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().user.net];
        const upperCase = (s) => s.charAt(0).toUpperCase() + s.slice(1);
        const setVotes = (req) => __awaiter(this, void 0, void 0, function* () {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.votingFormErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.votingForm);
            const res = yield this.safePost('/api/setvotes', req);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.votingFormErr);
                page.votingFormErr.textContent = res.msg;
                throw Error(res.msg);
            }
        });
        const setAgendaChoice = (agendaID, choiceID) => __awaiter(this, void 0, void 0, function* () {
            yield setVotes({ assetID, choices: { [agendaID]: choiceID } });
            for (const agenda of stakeStatus.stances.agendas)
                if (agenda.id === agendaID)
                    agenda.currentChoice = choiceID;
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.votingAgendas);
        for (const agenda of stakeStatus.stances.agendas) {
            const div = page.votingAgendaTmpl.cloneNode(true);
            page.votingAgendas.appendChild(div);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
            tmpl.description.textContent = agenda.description;
            for (const choice of agenda.choices) {
                const div = page.votingChoiceTmpl.cloneNode(true);
                tmpl.choices.appendChild(div);
                const choiceTmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
                choiceTmpl.id.textContent = upperCase(choice.id);
                choiceTmpl.id.dataset.tooltip = choice.description;
                choiceTmpl.radio.value = choice.id;
                choiceTmpl.radio.name = agenda.id;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(choiceTmpl.radio, 'change', () => {
                    if (!choiceTmpl.radio.checked)
                        return;
                    setAgendaChoice(agenda.id, choice.id);
                });
                if (choice.id === agenda.currentChoice)
                    choiceTmpl.radio.checked = true;
            }
            (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().bindTooltips(tmpl.choices);
        }
        const setTspendVote = (txHash, policyID) => __awaiter(this, void 0, void 0, function* () {
            yield setVotes({ assetID, tSpendPolicy: { [txHash]: policyID } });
            for (const tspend of stakeStatus.stances.tspends)
                if (tspend.hash === txHash)
                    tspend.currentPolicy = policyID;
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.votingTspends);
        for (const tspend of stakeStatus.stances.tspends) {
            const div = page.tspendTmpl.cloneNode(true);
            page.votingTspends.appendChild(div);
            (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().bindUrlHandlers(div);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
            for (const opt of [tmpl.yes, tmpl.no]) {
                opt.name = tspend.hash;
                if (tspend.currentPolicy === opt.value)
                    opt.checked = true;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(opt, 'change', () => {
                    var _a;
                    if (!opt.checked)
                        return;
                    setTspendVote(tspend.hash, (_a = opt.value) !== null && _a !== void 0 ? _a : '');
                });
            }
            if (tspend.value > 0)
                tmpl.value.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(tspend.value / ui.conventional.conversionFactor);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.value);
            tmpl.hash.textContent = tspend.hash;
            tmpl.explorerLink.setAttribute('href', coinLink(tspend.hash));
        }
        const setTKeyPolicy = (key, policy) => __awaiter(this, void 0, void 0, function* () {
            yield setVotes({ assetID, treasuryPolicy: { [key]: policy } });
            for (const tkey of stakeStatus.stances.treasuryKeys)
                if (tkey.key === key)
                    tkey.policy = policy;
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.votingTKeys);
        for (const keyPolicy of ((_a = stakeStatus.stances.treasuryKeys) !== null && _a !== void 0 ? _a : [])) {
            const div = page.tkeyTmpl.cloneNode(true);
            page.votingTKeys.appendChild(div);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(div);
            for (const opt of [tmpl.yes, tmpl.no]) {
                opt.name = keyPolicy.key;
                if (keyPolicy.policy === opt.value)
                    opt.checked = true;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(opt, 'change', () => {
                    var _a;
                    if (!opt.checked)
                        return;
                    setTKeyPolicy(keyPolicy.key, (_a = opt.value) !== null && _a !== void 0 ? _a : '');
                });
            }
            tmpl.key.textContent = keyPolicy.key;
        }
        this.showForm(page.votingForm);
    }
    updatePrivacy(assetID) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const disablePrivacy = (_a = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().extensionWallet(assetID)) === null || _a === void 0 ? void 0 : _a.disablePrivacy;
            this.mixing = false;
            const { wallet } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mixingBox, page.mixerOff, page.mixerOn);
            // TODO: Show special messaging if the asset supports mixing but not this
            // wallet type.
            if (disablePrivacy || !(wallet === null || wallet === void 0 ? void 0 : wallet.running) || (wallet.traits & traitFundsMixer) === 0)
                return;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mixingBox, page.mixerLoading);
            const res = yield this.safePost('/api/mixingstats', { assetID });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mixerLoading);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mixingErr);
                page.mixingErr.textContent = res.msg;
                return;
            }
            this.mixing = res.stats.enabled;
            if (this.mixing)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mixerOn);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mixerOff);
            this.mixerToggle.setState(this.mixing);
        });
    }
    updateMixerState(on) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.mixingErr);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.mixingBox);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/configuremixer', { assetID: this.selectedAssetID, enabled: on });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.mixingErr.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_API_ERROR, { msg: res.msg });
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.mixingErr);
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(on, page.mixerOn);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!on, page.mixerOff);
            this.mixerToggle.setState(on);
        });
    }
    updateDisplayedAssetBalance() {
        var _a, _b, _c;
        const page = this.page;
        const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
        const { wallet, unitInfo: ui, id: assetID } = asset;
        const bal = wallet.balance;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.balanceBox, page.walletDetails);
        const totalLocked = bal.locked + bal.contractlocked + bal.bondlocked;
        const totalBalance = bal.available + totalLocked + bal.immature;
        page.balance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(totalBalance, ui);
        page.balanceUnit.textContent = ui.conventional.unit;
        const rate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[assetID];
        if (rate) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.fiatBalanceBox);
            page.fiatBalance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFiatConversion(totalBalance, rate, ui);
        }
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.balanceDetailBox);
        const addBalanceRow = (cat, bal, tooltipMsg) => {
            const row = page.balanceDetailRow.cloneNode(true);
            page.balanceDetailBox.appendChild(row);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
            tmpl.name.textContent = cat;
            if (tooltipMsg) {
                tmpl.tooltipMsg.dataset.tooltip = tooltipMsg;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(tmpl.tooltipMsg);
            }
            tmpl.balance.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(bal, ui);
            return row;
        };
        let lastSubLockedRow;
        let lastPrimaryRow;
        const addPrimaryBalance = (cat, bal, tooltipMsg) => {
            lastSubLockedRow = undefined;
            lastPrimaryRow = addBalanceRow(cat, bal, tooltipMsg);
        };
        const addSubBalance = (cat, bal, tooltipMsg) => {
            lastSubLockedRow = addBalanceRow(cat, bal, tooltipMsg);
            lastSubLockedRow.classList.add('sub');
        };
        const setRowClasses = () => {
            if (!lastSubLockedRow)
                return;
            lastPrimaryRow.classList.add('itemized');
            lastSubLockedRow.classList.add('last');
        };
        addPrimaryBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_AVAILABLE_TITLE), bal.available, '');
        if (((_a = bal.other) === null || _a === void 0 ? void 0 : _a.Shielded) !== undefined) {
            const transparent = bal.available - bal.other.Shielded.amt;
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_TRANSPARENT), transparent);
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_SHIELDED), bal.other.Shielded.amt);
        }
        setRowClasses();
        addPrimaryBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_LOCKED_TITLE), totalLocked, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_LOCKED_BAL_MSG));
        if (bal.orderlocked > 0)
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_ORDER), bal.orderlocked, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_LOCKED_ORDER_BAL_MSG));
        if (bal.contractlocked > 0)
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_SWAPPING), bal.contractlocked, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_LOCKED_SWAPPING_BAL_MSG));
        if (bal.bondlocked > 0)
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_BONDED), bal.bondlocked, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_LOCKED_BOND_BAL_MSG));
        if (bal.bondReserves > 0)
            addSubBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_BOND_RESERVES), bal.bondReserves, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_BOND_RESERVES_MSG));
        if (((_b = bal === null || bal === void 0 ? void 0 : bal.other) === null || _b === void 0 ? void 0 : _b.Staked) !== undefined)
            addSubBalance('Staked', bal.other.Staked.amt);
        setRowClasses();
        if (bal.immature)
            addPrimaryBalance(_locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_IMMATURE_TITLE), bal.immature, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_IMMATURE_BAL_MSG));
        if (((_c = bal === null || bal === void 0 ? void 0 : bal.other) === null || _c === void 0 ? void 0 : _c.Unmixed) !== undefined)
            addSubBalance('Unmixed', bal.other.Unmixed.amt);
        setRowClasses();
        // TODO: handle reserves deficit with a notification.
        // if (bal.reservesDeficit > 0) addPrimaryBalance(intl.prep(intl.ID_RESERVES_DEFICIT), bal.reservesDeficit, intl.prep(intl.ID_RESERVES_DEFICIT_MSG))
        page.purchaserBal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(bal.available / ui.conventional.conversionFactor);
        (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().bindTooltips(page.balanceDetailBox);
    }
    showAvailableMarkets(assetID) {
        const page = this.page;
        const exchanges = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().user.exchanges;
        const markets = [];
        for (const xc of Object.values(exchanges)) {
            if (!xc.markets)
                continue;
            for (const mkt of Object.values(xc.markets)) {
                if (mkt.baseid === assetID || mkt.quoteid === assetID)
                    markets.push([xc.host, xc, mkt]);
            }
        }
        const spotVolume = (assetID, mkt) => {
            const spot = mkt.spot;
            if (!spot)
                return 0;
            const conversionFactor = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID).conventional.conversionFactor;
            const volume = assetID === mkt.baseid ? spot.vol24 : spot.vol24 * spot.rate / _orderutil__WEBPACK_IMPORTED_MODULE_6__.RateEncodingFactor;
            return volume / conversionFactor;
        };
        markets.sort((a, b) => {
            const [hostA, , mktA] = a;
            const [hostB, , mktB] = b;
            if (!mktA.spot && !mktB.spot)
                return hostA.localeCompare(hostB);
            return spotVolume(assetID, mktB) - spotVolume(assetID, mktA);
        });
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.availableMarkets);
        for (const [host, xc, mkt] of markets) {
            const { spot, baseid, basesymbol, quoteid, quotesymbol } = mkt;
            const row = page.marketRow.cloneNode(true);
            page.availableMarkets.appendChild(row);
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
            tmpl.host.textContent = host;
            tmpl.baseLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(basesymbol);
            tmpl.quoteLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(quotesymbol);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tmpl.baseSymbol, tmpl.quoteSymbol);
            tmpl.baseSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(xc.assets[baseid], true));
            tmpl.quoteSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(xc.assets[quoteid], true));
            if (spot) {
                const convRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().conventionalRate(baseid, quoteid, spot.rate, exchanges[host]);
                tmpl.price.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(convRate);
                const fmtSymbol = (s) => s.split('.')[0].toUpperCase();
                tmpl.priceQuoteUnit.textContent = fmtSymbol(quotesymbol);
                tmpl.priceBaseUnit.textContent = fmtSymbol(basesymbol);
                tmpl.volume.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFourSigFigs(spotVolume(assetID, mkt));
                tmpl.volumeUnit.textContent = assetID === baseid ? fmtSymbol(basesymbol) : fmtSymbol(quotesymbol);
            }
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(tmpl.priceBox, tmpl.volumeBox);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(row, 'click', () => (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loadPage('markets', { host, baseID: baseid, quoteID: quoteid }));
        }
        page.marketsOverviewBox.classList.remove('invisible');
    }
    showRecentActivity(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.orderActivityBox);
            const filter = {
                n: 20,
                assets: [assetID],
                hosts: [],
                statuses: []
            };
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/orders', filter);
            loaded();
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.noActivity, page.orderActivity);
            if (!res.orders || res.orders.length === 0) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noActivity);
                page.orderActivityBox.classList.remove('invisible');
                return;
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.orderActivity);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.recentOrders);
            for (const ord of res.orders) {
                const row = page.recentOrderTmpl.cloneNode(true);
                page.recentOrders.appendChild(row);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
                let from, to;
                const [baseUnitInfo, quoteUnitInfo] = [(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(ord.baseID), (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(ord.quoteID)];
                if (ord.sell) {
                    [from, to] = [(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[ord.baseID], (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[ord.quoteID]];
                    tmpl.fromQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                    if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_6__.Limit) {
                        tmpl.toQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty / _orderutil__WEBPACK_IMPORTED_MODULE_6__.RateEncodingFactor * ord.rate, quoteUnitInfo);
                    }
                }
                else {
                    [from, to] = [(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[ord.quoteID], (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[ord.baseID]];
                    if (ord.type === _orderutil__WEBPACK_IMPORTED_MODULE_6__.Market) {
                        tmpl.fromQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                    }
                    else {
                        tmpl.fromQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty / _orderutil__WEBPACK_IMPORTED_MODULE_6__.RateEncodingFactor * ord.rate, quoteUnitInfo);
                        tmpl.toQty.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(ord.qty, baseUnitInfo);
                    }
                }
                tmpl.fromLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(from.symbol);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(tmpl.fromSymbol, tmpl.toSymbol);
                tmpl.fromSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(from, true));
                tmpl.toLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(to.symbol);
                tmpl.toSymbol.appendChild(_doc__WEBPACK_IMPORTED_MODULE_0__["default"].symbolize(to, true));
                tmpl.status.textContent = _orderutil__WEBPACK_IMPORTED_MODULE_6__.statusString(ord);
                tmpl.filled.textContent = `${(_orderutil__WEBPACK_IMPORTED_MODULE_6__.filled(ord) / ord.qty * 100).toFixed(1)}%`;
                tmpl.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(ord.submitTime);
                tmpl.link.href = `order/${ord.id}`;
                (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().bindInternalNavigation(row);
            }
            page.orderActivityBox.classList.remove('invisible');
        });
    }
    updateTxHistoryRow(row, tx, assetID) {
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
        let amtAssetID = assetID;
        let feesAssetID = assetID;
        if (tx.tokenID) {
            amtAssetID = tx.tokenID;
            if (assetID !== tx.tokenID)
                feesAssetID = assetID;
            else {
                const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
                if (asset.token)
                    feesAssetID = asset.token.parentID;
                else
                    console.error(`unable to determine fee asset for tx ${tx.id}`);
            }
        }
        const amtAssetUI = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(amtAssetID);
        const feesAssetUI = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(feesAssetID);
        tmpl.age.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].timeSince(tx.timestamp * 1000);
        tmpl.age.dataset.timestamp = String(tx.timestamp * 1000);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.timestamp === 0, tmpl.pending);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.timestamp !== 0, tmpl.age);
        if (tx.timestamp > 0)
            tmpl.age.dataset.stamp = String(tx.timestamp);
        let txType = txTypeString(tx.type);
        if (tx.tokenID && tx.tokenID !== assetID) {
            const tokenAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[tx.tokenID];
            const tokenSymbol = tokenAsset.unitInfo.conventional.unit;
            txType = `${tokenSymbol} ${txType}`;
        }
        tmpl.type.textContent = txType;
        tmpl.id.textContent = trimStringWithEllipsis(tx.id, 12);
        tmpl.id.setAttribute('title', tx.id);
        tmpl.fees.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(tx.fees, feesAssetUI);
        if (noAmtTxTypes.includes(tx.type)) {
            tmpl.amount.textContent = '-';
        }
        else {
            const [u, c] = txTypeSignAndClass(tx.type);
            const amt = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(tx.amount, amtAssetUI);
            tmpl.amount.textContent = `${u}${amt}`;
            if (c !== '')
                tmpl.amount.classList.add(c);
        }
    }
    txHistoryRow(tx, assetID) {
        const row = this.page.txHistoryRowTmpl.cloneNode(true);
        row.dataset.txid = tx.id;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].bind(row, 'click', () => this.showTxDetailsPopup(tx.id));
        this.updateTxHistoryRow(row, tx, assetID);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
        this.stampers.push(tmpl.age);
        return row;
    }
    txHistoryDateRow(date) {
        const row = this.page.txHistoryDateRowTmpl.cloneNode(true);
        const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(row);
        tmpl.date.textContent = date;
        return row;
    }
    setTxDetailsPopupElements(tx) {
        const page = this.page;
        // Block explorer
        const assetExplorer = _coinexplorers__WEBPACK_IMPORTED_MODULE_8__.CoinExplorers[this.selectedAssetID];
        if (assetExplorer && assetExplorer[net]) {
            page.txViewBlockExplorer.href = assetExplorer[net](tx.id);
        }
        // Tx type
        let txType = txTypeString(tx.type);
        if (tx.tokenID && tx.tokenID !== this.selectedAssetID) {
            const tokenSymbol = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[tx.tokenID].symbol.split('.')[0].toUpperCase();
            txType = `${tokenSymbol} ${txType}`;
        }
        page.txDetailsType.textContent = txType;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.type === txTypeSwapOrSend, page.txTypeTooltip);
        page.txTypeTooltip.dataset.tooltip = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_SWAP_OR_SEND_TOOLTIP);
        // Amount
        if (noAmtTxTypes.includes(tx.type)) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txDetailsAmtSection);
        }
        else {
            let assetID = this.selectedAssetID;
            if (tx.tokenID)
                assetID = tx.tokenID;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txDetailsAmtSection);
            const ui = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID);
            const amt = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(tx.amount, ui);
            const [s, c] = txTypeSignAndClass(tx.type);
            page.txDetailsAmount.textContent = `${s}${amt} ${ui.conventional.unit}`;
            if (c !== '')
                page.txDetailsAmount.classList.add(c);
        }
        // Fee
        let feeAsset = this.selectedAssetID;
        if (tx.tokenID !== undefined) {
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[tx.tokenID];
            if (asset.token) {
                feeAsset = asset.token.parentID;
            }
            else {
                console.error(`wallet transaction ${tx.id} is supposed to be a token tx, but asset ${tx.tokenID} is not a token`);
            }
        }
        const feeUI = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(feeAsset);
        const fee = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatCoinValue(tx.fees, feeUI);
        page.txDetailsFee.textContent = `${fee} ${feeUI.conventional.unit}`;
        // Time / block number
        page.txDetailsBlockNumber.textContent = `${tx.blockNumber}`;
        const date = new Date(tx.timestamp * 1000);
        const dateStr = date.toLocaleDateString();
        const timeStr = date.toLocaleTimeString();
        page.txDetailsTimestamp.textContent = `${dateStr} ${timeStr}`;
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.blockNumber === 0, page.timestampPending, page.blockNumberPending);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.blockNumber !== 0, page.txDetailsBlockNumber, page.txDetailsTimestamp);
        // Tx ID
        page.txDetailsID.textContent = trimStringWithEllipsis(tx.id, 20);
        page.txDetailsID.setAttribute('title', tx.id);
        // Recipient
        if (tx.recipient) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txDetailsRecipientSection);
            page.txDetailsRecipient.textContent = trimStringWithEllipsis(tx.recipient, 20);
            page.txDetailsRecipient.setAttribute('title', tx.recipient);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txDetailsRecipientSection);
        }
        // Bond Info
        if (tx.bondInfo) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txDetailsBondIDSection, page.txDetailsBondLocktimeSection);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(tx.bondInfo.accountID !== '', page.txDetailsBondAccountIDSection);
            page.txDetailsBondID.textContent = trimStringWithEllipsis(tx.bondInfo.bondID, 20);
            page.txDetailsBondID.setAttribute('title', tx.bondInfo.bondID);
            const date = new Date(tx.bondInfo.lockTime * 1000);
            const dateStr = date.toLocaleDateString();
            const timeStr = date.toLocaleTimeString();
            page.txDetailsBondLocktime.textContent = `${dateStr} ${timeStr}`;
            page.txDetailsBondAccountID.textContent = trimStringWithEllipsis(tx.bondInfo.accountID, 20);
            page.txDetailsBondAccountID.setAttribute('title', tx.bondInfo.accountID);
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txDetailsBondIDSection, page.txDetailsBondLocktimeSection, page.txDetailsBondAccountIDSection);
        }
        // Nonce
        if (tx.additionalData && tx.additionalData.Nonce) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txDetailsNonceSection);
            page.txDetailsNonce.textContent = `${tx.additionalData.Nonce}`;
        }
        else {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txDetailsNonceSection);
        }
    }
    showTxDetailsPopup(id) {
        const tx = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().getWalletTx(this.selectedAssetID, id);
        if (!tx) {
            console.error(`wallet transaction ${id} not found`);
            return;
        }
        this.currTx = tx;
        this.setTxDetailsPopupElements(tx);
        this.showForm(this.page.txDetails);
    }
    txHistoryTableNewestDate() {
        if (this.page.txHistoryTableBody.children.length >= 1) {
            const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(this.page.txHistoryTableBody.children[0]);
            return tmpl.date.textContent || '';
        }
        return '';
    }
    txDate(tx) {
        if (tx.timestamp === 0) {
            return (new Date()).toLocaleDateString();
        }
        return (new Date(tx.timestamp * 1000)).toLocaleDateString();
    }
    handleTxNote(tx, newTx) {
        var _a;
        const w = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID].wallet;
        const hideMixing = (w.traits & traitFundsMixer) !== 0 && !!this.page.hideMixTxs.checked;
        if (hideMixing && tx.type === txTypeMixing)
            return;
        if (newTx) {
            if (!this.oldestTx) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.txHistoryTable);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.noTxHistory);
                this.page.txHistoryTableBody.appendChild(this.txHistoryDateRow(this.txDate(tx)));
                this.page.txHistoryTableBody.appendChild(this.txHistoryRow(tx, this.selectedAssetID));
                this.oldestTx = tx;
            }
            else if (this.txDate(tx) !== this.txHistoryTableNewestDate()) {
                this.page.txHistoryTableBody.insertBefore(this.txHistoryRow(tx, this.selectedAssetID), this.page.txHistoryTableBody.children[0]);
                this.page.txHistoryTableBody.insertBefore(this.txHistoryDateRow(this.txDate(tx)), this.page.txHistoryTableBody.children[0]);
            }
            else {
                this.page.txHistoryTableBody.insertBefore(this.txHistoryRow(tx, this.selectedAssetID), this.page.txHistoryTableBody.children[1]);
            }
            return;
        }
        for (const row of this.page.txHistoryTableBody.children) {
            const peRow = row;
            if (peRow.dataset.txid === tx.id) {
                this.updateTxHistoryRow(peRow, tx, this.selectedAssetID);
                break;
            }
        }
        if (tx.id === ((_a = this.currTx) === null || _a === void 0 ? void 0 : _a.id)) {
            this.setTxDetailsPopupElements(tx);
        }
    }
    getTxHistory(assetID, hideMixTxs, after) {
        return __awaiter(this, void 0, void 0, function* () {
            let numToFetch = 10;
            if (hideMixTxs)
                numToFetch = 15;
            const res = { txs: [], lastTx: false };
            let ref = after;
            for (let i = 0; i < 40; i++) {
                const currRes = yield (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().txHistory(assetID, numToFetch, ref);
                if (currRes.txs.length > 0) {
                    ref = currRes.txs[currRes.txs.length - 1].id;
                }
                let txs = currRes.txs;
                if (hideMixTxs) {
                    txs = txs.filter((tx) => tx.type !== txTypeMixing);
                }
                if (res.txs.length + txs.length > 10) {
                    const numToPush = 10 - res.txs.length;
                    res.txs.push(...txs.slice(0, numToPush));
                }
                else {
                    if (currRes.lastTx)
                        res.lastTx = true;
                    res.txs.push(...txs);
                }
                if (res.txs.length >= 10 || currRes.lastTx)
                    break;
            }
            return res;
        });
    }
    showTxHistory(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            let txRes;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.txHistoryTable, page.txHistoryBox, page.noTxHistory, page.earlierTxs, page.txHistoryNotAvailable, page.hideMixTxs);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.txHistoryTableBody);
            const w = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID].wallet;
            if (!w || w.disabled || (w.traits & traitHistorian) === 0) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txHistoryNotAvailable);
                return;
            }
            this.oldestTx = undefined;
            const isMixing = (w.traits & traitFundsMixer) !== 0;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(isMixing, page.hideMixTxs);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txHistoryBox);
            try {
                const hideMixing = isMixing && !!page.hideMixTxsCheckbox.checked;
                txRes = yield this.getTxHistory(assetID, hideMixing);
            }
            catch (err) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noTxHistory);
                return;
            }
            if (txRes.txs.length === 0) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.noTxHistory);
                return;
            }
            let oldestDate = this.txDate(txRes.txs[0]);
            page.txHistoryTableBody.appendChild(this.txHistoryDateRow(oldestDate));
            for (const tx of txRes.txs) {
                const date = this.txDate(tx);
                if (date !== oldestDate) {
                    oldestDate = date;
                    page.txHistoryTableBody.appendChild(this.txHistoryDateRow(date));
                }
                const row = this.txHistoryRow(tx, assetID);
                page.txHistoryTableBody.appendChild(row);
            }
            this.oldestTx = txRes.txs[txRes.txs.length - 1];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.txHistoryTable);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!txRes.lastTx, page.earlierTxs);
        });
    }
    loadEarlierTxs() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.oldestTx)
                return;
            const page = this.page;
            let txRes;
            const w = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID].wallet;
            const hideMixing = (w.traits & traitFundsMixer) !== 0 && !!page.hideMixTxsCheckbox.checked;
            try {
                txRes = yield this.getTxHistory(this.selectedAssetID, hideMixing, this.oldestTx.id);
            }
            catch (err) {
                console.error(err);
                return;
            }
            let oldestDate = this.txDate(this.oldestTx);
            for (const tx of txRes.txs) {
                const date = this.txDate(tx);
                if (date !== oldestDate) {
                    oldestDate = date;
                    page.txHistoryTableBody.appendChild(this.txHistoryDateRow(date));
                }
                const row = this.txHistoryRow(tx, this.selectedAssetID);
                page.txHistoryTableBody.appendChild(row);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(!txRes.lastTx, page.earlierTxs);
            if (txRes.txs.length > 0) {
                this.oldestTx = txRes.txs[txRes.txs.length - 1];
            }
        });
    }
    rescanWallet(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.reconfigErr);
            const url = '/api/rescanwallet';
            const req = { assetID: assetID };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(url, req);
            loaded();
            if (res.code === _http__WEBPACK_IMPORTED_MODULE_2__.Errors.activeOrdersErr) {
                this.forceUrl = url;
                this.forceReq = req;
                this.showConfirmForce();
                return;
            }
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.reconfigErr, res.msg);
                return;
            }
            this.assetUpdated(assetID, page.reconfigForm, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_RESCAN_STARTED));
        });
    }
    showConfirmForce() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.confirmForceErr);
        this.showForm(this.page.confirmForce);
    }
    showRecoverWallet() {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.recoverWalletErr);
        this.showForm(this.page.recoverWalletConfirm);
    }
    /* Show the open wallet form if the password is not cached, and otherwise
     * attempt to open the wallet.
     */
    openWallet(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const open = {
                assetID: assetID
            };
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/openwallet', open);
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                console.error('openwallet error', res);
                return;
            }
            this.assetUpdated(assetID, undefined, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_UNLOCKED));
        });
    }
    /* Show the form used to change wallet configuration settings. */
    showReconfig(assetID, cfg) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.changeWalletType, page.changeTypeHideIcon, page.reconfigErr, page.showChangeType, page.changeTypeHideIcon, page.reconfigErr, page.enableWallet, page.disableWallet);
            // Hide update password section by default
            this.changeWalletPW = false;
            this.setPWSettingViz(this.changeWalletPW);
            const asset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
            const currentDef = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().currentWalletDefinition(assetID);
            const walletDefs = asset.token ? [asset.token.definition] : asset.info ? asset.info.availablewallets : [];
            const disableWalletType = (_a = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().extensionWallet(assetID)) === null || _a === void 0 ? void 0 : _a.disableWalletType;
            if (walletDefs.length > 1 && !disableWalletType) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.changeWalletTypeSelect);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.showChangeType, page.changeTypeShowIcon);
                page.changeTypeMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CHANGE_WALLET_TYPE);
                for (const wDef of walletDefs) {
                    const option = document.createElement('option');
                    if (wDef.type === currentDef.type)
                        option.selected = true;
                    option.value = option.textContent = wDef.type;
                    page.changeWalletTypeSelect.appendChild(option);
                }
            }
            if (cfg === null || cfg === void 0 ? void 0 : cfg.elevateProviders) {
                for (const opt of (currentDef.configopts))
                    if (opt.key === 'providers')
                        opt.required = true;
            }
            const wallet = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletMap[assetID];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitLogFiler, page.downloadLogs);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitRecoverer, page.recoverWallet);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitRestorer, page.exportWallet);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitRescanner, page.rescanWallet);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitPeerManager && !wallet.disabled, page.managePeers);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitTokenApprover && !wallet.disabled, page.unapproveTokenAllowance);
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].setVis(wallet.traits & traitsExtraOpts, page.otherActionsLabel);
            if (wallet.disabled)
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.enableWallet);
            else
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.disableWallet);
            this.showOrHideRecoverySupportMsg(wallet, currentDef.seeded);
            page.recfgAssetLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(asset.symbol);
            page.recfgAssetName.textContent = asset.name;
            if (!(cfg === null || cfg === void 0 ? void 0 : cfg.skipAnimation))
                this.showForm(page.reconfigForm);
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.reconfigForm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/walletsettings', { assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.reconfigErr, res.msg);
                return;
            }
            const assetHasActiveOrders = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().haveActiveOrders(assetID);
            this.reconfigForm.update(asset.id, currentDef.configopts || [], assetHasActiveOrders);
            this.setGuideLink(currentDef.guidelink);
            this.reconfigForm.setConfig(res.map);
            this.updateDisplayedReconfigFields(currentDef);
        });
    }
    showOrHideRecoverySupportMsg(wallet, seeded) {
        this.setRecoverySupportMsgViz(seeded && !wallet.running && !wallet.disabled && Boolean(wallet.traits & traitRecoverer), wallet.symbol);
    }
    setRecoverySupportMsgViz(viz, symbol) {
        const page = this.page;
        if (viz) {
            page.reconfigSupportMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_WALLET_RECOVERY_SUPPORT_MSG, { walletSymbol: symbol.toLocaleUpperCase() });
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.reconfigSupportMsg);
            page.submitReconfig.setAttribute('disabled', '');
            page.submitReconfig.classList.add('grey');
            return;
        }
        page.submitReconfig.removeAttribute('disabled');
        page.submitReconfig.classList.remove('grey');
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.reconfigSupportMsg);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.reconfigSupportMsg);
    }
    changeWalletType() {
        const page = this.page;
        const walletType = page.changeWalletTypeSelect.value || '';
        const walletDef = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletDefinition(this.selectedAssetID, walletType);
        this.reconfigForm.update(this.selectedAssetID, walletDef.configopts || [], false);
        const wallet = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletMap[this.selectedAssetID];
        const currentDef = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().currentWalletDefinition(this.selectedAssetID);
        if (walletDef.type !== currentDef.type)
            this.setRecoverySupportMsgViz(false, wallet.symbol);
        else
            this.showOrHideRecoverySupportMsg(wallet, walletDef.seeded);
        this.setGuideLink(walletDef.guidelink);
        this.updateDisplayedReconfigFields(walletDef);
    }
    setGuideLink(guideLink) {
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.walletCfgGuide);
        if (guideLink !== '') {
            this.walletCfgGuide.href = guideLink;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.walletCfgGuide);
        }
    }
    updateDisplayedReconfigFields(walletDef) {
        var _a;
        const disablePassword = (_a = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().extensionWallet(this.selectedAssetID)) === null || _a === void 0 ? void 0 : _a.disablePassword;
        if (walletDef.seeded || walletDef.type === 'token' || disablePassword) {
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(this.page.showChangePW, this.reconfigForm.fileSelector);
            this.changeWalletPW = false;
            this.setPWSettingViz(false);
        }
        else
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(this.page.showChangePW, this.reconfigForm.fileSelector);
    }
    /* Display a deposit address. */
    showDeposit(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.depositAddrForm.setAsset(assetID);
            this.showForm(this.page.deposit);
        });
    }
    /* Show the form to either send or withdraw funds. */
    showSendForm(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const box = page.sendForm;
            const { wallet, unitInfo: ui, symbol, token } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.toggleSubtract);
            page.subtractCheckBox.checked = false;
            const isWithdrawer = (wallet.traits & traitWithdrawer) !== 0;
            if (isWithdrawer) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.toggleSubtract);
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.sendErr, page.maxSendDisplay, page.sendTokenMsgBox);
            page.sendAddr.classList.remove('border-danger', 'border-success');
            page.sendAddr.value = '';
            page.sendAmt.value = '';
            const xcRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[assetID];
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.sendValue, 0, xcRate, ui);
            page.walletBal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(wallet.balance.available, ui);
            page.sendLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(symbol);
            page.sendName.textContent = ui.conventional.unit;
            if (token) {
                const parentAsset = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[token.parentID];
                page.sendTokenParentLogo.src = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].logoPath(parentAsset.symbol);
                page.sendTokenParentName.textContent = parentAsset.name;
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.sendTokenMsgBox);
            }
            // page.sendFee.textContent = wallet.feerate
            // page.sendUnit.textContent = wallet.units
            if (wallet.balance.available > 0 && (wallet.traits & traitTxFeeEstimator) !== 0) {
                const feeReq = {
                    assetID: assetID,
                    subtract: isWithdrawer,
                    maxWithdraw: true,
                    value: wallet.balance.available
                };
                const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(this.body);
                const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/txfee', feeReq);
                loaded();
                if ((0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                    let canSend = wallet.balance.available;
                    if (!token) {
                        canSend -= res.txfee;
                        if (canSend < 0)
                            canSend = 0;
                    }
                    this.maxSend = canSend;
                    page.maxSend.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(canSend, ui);
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.maxSendFiat, canSend, xcRate, ui);
                    if (token) {
                        const feeUI = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[token.parentID].unitInfo;
                        page.maxSendFee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(res.txfee, feeUI) + ' ' + feeUI.conventional.unit;
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.maxSendFeeFiat, res.txfee, (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[token.parentID], feeUI);
                    }
                    else {
                        page.maxSendFee.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(res.txfee, ui);
                        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.maxSendFeeFiat, res.txfee, xcRate, ui);
                    }
                    _doc__WEBPACK_IMPORTED_MODULE_0__["default"].show(page.maxSendDisplay);
                }
            }
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.sendValue, 0, xcRate, ui);
            page.walletBal.textContent = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].formatFullPrecision(wallet.balance.available, ui);
            box.dataset.assetID = String(assetID);
            this.showForm(box);
        });
    }
    /* doConnect connects to a wallet via the connectwallet API route. */
    doConnect(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(this.body);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/connectwallet', { assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                const { symbol } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID];
                const page = this.page;
                page.errorModalMsg.textContent = _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_CONNECT_WALLET_ERR_MSG, { assetName: symbol, errMsg: res.msg });
                this.showForm(page.errorModal);
            }
            this.updateDisplayedAsset(assetID);
        });
    }
    assetUpdated(assetID, oldForm, successMsg) {
        if (assetID !== this.selectedAssetID)
            return;
        this.updateDisplayedAsset(assetID);
        if (oldForm && Object.is(this.currentForm, oldForm)) {
            if (successMsg)
                this.showSuccess(successMsg);
            else
                this.closePopups();
        }
    }
    /* populateMaxSend populates the amount field with the max amount the wallet
       can send. The max send amount can be the maximum amount based on our
       pre-estimation or the asset's wallet balance.
    */
    populateMaxSend() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const { id: assetID, unitInfo: ui, wallet } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[this.selectedAssetID];
            // Populate send amount with max send value and ensure we don't check
            // subtract checkbox for assets that don't have a withdraw method.
            const xcRate = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().fiatRatesMap[assetID];
            if ((wallet.traits & traitWithdrawer) === 0) {
                page.sendAmt.value = String(this.maxSend / ui.conventional.conversionFactor);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.sendValue, this.maxSend, xcRate, ui);
                page.subtractCheckBox.checked = false;
            }
            else {
                const amt = wallet.balance.available;
                page.sendAmt.value = String(amt / ui.conventional.conversionFactor);
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFiatValue(page.sendValue, amt, xcRate, ui);
                page.subtractCheckBox.checked = true;
            }
        });
    }
    /* send submits the send form to the API. */
    send() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const assetID = parseInt((_a = page.sendForm.dataset.assetID) !== null && _a !== void 0 ? _a : '');
            const subtract = (_b = page.subtractCheckBox.checked) !== null && _b !== void 0 ? _b : false;
            const conversionFactor = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(assetID).conventional.conversionFactor;
            const pw = page.vSendPw.value || '';
            page.vSendPw.value = '';
            if (pw === '') {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.vSendErr, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_NO_PASS_ERROR_MSG));
                return;
            }
            const open = {
                assetID: assetID,
                address: page.sendAddr.value,
                subtract: subtract,
                value: Math.round((0,_doc__WEBPACK_IMPORTED_MODULE_0__.parseFloatDefault)(page.sendAmt.value) * conversionFactor),
                pw: pw
            };
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.vSendForm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/send', open);
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.vSendErr, res.msg);
                return;
            }
            const name = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().assets[assetID].name;
            this.assetUpdated(assetID, page.vSendForm, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_SEND_SUCCESS, { assetName: name }));
        });
    }
    /* update wallet configuration */
    reconfig() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const assetID = this.selectedAssetID;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.reconfigErr);
            let walletType = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().currentWalletDefinition(assetID).type;
            if (!_doc__WEBPACK_IMPORTED_MODULE_0__["default"].isHidden(page.changeWalletType)) {
                walletType = page.changeWalletTypeSelect.value || '';
            }
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.reconfigForm);
            const req = {
                assetID: assetID,
                config: this.reconfigForm.map(assetID),
                walletType: walletType
            };
            if (this.changeWalletPW)
                req.newWalletPW = page.newPW.value;
            const res = yield this.safePost('/api/reconfigurewallet', req);
            page.newPW.value = '';
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.reconfigErr, res.msg);
                return;
            }
            if ((_a = this.data) === null || _a === void 0 ? void 0 : _a.goBack) {
                (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loadPage(this.data.goBack);
                return;
            }
            this.assetUpdated(assetID, page.reconfigForm, _locales__WEBPACK_IMPORTED_MODULE_5__.prep(_locales__WEBPACK_IMPORTED_MODULE_5__.ID_RECONFIG_SUCCESS));
            this.updateTicketBuyer(assetID);
            (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().clearTxHistory(assetID);
            this.showTxHistory(assetID);
            this.updatePrivacy(assetID);
            this.checkNeedsProvider(assetID);
        });
    }
    /* lock instructs the API to lock the wallet. */
    lock(assetID) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.newWalletForm);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)('/api/closewallet', { assetID: assetID });
            loaded();
            if (!(0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res))
                return;
            this.updateDisplayedAsset(assetID);
            this.updatePrivacy(assetID);
        });
    }
    downloadLogs() {
        return __awaiter(this, void 0, void 0, function* () {
            const search = new URLSearchParams('');
            search.append('assetid', `${this.selectedAssetID}`);
            const url = new URL(window.location.href);
            url.search = search.toString();
            url.pathname = '/wallets/logfile';
            window.open(url.toString());
        });
    }
    // displayExportWalletAuth displays a form to warn the user about the
    // dangers of exporting a wallet, and asks them to enter their password.
    displayExportWalletAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.exportWalletErr);
            page.exportWalletPW.value = '';
            this.showForm(page.exportWalletAuth);
        });
    }
    // exportWalletAuthSubmit is called after the user enters their password to
    // authorize looking up the information to restore their wallet in an
    // external wallet.
    exportWalletAuthSubmit() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            const req = {
                assetID: this.selectedAssetID,
                pass: page.exportWalletPW.value
            };
            const url = '/api/restorewalletinfo';
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.forms);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(url, req);
            loaded();
            if ((0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                page.exportWalletPW.value = '';
                this.displayRestoreWalletInfo(res.restorationinfo);
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.exportWalletErr, res.msg);
            }
        });
    }
    // displayRestoreWalletInfo displays the information needed to restore a
    // wallet in external wallets.
    displayRestoreWalletInfo(info) {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].empty(page.restoreInfoCardsList);
            for (const wr of info) {
                const card = this.restoreInfoCard.cloneNode(true);
                const tmpl = _doc__WEBPACK_IMPORTED_MODULE_0__["default"].parseTemplate(card);
                tmpl.name.textContent = wr.target;
                tmpl.seed.textContent = wr.seed;
                tmpl.seedName.textContent = `${wr.seedName}:`;
                tmpl.instructions.textContent = wr.instructions;
                page.restoreInfoCardsList.appendChild(card);
            }
            this.showForm(page.restoreWalletInfo);
        });
    }
    recoverWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].hide(page.recoverWalletErr);
            const req = {
                assetID: this.selectedAssetID
            };
            const url = '/api/recoverwallet';
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.forms);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(url, req);
            loaded();
            if (res.code === _http__WEBPACK_IMPORTED_MODULE_2__.Errors.activeOrdersErr) {
                this.forceUrl = url;
                this.forceReq = req;
                this.showConfirmForce();
            }
            else if ((0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res)) {
                this.closePopups();
            }
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.recoverWalletErr, res.msg);
            }
        });
    }
    /*
     * confirmForceSubmit resubmits either the recover or rescan requests with
     * force set to true. These two requests require force to be set to true if
     * they are called while the wallet is managing active orders.
     */
    confirmForceSubmit() {
        return __awaiter(this, void 0, void 0, function* () {
            const page = this.page;
            this.forceReq.force = true;
            const loaded = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().loading(page.forms);
            const res = yield (0,_http__WEBPACK_IMPORTED_MODULE_2__.postJSON)(this.forceUrl, this.forceReq);
            loaded();
            if ((0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().checkResponse(res))
                this.closePopups();
            else {
                _doc__WEBPACK_IMPORTED_MODULE_0__["default"].showFormError(page.confirmForceErr, res.msg);
            }
        });
    }
    /* handleBalance handles notifications updating a wallet's balance and assets'
       value in default fiat rate.
    . */
    handleBalanceNote(note) {
        this.updateAssetButton(note.assetID);
        if (note.assetID === this.selectedAssetID)
            this.updateDisplayedAssetBalance();
    }
    /* handleRatesNote handles fiat rate notifications, updating the fiat value of
     *  all supported assets.
     */
    handleRatesNote(note) {
        this.updateAssetButton(this.selectedAssetID);
        if (!note.fiatRates[this.selectedAssetID])
            return;
        this.updateDisplayedAssetBalance();
        const { feeState } = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletMap[this.selectedAssetID];
        if (feeState)
            this.updateFeeState(feeState);
    }
    /*
     * handleWalletStateNote is a handler for both the 'walletstate' and
     * 'walletconfig' notifications.
     */
    handleWalletStateNote(note) {
        const { assetID, feeState } = note.wallet;
        this.updateAssetButton(assetID);
        this.assetUpdated(assetID);
        if (note.topic === 'WalletPeersUpdate' &&
            assetID === this.selectedAssetID &&
            _doc__WEBPACK_IMPORTED_MODULE_0__["default"].isDisplayed(this.page.managePeersForm)) {
            this.updateWalletPeersTable();
        }
        if (feeState && assetID === this.selectedAssetID)
            this.updateFeeState(feeState);
    }
    /*
     * handleCreateWalletNote is a handler for 'createwallet' notifications.
     */
    handleCreateWalletNote(note) {
        this.updateAssetButton(note.assetID);
        this.assetUpdated(note.assetID);
        this.showTxHistory(note.assetID);
    }
    handleCustomWalletNote(note) {
        const walletNote = note.payload;
        switch (walletNote.route) {
            case 'tipChange': {
                const n = walletNote;
                switch (n.assetID) {
                    case 42: { // dcr
                        if (!this.stakeStatus)
                            return;
                        const data = n.data;
                        const synced = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().walletMap[n.assetID].synced;
                        if (synced) {
                            const ui = (0,_registry__WEBPACK_IMPORTED_MODULE_7__.app)().unitInfo(n.assetID);
                            this.updateTicketStats(data.stats, ui, data.ticketPrice, data.votingSubsidy);
                        }
                    }
                }
                break;
            }
            case 'ticketPurchaseUpdate': {
                this.processTicketPurchaseUpdate(walletNote);
                break;
            }
            case 'transaction': {
                const n = walletNote;
                if (n.assetID === this.selectedAssetID)
                    this.handleTxNote(n.transaction, n.new);
                break;
            }
            case 'transactionHistorySynced': {
                const n = walletNote;
                if (n.assetID === this.selectedAssetID)
                    this.showTxHistory(n.assetID);
                break;
            }
        }
    }
    /*
     * unload is called by the Application when the user navigates away from
     * the /wallets page.
     */
    unload() {
        clearInterval(this.secondTicker);
        _doc__WEBPACK_IMPORTED_MODULE_0__["default"].unbind(document, 'keyup', this.keyup);
    }
}
function trimStringWithEllipsis(str, maxLen) {
    if (str.length <= maxLen)
        return str;
    return `${str.substring(0, maxLen / 2)}...${str.substring(str.length - maxLen / 2)}`;
}


/***/ }),

/***/ "./src/js/ws.ts":
/*!**********************!*\
  !*** ./src/js/ws.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// MessageSocket is a WebSocket manager that uses the Decred DEX Message format
// for communications.
//
// Message request format:
// {
//   route: 'name',
//   id: int,
//   payload: anything or nothing
// }
//
// Message response payload will be a result object with either a valid 'result'
// field or an 'error' field
//
// Functions for external use:
// registerRoute (route, handler) -- register a function to handle events
// of the given type
// request (route, payload) -- create a JSON message in the above format and
// send it
//
// Based on messagesocket_service.js by Jonathan Chappelow @ dcrdata, which is
// based on ws_events_dispatcher.js by Ismael Celis
const typeRequest = 1;
function forward(route, payload, handlers) {
    if (!route && payload.error) {
        const err = payload.error;
        console.error(`websocket error (code ${err.code}): ${err.message}`);
        return;
    }
    if (typeof handlers[route] === 'undefined') {
        // console.log(`unhandled message for ${route}: ${payload}`)
        return;
    }
    // call each handler
    for (let i = 0; i < handlers[route].length; i++) {
        handlers[route][i](payload);
    }
}
let id = 0;
class MessageSocket {
    constructor() {
        this.handlers = {};
        this.queue = [];
        this.maxQlength = 5;
    }
    registerRoute(route, handler) {
        this.handlers[route] = this.handlers[route] || [];
        this.handlers[route].push(handler);
    }
    deregisterRoute(route) {
        this.handlers[route] = [];
    }
    // request sends a request-type message to the server
    request(route, payload) {
        if (!this.connection || this.connection.readyState !== window.WebSocket.OPEN) {
            while (this.queue.length > this.maxQlength - 1)
                this.queue.shift();
            this.queue.push([route, payload]);
            return;
        }
        id++;
        const message = JSON.stringify({
            route: route,
            type: typeRequest,
            id: id,
            payload: payload
        });
        window.log('ws', 'sending', message);
        this.connection.send(message);
    }
    close(reason) {
        window.log('ws', 'close, reason:', reason, this.handlers);
        this.handlers = {};
        if (this.connection)
            this.connection.close();
    }
    connect(uri, reloader) {
        this.uri = uri;
        this.reloader = reloader;
        let retrys = 0;
        const go = () => {
            window.log('ws', `connecting to ${uri}`);
            let conn = this.connection = new window.WebSocket(uri);
            if (!conn)
                return;
            const timeout = setTimeout(() => {
                // readyState is still WebSocket.CONNECTING. Cancel and trigger onclose.
                if (conn)
                    conn.close();
            }, 500);
            // unmarshal message, and forward the message to registered handlers
            conn.onmessage = (evt) => {
                const message = JSON.parse(evt.data);
                forward(message.route, message.payload, this.handlers);
            };
            // Stub out standard functions
            conn.onclose = (evt) => {
                window.log('ws', 'onclose');
                clearTimeout(timeout);
                conn = this.connection = null;
                forward('close', null, this.handlers);
                retrys++;
                // 1.2, 1.6, 2.0, 2.4, 3.1, 3.8, 4.8, 6.0, 7.5, 9.3, ...
                const delay = Math.min(Math.pow(1.25, retrys), 10);
                console.error(`websocket disconnected (${evt.code}), trying again in ${delay.toFixed(1)} seconds`);
                setTimeout(() => {
                    go();
                }, delay * 1000);
            };
            conn.onopen = () => {
                window.log('ws', 'onopen');
                clearTimeout(timeout);
                if (retrys > 0) {
                    retrys = 0;
                    reloader();
                }
                forward('open', null, this.handlers);
                const queue = this.queue;
                this.queue = [];
                for (const [route, message] of queue) {
                    this.request(route, message);
                }
            };
            conn.onerror = (evt) => {
                window.log('ws', 'onerror:', evt);
                forward('error', evt, this.handlers);
            };
        };
        go();
    }
}
const ws = new MessageSocket();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ws);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/app */ "./src/js/app.ts");
/* harmony import */ var _js_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/registry */ "./src/js/registry.ts");
/* harmony import */ var _css_bootstrap_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./css/bootstrap.scss */ "./src/css/bootstrap.scss");
/* harmony import */ var _css_application_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./css/application.scss */ "./src/css/application.scss");




const app = new _js_app__WEBPACK_IMPORTED_MODULE_0__["default"]();
(0,_js_registry__WEBPACK_IMPORTED_MODULE_1__.registerApplication)(app);
app.start();

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,